
Drawing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a07c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800a190  0800a190  0000b190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7b4  0800a7b4  0000c264  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7bc  0800a7bc  0000c264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7bc  0800a7bc  0000b7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7c0  0800a7c0  0000b7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800a7c4  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000268  0800aa28  0000c268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  0800aa28  0000cbb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccc6  00000000  00000000  0000c28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6c  00000000  00000000  00018f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0001adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a24  00000000  00000000  0001bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001887d  00000000  00000000  0001c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e858  00000000  00000000  00034d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca1b  00000000  00000000  000435b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cffcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d54  00000000  00000000  000d0010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d4d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a174 	.word	0x0800a174

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	0800a174 	.word	0x0800a174

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0b4      	sub	sp, #208	@ 0xd0
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bda:	f001 fb49 	bl	8002270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bde:	f000 f833 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 f9af 	bl	8000f44 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000be6:	f000 f86b 	bl	8000cc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bea:	f000 f90b 	bl	8000e04 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000bee:	f000 f97f 	bl	8000ef0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000bf2:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <main+0x60>)
 8000bf4:	f002 fb72 	bl	80032dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000bf8:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <main+0x64>)
 8000bfa:	f002 fb6f 	bl	80032dc <HAL_TIM_Base_Start_IT>
  void setting_robot(int index, double posX[], double posY[]);
  void homing();
  char msg[] = "Uart Command:\r\n 1. Drawing Star.\r\n 2. Manual Input.\r\n 3. Homing Mode.\r\n 4. Run Save Point in Mode 2. \r\n Note: If you are in mode 2, please enter '!' to quit mode 2.\r\n Sample Command in mode 2: X10 Y10; \r\n";
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <main+0x68>)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4611      	mov	r1, r2
 8000c04:	22cd      	movs	r2, #205	@ 0xcd
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 fb7f 	bl	800630a <memcpy>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fa9e 	bl	8000150 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4639      	mov	r1, r7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <main+0x6c>)
 8000c20:	f003 fd0d 	bl	800463e <HAL_UART_Transmit>
//  setting_robot(0);
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_byte, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <main+0x70>)
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <main+0x6c>)
 8000c2a:	f003 fd93 	bl	8004754 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c2e:	bf00      	nop
 8000c30:	e7fd      	b.n	8000c2e <main+0x5a>
 8000c32:	bf00      	nop
 8000c34:	20000284 	.word	0x20000284
 8000c38:	200002cc 	.word	0x200002cc
 8000c3c:	0800a190 	.word	0x0800a190
 8000c40:	20000314 	.word	0x20000314
 8000c44:	20000a58 	.word	0x20000a58

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b090      	sub	sp, #64	@ 0x40
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2228      	movs	r2, #40	@ 0x28
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 fac9 	bl	80061ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c72:	2310      	movs	r3, #16
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fecc 	bl	8002a1c <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c8a:	f001 f857 	bl	8001d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 f93a 	bl	8002f20 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb2:	f001 f843 	bl	8001d3c <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3740      	adds	r7, #64	@ 0x40
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b096      	sub	sp, #88	@ 0x58
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 fa78 	bl	80061ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d00:	4a3f      	ldr	r2, [pc, #252]	@ (8000e00 <MX_TIM1_Init+0x140>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000d04:	4b3d      	ldr	r3, [pc, #244]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000d10:	4b3a      	ldr	r3, [pc, #232]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b38      	ldr	r3, [pc, #224]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1e:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d2a:	4834      	ldr	r0, [pc, #208]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d2c:	f002 fa86 	bl	800323c <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d36:	f001 f801 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d44:	4619      	mov	r1, r3
 8000d46:	482d      	ldr	r0, [pc, #180]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d48:	f002 ffcc 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d52:	f000 fff3 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d56:	4829      	ldr	r0, [pc, #164]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d58:	f002 fb12 	bl	8003380 <HAL_TIM_PWM_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d62:	f000 ffeb 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d72:	4619      	mov	r1, r3
 8000d74:	4821      	ldr	r0, [pc, #132]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000d76:	f003 fb51 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d80:	f000 ffdc 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d84:	2360      	movs	r3, #96	@ 0x60
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 300;
 8000d88:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4814      	ldr	r0, [pc, #80]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000dac:	f002 fed8 	bl	8003b60 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000db6:	f000 ffc1 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000dde:	f003 fb7b 	bl	80044d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000de8:	f000 ffa8 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dec:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <MX_TIM1_Init+0x13c>)
 8000dee:	f001 f835 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3758      	adds	r7, #88	@ 0x58
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000284 	.word	0x20000284
 8000e00:	40012c00 	.word	0x40012c00

08000e04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	@ 0x38
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e3e:	2207      	movs	r2, #7
 8000e40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e5c:	4823      	ldr	r0, [pc, #140]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e5e:	f002 f9ed 	bl	800323c <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e68:	f000 ff68 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e76:	4619      	mov	r1, r3
 8000e78:	481c      	ldr	r0, [pc, #112]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e7a:	f002 ff33 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e84:	f000 ff5a 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e88:	4818      	ldr	r0, [pc, #96]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000e8a:	f002 fa79 	bl	8003380 <HAL_TIM_PWM_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e94:	f000 ff52 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4811      	ldr	r0, [pc, #68]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000ea8:	f003 fab8 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000eb2:	f000 ff43 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb6:	2360      	movs	r3, #96	@ 0x60
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8000eba:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000ed0:	f002 fe46 	bl	8003b60 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000eda:	f000 ff2f 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <MX_TIM2_Init+0xe8>)
 8000ee0:	f000 ffbc 	bl	8001e5c <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3738      	adds	r7, #56	@ 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200002cc 	.word	0x200002cc

08000ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <MX_USART1_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000efc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_USART1_UART_Init+0x4c>)
 8000f28:	f003 fb39 	bl	800459e <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f000 ff03 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000314 	.word	0x20000314
 8000f40:	40013800 	.word	0x40013800

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a31      	ldr	r2, [pc, #196]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f5e:	f043 0320 	orr.w	r3, r3, #32
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0320 	and.w	r3, r3, #32
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a25      	ldr	r2, [pc, #148]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <MX_GPIO_Init+0xe0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4820      	ldr	r0, [pc, #128]	@ (8001028 <MX_GPIO_Init+0xe4>)
 8000fa6:	f001 fd09 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb0:	481e      	ldr	r0, [pc, #120]	@ (800102c <MX_GPIO_Init+0xe8>)
 8000fb2:	f001 fd03 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4816      	ldr	r0, [pc, #88]	@ (8001028 <MX_GPIO_Init+0xe4>)
 8000fce:	f001 fb71 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <MX_GPIO_Init+0xe8>)
 8000fec:	f001 fb62 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000ff0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_GPIO_Init+0xec>)
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_GPIO_Init+0xe8>)
 8001006:	f001 fb55 	bl	80026b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2017      	movs	r0, #23
 8001010:	f001 fa67 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001014:	2017      	movs	r0, #23
 8001016:	f001 fa80 	bl	800251a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101a:	bf00      	nop
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800
 800102c:	40010c00 	.word	0x40010c00
 8001030:	10110000 	.word	0x10110000

08001034 <setting_robot>:

/* USER CODE BEGIN 4 */
void setting_robot(int index, double posX[], double posY[])
{
 8001034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001038:	b094      	sub	sp, #80	@ 0x50
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001042:	2100      	movs	r1, #0
 8001044:	488a      	ldr	r0, [pc, #552]	@ (8001270 <setting_robot+0x23c>)
 8001046:	f002 fbe9 	bl	800381c <HAL_TIM_PWM_Stop_IT>
	  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4889      	ldr	r0, [pc, #548]	@ (8001274 <setting_robot+0x240>)
 800104e:	f002 fbe5 	bl	800381c <HAL_TIM_PWM_Stop_IT>
	  idle = 1;
 8001052:	4b89      	ldr	r3, [pc, #548]	@ (8001278 <setting_robot+0x244>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
	  current_X = (double) posX[index] - prev_X;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001064:	4b85      	ldr	r3, [pc, #532]	@ (800127c <setting_robot+0x248>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff f87d 	bl	8000168 <__aeabi_dsub>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4983      	ldr	r1, [pc, #524]	@ (8001280 <setting_robot+0x24c>)
 8001074:	e9c1 2300 	strd	r2, r3, [r1]
	  current_Y = (double) posY[index] - prev_Y;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001084:	4b7f      	ldr	r3, [pc, #508]	@ (8001284 <setting_robot+0x250>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff f86d 	bl	8000168 <__aeabi_dsub>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	497d      	ldr	r1, [pc, #500]	@ (8001288 <setting_robot+0x254>)
 8001094:	e9c1 2300 	strd	r2, r3, [r1]
	  if(current_X > 0) //spin clockwise if current value > previous value
 8001098:	4b79      	ldr	r3, [pc, #484]	@ (8001280 <setting_robot+0x24c>)
 800109a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	f7ff fca7 	bl	80009f8 <__aeabi_dcmpgt>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <setting_robot+0x90>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b6:	4875      	ldr	r0, [pc, #468]	@ (800128c <setting_robot+0x258>)
 80010b8:	f001 fc80 	bl	80029bc <HAL_GPIO_WritePin>
		  prev_dir_x = 1;
 80010bc:	4b74      	ldr	r3, [pc, #464]	@ (8001290 <setting_robot+0x25c>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	e01e      	b.n	8001102 <setting_robot+0xce>
	  }else if(current_X < 0) //spin counterclockwise if current value < previous value
 80010c4:	4b6e      	ldr	r3, [pc, #440]	@ (8001280 <setting_robot+0x24c>)
 80010c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	f7ff fc73 	bl	80009bc <__aeabi_dcmplt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <setting_robot+0xbc>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e2:	486a      	ldr	r0, [pc, #424]	@ (800128c <setting_robot+0x258>)
 80010e4:	f001 fc6a 	bl	80029bc <HAL_GPIO_WritePin>
		  prev_dir_x = 0;
 80010e8:	4b69      	ldr	r3, [pc, #420]	@ (8001290 <setting_robot+0x25c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e008      	b.n	8001102 <setting_robot+0xce>
	  }else{ //spin with previous direction if current value if current value = previous value
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, prev_dir_x);
 80010f0:	4b67      	ldr	r3, [pc, #412]	@ (8001290 <setting_robot+0x25c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010fc:	4863      	ldr	r0, [pc, #396]	@ (800128c <setting_robot+0x258>)
 80010fe:	f001 fc5d 	bl	80029bc <HAL_GPIO_WritePin>
	  }

	  if(current_Y > 0) //spin clockwise if current value > previous value
 8001102:	4b61      	ldr	r3, [pc, #388]	@ (8001288 <setting_robot+0x254>)
 8001104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	f7ff fc72 	bl	80009f8 <__aeabi_dcmpgt>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <setting_robot+0xf8>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2104      	movs	r1, #4
 800111e:	485d      	ldr	r0, [pc, #372]	@ (8001294 <setting_robot+0x260>)
 8001120:	f001 fc4c 	bl	80029bc <HAL_GPIO_WritePin>
		  prev_dir_y = 1;
 8001124:	4b5c      	ldr	r3, [pc, #368]	@ (8001298 <setting_robot+0x264>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e01c      	b.n	8001166 <setting_robot+0x132>
	  }else if(current_Y < 0) //spin counterclockwise if current value < previous value
 800112c:	4b56      	ldr	r3, [pc, #344]	@ (8001288 <setting_robot+0x254>)
 800112e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	f7ff fc3f 	bl	80009bc <__aeabi_dcmplt>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <setting_robot+0x122>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2104      	movs	r1, #4
 8001148:	4852      	ldr	r0, [pc, #328]	@ (8001294 <setting_robot+0x260>)
 800114a:	f001 fc37 	bl	80029bc <HAL_GPIO_WritePin>
		  prev_dir_y = 0;
 800114e:	4b52      	ldr	r3, [pc, #328]	@ (8001298 <setting_robot+0x264>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <setting_robot+0x132>
	  }else{ //spin with previous direction if current value if current value = previous value
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, prev_dir_y);
 8001156:	4b50      	ldr	r3, [pc, #320]	@ (8001298 <setting_robot+0x264>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	2104      	movs	r1, #4
 8001160:	484c      	ldr	r0, [pc, #304]	@ (8001294 <setting_robot+0x260>)
 8001162:	f001 fc2b 	bl	80029bc <HAL_GPIO_WritePin>
	  }

	  //get abs of current x value and current y value
	  current_X = fabs(current_X);
 8001166:	4b46      	ldr	r3, [pc, #280]	@ (8001280 <setting_robot+0x24c>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	4690      	mov	r8, r2
 800116e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001172:	4b43      	ldr	r3, [pc, #268]	@ (8001280 <setting_robot+0x24c>)
 8001174:	e9c3 8900 	strd	r8, r9, [r3]
	  current_Y = fabs(current_Y);
 8001178:	4b43      	ldr	r3, [pc, #268]	@ (8001288 <setting_robot+0x254>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	4614      	mov	r4, r2
 8001180:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001184:	4b40      	ldr	r3, [pc, #256]	@ (8001288 <setting_robot+0x254>)
 8001186:	e9c3 4500 	strd	r4, r5, [r3]
	     Mode 3: don't move if currentX = currentY = 0
	     Mode 4 and Mode 5: if current value of any axis is 0, run the remaining axis.

	     The status is trasmitted by uart for user with 9600 bound rate
	  */
	  if(current_X > current_Y && current_X != 0 && current_Y != 0)
 800118a:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <setting_robot+0x24c>)
 800118c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001190:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <setting_robot+0x254>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fc2f 	bl	80009f8 <__aeabi_dcmpgt>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8087 	beq.w	80012b0 <setting_robot+0x27c>
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <setting_robot+0x24c>)
 80011a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	f7ff fbfa 	bl	80009a8 <__aeabi_dcmpeq>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d17a      	bne.n	80012b0 <setting_robot+0x27c>
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <setting_robot+0x254>)
 80011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	f7ff fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d16e      	bne.n	80012b0 <setting_robot+0x27c>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d\n", 0);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	2200      	movs	r2, #0
 80011d8:	4930      	ldr	r1, [pc, #192]	@ (800129c <setting_robot+0x268>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 ff78 	bl	80060d0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7fe ffb3 	bl	8000150 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f107 0110 	add.w	r1, r7, #16
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	482a      	ldr	r0, [pc, #168]	@ (80012a0 <setting_robot+0x26c>)
 80011f8:	f003 fa21 	bl	800463e <HAL_UART_Transmit>
		  __HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <setting_robot+0x23c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001204:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <setting_robot+0x23c>)
 8001208:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800120c:	60da      	str	r2, [r3, #12]
		  ratio = (double) current_X / current_Y;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <setting_robot+0x24c>)
 8001210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <setting_robot+0x254>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff fa87 	bl	800072c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4920      	ldr	r1, [pc, #128]	@ (80012a4 <setting_robot+0x270>)
 8001224:	e9c1 2300 	strd	r2, r3, [r1]
		  arr_Y = ratio * MAX_ARR;
 8001228:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <setting_robot+0x270>)
 800122a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <setting_robot+0x274>)
 8001234:	f7ff f950 	bl	80004d8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc22 	bl	8000a88 <__aeabi_d2uiz>
 8001244:	4603      	mov	r3, r0
 8001246:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <setting_robot+0x278>)
 8001248:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, arr_Y);
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <setting_robot+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <setting_robot+0x278>)
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <setting_robot+0x278>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <setting_robot+0x240>)
 800125a:	60d3      	str	r3, [r2, #12]
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800125c:	2100      	movs	r1, #0
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <setting_robot+0x23c>)
 8001260:	f002 f9ec 	bl	800363c <HAL_TIM_PWM_Start_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001264:	2100      	movs	r1, #0
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <setting_robot+0x240>)
 8001268:	f002 f9e8 	bl	800363c <HAL_TIM_PWM_Start_IT>
	  {
 800126c:	e1a1      	b.n	80015b2 <setting_robot+0x57e>
 800126e:	bf00      	nop
 8001270:	20000284 	.word	0x20000284
 8001274:	200002cc 	.word	0x200002cc
 8001278:	200009f4 	.word	0x200009f4
 800127c:	200009b0 	.word	0x200009b0
 8001280:	200009a0 	.word	0x200009a0
 8001284:	200009b8 	.word	0x200009b8
 8001288:	200009a8 	.word	0x200009a8
 800128c:	40010c00 	.word	0x40010c00
 8001290:	200009e4 	.word	0x200009e4
 8001294:	40010800 	.word	0x40010800
 8001298:	200009e8 	.word	0x200009e8
 800129c:	0800a260 	.word	0x0800a260
 80012a0:	20000314 	.word	0x20000314
 80012a4:	20000a08 	.word	0x20000a08
 80012a8:	40890000 	.word	0x40890000
 80012ac:	200009cc 	.word	0x200009cc
	  }else if(current_X < current_Y && current_X != 0 && current_Y != 0)
 80012b0:	4b94      	ldr	r3, [pc, #592]	@ (8001504 <setting_robot+0x4d0>)
 80012b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b6:	4b94      	ldr	r3, [pc, #592]	@ (8001508 <setting_robot+0x4d4>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fb7e 	bl	80009bc <__aeabi_dcmplt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d065      	beq.n	8001392 <setting_robot+0x35e>
 80012c6:	4b8f      	ldr	r3, [pc, #572]	@ (8001504 <setting_robot+0x4d0>)
 80012c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	f7ff fb68 	bl	80009a8 <__aeabi_dcmpeq>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d159      	bne.n	8001392 <setting_robot+0x35e>
 80012de:	4b8a      	ldr	r3, [pc, #552]	@ (8001508 <setting_robot+0x4d4>)
 80012e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	f7ff fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d14d      	bne.n	8001392 <setting_robot+0x35e>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d\n", 1);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2201      	movs	r2, #1
 80012fc:	4983      	ldr	r1, [pc, #524]	@ (800150c <setting_robot+0x4d8>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fee6 	bl	80060d0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff21 	bl	8000150 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f107 0110 	add.w	r1, r7, #16
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	487d      	ldr	r0, [pc, #500]	@ (8001510 <setting_robot+0x4dc>)
 800131c:	f003 f98f 	bl	800463e <HAL_UART_Transmit>
		  __HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 8001320:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <setting_robot+0x4e0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
 800132a:	4b7a      	ldr	r3, [pc, #488]	@ (8001514 <setting_robot+0x4e0>)
 800132c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001330:	60da      	str	r2, [r3, #12]
		  ratio = (double) current_Y / current_X;
 8001332:	4b75      	ldr	r3, [pc, #468]	@ (8001508 <setting_robot+0x4d4>)
 8001334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001338:	4b72      	ldr	r3, [pc, #456]	@ (8001504 <setting_robot+0x4d0>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f9f5 	bl	800072c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4974      	ldr	r1, [pc, #464]	@ (8001518 <setting_robot+0x4e4>)
 8001348:	e9c1 2300 	strd	r2, r3, [r1]
		  arr_X = ratio * MAX_ARR;
 800134c:	4b72      	ldr	r3, [pc, #456]	@ (8001518 <setting_robot+0x4e4>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b71      	ldr	r3, [pc, #452]	@ (800151c <setting_robot+0x4e8>)
 8001358:	f7ff f8be 	bl	80004d8 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fb90 	bl	8000a88 <__aeabi_d2uiz>
 8001368:	4603      	mov	r3, r0
 800136a:	4a6d      	ldr	r2, [pc, #436]	@ (8001520 <setting_robot+0x4ec>)
 800136c:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim1, arr_X);
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <setting_robot+0x4f0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6b      	ldr	r2, [pc, #428]	@ (8001520 <setting_robot+0x4ec>)
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001378:	4b69      	ldr	r3, [pc, #420]	@ (8001520 <setting_robot+0x4ec>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a69      	ldr	r2, [pc, #420]	@ (8001524 <setting_robot+0x4f0>)
 800137e:	60d3      	str	r3, [r2, #12]
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001380:	2100      	movs	r1, #0
 8001382:	4868      	ldr	r0, [pc, #416]	@ (8001524 <setting_robot+0x4f0>)
 8001384:	f002 f95a 	bl	800363c <HAL_TIM_PWM_Start_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001388:	2100      	movs	r1, #0
 800138a:	4862      	ldr	r0, [pc, #392]	@ (8001514 <setting_robot+0x4e0>)
 800138c:	f002 f956 	bl	800363c <HAL_TIM_PWM_Start_IT>
	  {
 8001390:	e10f      	b.n	80015b2 <setting_robot+0x57e>
	  }else if(current_X == current_Y)
 8001392:	4b5c      	ldr	r3, [pc, #368]	@ (8001504 <setting_robot+0x4d0>)
 8001394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001398:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <setting_robot+0x4d4>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fb03 	bl	80009a8 <__aeabi_dcmpeq>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d02f      	beq.n	8001408 <setting_robot+0x3d4>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d\n", 2);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2202      	movs	r2, #2
 80013ae:	4957      	ldr	r1, [pc, #348]	@ (800150c <setting_robot+0x4d8>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fe8d 	bl	80060d0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe fec8 	bl	8000150 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f107 0110 	add.w	r1, r7, #16
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	4850      	ldr	r0, [pc, #320]	@ (8001510 <setting_robot+0x4dc>)
 80013ce:	f003 f936 	bl	800463e <HAL_UART_Transmit>
		  __HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 80013d2:	4b54      	ldr	r3, [pc, #336]	@ (8001524 <setting_robot+0x4f0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013dc:	4b51      	ldr	r3, [pc, #324]	@ (8001524 <setting_robot+0x4f0>)
 80013de:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80013e2:	60da      	str	r2, [r3, #12]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 80013e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001514 <setting_robot+0x4e0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80013ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <setting_robot+0x4e0>)
 80013f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80013f4:	60da      	str	r2, [r3, #12]
	      HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80013f6:	2100      	movs	r1, #0
 80013f8:	484a      	ldr	r0, [pc, #296]	@ (8001524 <setting_robot+0x4f0>)
 80013fa:	f002 f91f 	bl	800363c <HAL_TIM_PWM_Start_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80013fe:	2100      	movs	r1, #0
 8001400:	4844      	ldr	r0, [pc, #272]	@ (8001514 <setting_robot+0x4e0>)
 8001402:	f002 f91b 	bl	800363c <HAL_TIM_PWM_Start_IT>
 8001406:	e0d4      	b.n	80015b2 <setting_robot+0x57e>
	  }else if(!current_X && !current_Y)
 8001408:	4b3e      	ldr	r3, [pc, #248]	@ (8001504 <setting_robot+0x4d0>)
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	f7ff fac7 	bl	80009a8 <__aeabi_dcmpeq>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d02f      	beq.n	8001480 <setting_robot+0x44c>
 8001420:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <setting_robot+0x4d4>)
 8001422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	f7ff fabb 	bl	80009a8 <__aeabi_dcmpeq>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <setting_robot+0x44c>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d\n", 3);
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	2203      	movs	r2, #3
 800143e:	4933      	ldr	r1, [pc, #204]	@ (800150c <setting_robot+0x4d8>)
 8001440:	4618      	mov	r0, r3
 8001442:	f004 fe45 	bl	80060d0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe fe80 	bl	8000150 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	f107 0110 	add.w	r1, r7, #16
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	482c      	ldr	r0, [pc, #176]	@ (8001510 <setting_robot+0x4dc>)
 800145e:	f003 f8ee 	bl	800463e <HAL_UART_Transmit>
		  gotoX = 1;
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <setting_robot+0x4f4>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
		  gotoY = 1;
 8001468:	4b30      	ldr	r3, [pc, #192]	@ (800152c <setting_robot+0x4f8>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800146e:	2100      	movs	r1, #0
 8001470:	482c      	ldr	r0, [pc, #176]	@ (8001524 <setting_robot+0x4f0>)
 8001472:	f002 f9d3 	bl	800381c <HAL_TIM_PWM_Stop_IT>
		  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001476:	2100      	movs	r1, #0
 8001478:	4826      	ldr	r0, [pc, #152]	@ (8001514 <setting_robot+0x4e0>)
 800147a:	f002 f9cf 	bl	800381c <HAL_TIM_PWM_Stop_IT>
	  {
 800147e:	e098      	b.n	80015b2 <setting_robot+0x57e>
	  }else if(current_X == 0 && current_Y !=0)
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <setting_robot+0x4d0>)
 8001482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	f7ff fa8b 	bl	80009a8 <__aeabi_dcmpeq>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d04b      	beq.n	8001530 <setting_robot+0x4fc>
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <setting_robot+0x4d4>)
 800149a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f7ff fa7f 	bl	80009a8 <__aeabi_dcmpeq>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d13f      	bne.n	8001530 <setting_robot+0x4fc>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d\n", 4);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2204      	movs	r2, #4
 80014b6:	4915      	ldr	r1, [pc, #84]	@ (800150c <setting_robot+0x4d8>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fe09 	bl	80060d0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe fe44 	bl	8000150 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 0110 	add.w	r1, r7, #16
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	480e      	ldr	r0, [pc, #56]	@ (8001510 <setting_robot+0x4dc>)
 80014d6:	f003 f8b2 	bl	800463e <HAL_UART_Transmit>
		  gotoX = 1;
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <setting_robot+0x4f4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <setting_robot+0x4e0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80014e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <setting_robot+0x4e0>)
 80014ec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80014f0:	60da      	str	r2, [r3, #12]
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80014f2:	2100      	movs	r1, #0
 80014f4:	480b      	ldr	r0, [pc, #44]	@ (8001524 <setting_robot+0x4f0>)
 80014f6:	f002 f991 	bl	800381c <HAL_TIM_PWM_Stop_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80014fa:	2100      	movs	r1, #0
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <setting_robot+0x4e0>)
 80014fe:	f002 f89d 	bl	800363c <HAL_TIM_PWM_Start_IT>
	  {
 8001502:	e056      	b.n	80015b2 <setting_robot+0x57e>
 8001504:	200009a0 	.word	0x200009a0
 8001508:	200009a8 	.word	0x200009a8
 800150c:	0800a260 	.word	0x0800a260
 8001510:	20000314 	.word	0x20000314
 8001514:	200002cc 	.word	0x200002cc
 8001518:	20000a08 	.word	0x20000a08
 800151c:	40890000 	.word	0x40890000
 8001520:	200009c8 	.word	0x200009c8
 8001524:	20000284 	.word	0x20000284
 8001528:	200009d0 	.word	0x200009d0
 800152c:	200009d4 	.word	0x200009d4
	  }else if(current_X != 0 && current_Y == 0)
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <setting_robot+0x5ac>)
 8001532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f7ff fa33 	bl	80009a8 <__aeabi_dcmpeq>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d134      	bne.n	80015b2 <setting_robot+0x57e>
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <setting_robot+0x5b0>)
 800154a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f7ff fa27 	bl	80009a8 <__aeabi_dcmpeq>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d028      	beq.n	80015b2 <setting_robot+0x57e>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d\n", 5);
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2205      	movs	r2, #5
 8001566:	4920      	ldr	r1, [pc, #128]	@ (80015e8 <setting_robot+0x5b4>)
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fdb1 	bl	80060d0 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe fdec 	bl	8000150 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	f107 0110 	add.w	r1, r7, #16
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	4819      	ldr	r0, [pc, #100]	@ (80015ec <setting_robot+0x5b8>)
 8001586:	f003 f85a 	bl	800463e <HAL_UART_Transmit>
		  gotoY = 1;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <setting_robot+0x5bc>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <setting_robot+0x5c0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001598:	62da      	str	r2, [r3, #44]	@ 0x2c
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <setting_robot+0x5c0>)
 800159c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80015a0:	60da      	str	r2, [r3, #12]
		  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80015a2:	2100      	movs	r1, #0
 80015a4:	4814      	ldr	r0, [pc, #80]	@ (80015f8 <setting_robot+0x5c4>)
 80015a6:	f002 f939 	bl	800381c <HAL_TIM_PWM_Stop_IT>
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80015aa:	2100      	movs	r1, #0
 80015ac:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <setting_robot+0x5c0>)
 80015ae:	f002 f845 	bl	800363c <HAL_TIM_PWM_Start_IT>
	  }
	  prev_X = posX[index];
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	4413      	add	r3, r2
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	490f      	ldr	r1, [pc, #60]	@ (80015fc <setting_robot+0x5c8>)
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
	  prev_Y = posY[index];
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	490b      	ldr	r1, [pc, #44]	@ (8001600 <setting_robot+0x5cc>)
 80015d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	@ 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015e0:	200009a0 	.word	0x200009a0
 80015e4:	200009a8 	.word	0x200009a8
 80015e8:	0800a260 	.word	0x0800a260
 80015ec:	20000314 	.word	0x20000314
 80015f0:	200009d4 	.word	0x200009d4
 80015f4:	20000284 	.word	0x20000284
 80015f8:	200002cc 	.word	0x200002cc
 80015fc:	200009b0 	.word	0x200009b0
 8001600:	200009b8 	.word	0x200009b8

08001604 <homing>:

/* Using hart-limit to set homing. run two axes until the hard-limit is triggered */
void homing()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <homing+0x54>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <homing+0x54>)
 8001614:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001618:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <homing+0x58>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <homing+0x58>)
 8001626:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800162a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2104      	movs	r1, #4
 8001630:	480b      	ldr	r0, [pc, #44]	@ (8001660 <homing+0x5c>)
 8001632:	f001 f9c3 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <homing+0x60>)
 800163e:	f001 f9bd 	bl	80029bc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001642:	2100      	movs	r1, #0
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <homing+0x54>)
 8001646:	f001 fef3 	bl	8003430 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800164a:	2100      	movs	r1, #0
 800164c:	4803      	ldr	r0, [pc, #12]	@ (800165c <homing+0x58>)
 800164e:	f001 feef 	bl	8003430 <HAL_TIM_PWM_Start>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000284 	.word	0x20000284
 800165c:	200002cc 	.word	0x200002cc
 8001660:	40010800 	.word	0x40010800
 8001664:	40010c00 	.word	0x40010c00

08001668 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b092      	sub	sp, #72	@ 0x48
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == TIM1 && ishomingX == 0)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a9d      	ldr	r2, [pc, #628]	@ (80018ec <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d150      	bne.n	800171c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 800167a:	4b9d      	ldr	r3, [pc, #628]	@ (80018f0 <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d14c      	bne.n	800171c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
	  {
		  countX++;
 8001682:	4b9c      	ldr	r3, [pc, #624]	@ (80018f4 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a9a      	ldr	r2, [pc, #616]	@ (80018f4 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 800168a:	6013      	str	r3, [r2, #0]
		  if(countX > (current_X * 10 * 200) - 1)
 800168c:	4b99      	ldr	r3, [pc, #612]	@ (80018f4 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fea7 	bl	80003e4 <__aeabi_ui2d>
 8001696:	4604      	mov	r4, r0
 8001698:	460d      	mov	r5, r1
 800169a:	4b97      	ldr	r3, [pc, #604]	@ (80018f8 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 800169c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b95      	ldr	r3, [pc, #596]	@ (80018fc <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 80016a6:	f7fe ff17 	bl	80004d8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b92      	ldr	r3, [pc, #584]	@ (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0x298>)
 80016b8:	f7fe ff0e 	bl	80004d8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001904 <HAL_TIM_PWM_PulseFinishedCallback+0x29c>)
 80016ca:	f7fe fd4d 	bl	8000168 <__aeabi_dsub>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7ff f98f 	bl	80009f8 <__aeabi_dcmpgt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01d      	beq.n	800171c <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  {
			  char msg[64];
			  sprintf(msg, "countX %ld, dir_x %ld\n", countX, prev_dir_x);
 80016e0:	4b84      	ldr	r3, [pc, #528]	@ (80018f4 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_TIM_PWM_PulseFinishedCallback+0x2a0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f107 0008 	add.w	r0, r7, #8
 80016ec:	4987      	ldr	r1, [pc, #540]	@ (800190c <HAL_TIM_PWM_PulseFinishedCallback+0x2a4>)
 80016ee:	f004 fcef 	bl	80060d0 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd2a 	bl	8000150 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f107 0108 	add.w	r1, r7, #8
 8001704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001708:	4881      	ldr	r0, [pc, #516]	@ (8001910 <HAL_TIM_PWM_PulseFinishedCallback+0x2a8>)
 800170a:	f002 ff98 	bl	800463e <HAL_UART_Transmit>
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800170e:	2100      	movs	r1, #0
 8001710:	4880      	ldr	r0, [pc, #512]	@ (8001914 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 8001712:	f002 f883 	bl	800381c <HAL_TIM_PWM_Stop_IT>
			  gotoX = 1;
 8001716:	4b80      	ldr	r3, [pc, #512]	@ (8001918 <HAL_TIM_PWM_PulseFinishedCallback+0x2b0>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(htim->Instance == TIM2 && ishomingY == 0)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001724:	d150      	bne.n	80017c8 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
 8001726:	4b7d      	ldr	r3, [pc, #500]	@ (800191c <HAL_TIM_PWM_PulseFinishedCallback+0x2b4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d14c      	bne.n	80017c8 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
	  {
		  countY++;
 800172e:	4b7c      	ldr	r3, [pc, #496]	@ (8001920 <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a7a      	ldr	r2, [pc, #488]	@ (8001920 <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 8001736:	6013      	str	r3, [r2, #0]
		  if(countY > (current_Y * 10 * 200) - 1)
 8001738:	4b79      	ldr	r3, [pc, #484]	@ (8001920 <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fe51 	bl	80003e4 <__aeabi_ui2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	4b77      	ldr	r3, [pc, #476]	@ (8001924 <HAL_TIM_PWM_PulseFinishedCallback+0x2bc>)
 8001748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b6a      	ldr	r3, [pc, #424]	@ (80018fc <HAL_TIM_PWM_PulseFinishedCallback+0x294>)
 8001752:	f7fe fec1 	bl	80004d8 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b67      	ldr	r3, [pc, #412]	@ (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0x298>)
 8001764:	f7fe feb8 	bl	80004d8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b63      	ldr	r3, [pc, #396]	@ (8001904 <HAL_TIM_PWM_PulseFinishedCallback+0x29c>)
 8001776:	f7fe fcf7 	bl	8000168 <__aeabi_dsub>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7ff f939 	bl	80009f8 <__aeabi_dcmpgt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01d      	beq.n	80017c8 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
		  {
			  char msg[64];
			  sprintf(msg, "countY %ld, dir_y %ld\n", countY, prev_dir_y);
 800178c:	4b64      	ldr	r3, [pc, #400]	@ (8001920 <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <HAL_TIM_PWM_PulseFinishedCallback+0x2c0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f107 0008 	add.w	r0, r7, #8
 8001798:	4964      	ldr	r1, [pc, #400]	@ (800192c <HAL_TIM_PWM_PulseFinishedCallback+0x2c4>)
 800179a:	f004 fc99 	bl	80060d0 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fcd4 	bl	8000150 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f107 0108 	add.w	r1, r7, #8
 80017b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b4:	4856      	ldr	r0, [pc, #344]	@ (8001910 <HAL_TIM_PWM_PulseFinishedCallback+0x2a8>)
 80017b6:	f002 ff42 	bl	800463e <HAL_UART_Transmit>
			  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80017ba:	2100      	movs	r1, #0
 80017bc:	485c      	ldr	r0, [pc, #368]	@ (8001930 <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 80017be:	f002 f82d 	bl	800381c <HAL_TIM_PWM_Stop_IT>
			  gotoY = 1;
 80017c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001934 <HAL_TIM_PWM_PulseFinishedCallback+0x2cc>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(gotoX == 1 && gotoY == 1 && ishomingX == 0 && ishomingY == 0)
 80017c8:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <HAL_TIM_PWM_PulseFinishedCallback+0x2b0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d14e      	bne.n	800186e <HAL_TIM_PWM_PulseFinishedCallback+0x206>
 80017d0:	4b58      	ldr	r3, [pc, #352]	@ (8001934 <HAL_TIM_PWM_PulseFinishedCallback+0x2cc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d14a      	bne.n	800186e <HAL_TIM_PWM_PulseFinishedCallback+0x206>
 80017d8:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d146      	bne.n	800186e <HAL_TIM_PWM_PulseFinishedCallback+0x206>
 80017e0:	4b4e      	ldr	r3, [pc, #312]	@ (800191c <HAL_TIM_PWM_PulseFinishedCallback+0x2b4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d142      	bne.n	800186e <HAL_TIM_PWM_PulseFinishedCallback+0x206>
	  {
		  i++;
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a52      	ldr	r2, [pc, #328]	@ (8001938 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 80017f0:	6013      	str	r3, [r2, #0]
		  gotoX = 0;
 80017f2:	4b49      	ldr	r3, [pc, #292]	@ (8001918 <HAL_TIM_PWM_PulseFinishedCallback+0x2b0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
		  gotoY = 0;
 80017f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <HAL_TIM_PWM_PulseFinishedCallback+0x2cc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		  countX = 0;
 80017fe:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
		  countY = 0;
 8001804:	4b46      	ldr	r3, [pc, #280]	@ (8001920 <HAL_TIM_PWM_PulseFinishedCallback+0x2b8>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
		  if(star == 1)
 800180a:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_TIM_PWM_PulseFinishedCallback+0x2d4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d113      	bne.n	800183a <HAL_TIM_PWM_PulseFinishedCallback+0x1d2>
		  {
			  point = 9;
 8001812:	4b4b      	ldr	r3, [pc, #300]	@ (8001940 <HAL_TIM_PWM_PulseFinishedCallback+0x2d8>)
 8001814:	2209      	movs	r2, #9
 8001816:	601a      	str	r2, [r3, #0]
			  if(i < point)
 8001818:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b48      	ldr	r3, [pc, #288]	@ (8001940 <HAL_TIM_PWM_PulseFinishedCallback+0x2d8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <HAL_TIM_PWM_PulseFinishedCallback+0x1cc>
			  {
				  setting_robot(i,posX,posY);
 8001824:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a46      	ldr	r2, [pc, #280]	@ (8001944 <HAL_TIM_PWM_PulseFinishedCallback+0x2dc>)
 800182a:	4947      	ldr	r1, [pc, #284]	@ (8001948 <HAL_TIM_PWM_PulseFinishedCallback+0x2e0>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc01 	bl	8001034 <setting_robot>
 8001832:	e002      	b.n	800183a <HAL_TIM_PWM_PulseFinishedCallback+0x1d2>
			  }else{
				  idle = 0;
 8001834:	4b45      	ldr	r3, [pc, #276]	@ (800194c <HAL_TIM_PWM_PulseFinishedCallback+0x2e4>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
			  }

		  }

		  if(draw_manual == 1)
 800183a:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <HAL_TIM_PWM_PulseFinishedCallback+0x2e8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d115      	bne.n	800186e <HAL_TIM_PWM_PulseFinishedCallback+0x206>
		  {
			  point = received_point;
 8001842:	4b44      	ldr	r3, [pc, #272]	@ (8001954 <HAL_TIM_PWM_PulseFinishedCallback+0x2ec>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <HAL_TIM_PWM_PulseFinishedCallback+0x2d8>)
 800184a:	601a      	str	r2, [r3, #0]
			  if(i < point)
 800184c:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <HAL_TIM_PWM_PulseFinishedCallback+0x2d8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <HAL_TIM_PWM_PulseFinishedCallback+0x200>
			  {
				  setting_robot(i,testX,testY);
 8001858:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <HAL_TIM_PWM_PulseFinishedCallback+0x2d0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3e      	ldr	r2, [pc, #248]	@ (8001958 <HAL_TIM_PWM_PulseFinishedCallback+0x2f0>)
 800185e:	493f      	ldr	r1, [pc, #252]	@ (800195c <HAL_TIM_PWM_PulseFinishedCallback+0x2f4>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fbe7 	bl	8001034 <setting_robot>
 8001866:	e002      	b.n	800186e <HAL_TIM_PWM_PulseFinishedCallback+0x206>
			  }else{
				  idle = 0;
 8001868:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_TIM_PWM_PulseFinishedCallback+0x2e4>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
			  }
		  }
	  }
	  if(htim->Instance == TIM1 && ishomingX == 1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d117      	bne.n	80018a8 <HAL_TIM_PWM_PulseFinishedCallback+0x240>
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d113      	bne.n	80018a8 <HAL_TIM_PWM_PulseFinishedCallback+0x240>
	  {
		  counthomeX++;
 8001880:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <HAL_TIM_PWM_PulseFinishedCallback+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a36      	ldr	r2, [pc, #216]	@ (8001960 <HAL_TIM_PWM_PulseFinishedCallback+0x2f8>)
 8001888:	6013      	str	r3, [r2, #0]
		  if(counthomeX > 800)
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <HAL_TIM_PWM_PulseFinishedCallback+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001892:	d909      	bls.n	80018a8 <HAL_TIM_PWM_PulseFinishedCallback+0x240>
		  {
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	481f      	ldr	r0, [pc, #124]	@ (8001914 <HAL_TIM_PWM_PulseFinishedCallback+0x2ac>)
 8001898:	f001 ffc0 	bl	800381c <HAL_TIM_PWM_Stop_IT>
			  ishomingX = 0;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
			  counthomeX = 0;
 80018a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_TIM_PWM_PulseFinishedCallback+0x2f8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(htim->Instance == TIM2 && ishomingY == 1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b0:	d117      	bne.n	80018e2 <HAL_TIM_PWM_PulseFinishedCallback+0x27a>
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <HAL_TIM_PWM_PulseFinishedCallback+0x2b4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d113      	bne.n	80018e2 <HAL_TIM_PWM_PulseFinishedCallback+0x27a>
	  {
		  counthomeY++;
 80018ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <HAL_TIM_PWM_PulseFinishedCallback+0x2fc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <HAL_TIM_PWM_PulseFinishedCallback+0x2fc>)
 80018c2:	6013      	str	r3, [r2, #0]
		  if(counthomeY > 800)
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_TIM_PWM_PulseFinishedCallback+0x2fc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80018cc:	d909      	bls.n	80018e2 <HAL_TIM_PWM_PulseFinishedCallback+0x27a>
		  {
			  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80018ce:	2100      	movs	r1, #0
 80018d0:	4817      	ldr	r0, [pc, #92]	@ (8001930 <HAL_TIM_PWM_PulseFinishedCallback+0x2c8>)
 80018d2:	f001 ffa3 	bl	800381c <HAL_TIM_PWM_Stop_IT>
			  ishomingY = 0;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_TIM_PWM_PulseFinishedCallback+0x2b4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
			  counthomeY = 0;
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_TIM_PWM_PulseFinishedCallback+0x2fc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 80018e2:	bf00      	nop
 80018e4:	3748      	adds	r7, #72	@ 0x48
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	200009ec 	.word	0x200009ec
 80018f4:	200009d8 	.word	0x200009d8
 80018f8:	200009a0 	.word	0x200009a0
 80018fc:	40240000 	.word	0x40240000
 8001900:	40690000 	.word	0x40690000
 8001904:	3ff00000 	.word	0x3ff00000
 8001908:	200009e4 	.word	0x200009e4
 800190c:	0800a26c 	.word	0x0800a26c
 8001910:	20000314 	.word	0x20000314
 8001914:	20000284 	.word	0x20000284
 8001918:	200009d0 	.word	0x200009d0
 800191c:	200009f0 	.word	0x200009f0
 8001920:	200009dc 	.word	0x200009dc
 8001924:	200009a8 	.word	0x200009a8
 8001928:	200009e8 	.word	0x200009e8
 800192c:	0800a284 	.word	0x0800a284
 8001930:	200002cc 	.word	0x200002cc
 8001934:	200009d4 	.word	0x200009d4
 8001938:	200009e0 	.word	0x200009e0
 800193c:	20000a00 	.word	0x20000a00
 8001940:	200009c0 	.word	0x200009c0
 8001944:	20000048 	.word	0x20000048
 8001948:	20000000 	.word	0x20000000
 800194c:	200009f4 	.word	0x200009f4
 8001950:	200009c4 	.word	0x200009c4
 8001954:	20000a51 	.word	0x20000a51
 8001958:	20000680 	.word	0x20000680
 800195c:	20000360 	.word	0x20000360
 8001960:	200009f8 	.word	0x200009f8
 8001964:	200009fc 	.word	0x200009fc

08001968 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6 && idle == 0)
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	2b40      	cmp	r3, #64	@ 0x40
 8001976:	d105      	bne.n	8001984 <HAL_GPIO_EXTI_Callback+0x1c>
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_GPIO_EXTI_Callback+0x74>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		homing();
 8001980:	f7ff fe40 	bl	8001604 <homing>
	}

	if(GPIO_Pin == GPIO_PIN_7)
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	2b80      	cmp	r3, #128	@ 0x80
 8001988:	d110      	bne.n	80019ac <HAL_GPIO_EXTI_Callback+0x44>
	{
		ishomingX = 1;
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x78>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001990:	2100      	movs	r1, #0
 8001992:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001994:	f001 fdee 	bl	8003574 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199e:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x80>)
 80019a0:	f001 f80c 	bl	80029bc <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80019a4:	2100      	movs	r1, #0
 80019a6:	480f      	ldr	r0, [pc, #60]	@ (80019e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80019a8:	f001 fe48 	bl	800363c <HAL_TIM_PWM_Start_IT>
	}

	if(GPIO_Pin == GPIO_PIN_8)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019b2:	d10f      	bne.n	80019d4 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		ishomingY = 1;
 80019b4:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x84>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80019ba:	2100      	movs	r1, #0
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x88>)
 80019be:	f001 fdd9 	bl	8003574 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2104      	movs	r1, #4
 80019c6:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019c8:	f000 fff8 	bl	80029bc <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80019cc:	2100      	movs	r1, #0
 80019ce:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x88>)
 80019d0:	f001 fe34 	bl	800363c <HAL_TIM_PWM_Start_IT>
	}
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200009f4 	.word	0x200009f4
 80019e0:	200009ec 	.word	0x200009ec
 80019e4:	20000284 	.word	0x20000284
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	200009f0 	.word	0x200009f0
 80019f0:	200002cc 	.word	0x200002cc
 80019f4:	40010800 	.word	0x40010800

080019f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b0b2      	sub	sp, #200	@ 0xc8
 80019fc:	af04      	add	r7, sp, #16
 80019fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b96      	ldr	r3, [pc, #600]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8182 	bne.w	8001d12 <HAL_UART_RxCpltCallback+0x31a>
	{
		if(save_point == 0)
 8001a0e:	4b95      	ldr	r3, [pc, #596]	@ (8001c64 <HAL_UART_RxCpltCallback+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 8098 	bne.w	8001b48 <HAL_UART_RxCpltCallback+0x150>
		{
			if(rx_byte == '1')
 8001a18:	4b93      	ldr	r3, [pc, #588]	@ (8001c68 <HAL_UART_RxCpltCallback+0x270>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b31      	cmp	r3, #49	@ 0x31
 8001a1e:	d11e      	bne.n	8001a5e <HAL_UART_RxCpltCallback+0x66>
			{
	            char msg[] = " Draw Star Mode\r\n";
 8001a20:	4b92      	ldr	r3, [pc, #584]	@ (8001c6c <HAL_UART_RxCpltCallback+0x274>)
 8001a22:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001a26:	461d      	mov	r5, r3
 8001a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	8023      	strh	r3, [r4, #0]
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a30:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fb8b 	bl	8000150 <strlen>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	4886      	ldr	r0, [pc, #536]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001a48:	f002 fdf9 	bl	800463e <HAL_UART_Transmit>
				star = 1;
 8001a4c:	4b88      	ldr	r3, [pc, #544]	@ (8001c70 <HAL_UART_RxCpltCallback+0x278>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
				setting_robot(0,posX,posY);
 8001a52:	4a88      	ldr	r2, [pc, #544]	@ (8001c74 <HAL_UART_RxCpltCallback+0x27c>)
 8001a54:	4988      	ldr	r1, [pc, #544]	@ (8001c78 <HAL_UART_RxCpltCallback+0x280>)
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff faec 	bl	8001034 <setting_robot>
 8001a5c:	e159      	b.n	8001d12 <HAL_UART_RxCpltCallback+0x31a>
			}else if(rx_byte == '2')
 8001a5e:	4b82      	ldr	r3, [pc, #520]	@ (8001c68 <HAL_UART_RxCpltCallback+0x270>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b32      	cmp	r3, #50	@ 0x32
 8001a64:	d11f      	bne.n	8001aa6 <HAL_UART_RxCpltCallback+0xae>
			{
				save_point = 1;
 8001a66:	4b7f      	ldr	r3, [pc, #508]	@ (8001c64 <HAL_UART_RxCpltCallback+0x26c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
				draw_manual = 1;
 8001a6c:	4b83      	ldr	r3, [pc, #524]	@ (8001c7c <HAL_UART_RxCpltCallback+0x284>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
	            char msg[] = " Manual Input Mode\r\n";
 8001a72:	4b83      	ldr	r3, [pc, #524]	@ (8001c80 <HAL_UART_RxCpltCallback+0x288>)
 8001a74:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001a78:	461d      	mov	r5, r3
 8001a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a82:	6020      	str	r0, [r4, #0]
 8001a84:	3404      	adds	r4, #4
 8001a86:	7021      	strb	r1, [r4, #0]
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a88:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fb5f 	bl	8000150 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	4870      	ldr	r0, [pc, #448]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001aa0:	f002 fdcd 	bl	800463e <HAL_UART_Transmit>
 8001aa4:	e135      	b.n	8001d12 <HAL_UART_RxCpltCallback+0x31a>
			}else if(rx_byte == '3')
 8001aa6:	4b70      	ldr	r3, [pc, #448]	@ (8001c68 <HAL_UART_RxCpltCallback+0x270>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b33      	cmp	r3, #51	@ 0x33
 8001aac:	d138      	bne.n	8001b20 <HAL_UART_RxCpltCallback+0x128>
			{
				for (int i = 0; i < received_point; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ab4:	e02c      	b.n	8001b10 <HAL_UART_RxCpltCallback+0x118>
				{
					char msg[64];
					sprintf(msg, " Point %d: X = %.2f, Y = %.2f\r\n", i, testX[i], testY[i]);
 8001ab6:	4a73      	ldr	r2, [pc, #460]	@ (8001c84 <HAL_UART_RxCpltCallback+0x28c>)
 8001ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	4870      	ldr	r0, [pc, #448]	@ (8001c88 <HAL_UART_RxCpltCallback+0x290>)
 8001ac6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001aca:	00c9      	lsls	r1, r1, #3
 8001acc:	4401      	add	r1, r0
 8001ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad2:	f107 040c 	add.w	r4, r7, #12
 8001ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ada:	e9cd 2300 	strd	r2, r3, [sp]
 8001ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ae2:	496a      	ldr	r1, [pc, #424]	@ (8001c8c <HAL_UART_RxCpltCallback+0x294>)
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f004 faf3 	bl	80060d0 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb2e 	bl	8000150 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	f107 010c 	add.w	r1, r7, #12
 8001afc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b00:	4857      	ldr	r0, [pc, #348]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001b02:	f002 fd9c 	bl	800463e <HAL_UART_Transmit>
				for (int i = 0; i < received_point; i++)
 8001b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b10:	4b5f      	ldr	r3, [pc, #380]	@ (8001c90 <HAL_UART_RxCpltCallback+0x298>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	dbcb      	blt.n	8001ab6 <HAL_UART_RxCpltCallback+0xbe>
 8001b1e:	e0f8      	b.n	8001d12 <HAL_UART_RxCpltCallback+0x31a>
				}
			}else if(rx_byte == '4')
 8001b20:	4b51      	ldr	r3, [pc, #324]	@ (8001c68 <HAL_UART_RxCpltCallback+0x270>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b34      	cmp	r3, #52	@ 0x34
 8001b26:	f040 80f4 	bne.w	8001d12 <HAL_UART_RxCpltCallback+0x31a>
			{
				i = 0;
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c94 <HAL_UART_RxCpltCallback+0x29c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
				star = 0;
 8001b30:	4b4f      	ldr	r3, [pc, #316]	@ (8001c70 <HAL_UART_RxCpltCallback+0x278>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
				draw_manual = 1;
 8001b36:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <HAL_UART_RxCpltCallback+0x284>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
				setting_robot(0,testX,testY);
 8001b3c:	4a52      	ldr	r2, [pc, #328]	@ (8001c88 <HAL_UART_RxCpltCallback+0x290>)
 8001b3e:	4951      	ldr	r1, [pc, #324]	@ (8001c84 <HAL_UART_RxCpltCallback+0x28c>)
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fa77 	bl	8001034 <setting_robot>
 8001b46:	e0e4      	b.n	8001d12 <HAL_UART_RxCpltCallback+0x31a>
			}
		}
		else if (save_point == 1)
 8001b48:	4b46      	ldr	r3, [pc, #280]	@ (8001c64 <HAL_UART_RxCpltCallback+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	f040 80e0 	bne.w	8001d12 <HAL_UART_RxCpltCallback+0x31a>
		{
			if(rx_byte == ';')
 8001b52:	4b45      	ldr	r3, [pc, #276]	@ (8001c68 <HAL_UART_RxCpltCallback+0x270>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b58:	f040 80ac 	bne.w	8001cb4 <HAL_UART_RxCpltCallback+0x2bc>
			{
				uart_rx_buffer[rx_index] = '\0';
 8001b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c98 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <HAL_UART_RxCpltCallback+0x2a4>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]
				double x_val, y_val;
				HAL_UART_Transmit(&huart1, (uint8_t*)uart_rx_buffer, strlen(uart_rx_buffer), 1000);
 8001b68:	484c      	ldr	r0, [pc, #304]	@ (8001c9c <HAL_UART_RxCpltCallback+0x2a4>)
 8001b6a:	f7fe faf1 	bl	8000150 <strlen>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b76:	4949      	ldr	r1, [pc, #292]	@ (8001c9c <HAL_UART_RxCpltCallback+0x2a4>)
 8001b78:	4839      	ldr	r0, [pc, #228]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001b7a:	f002 fd60 	bl	800463e <HAL_UART_Transmit>
				if (sscanf(uart_rx_buffer, "x%lf y%lf", &x_val, &y_val) == 2)
 8001b7e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b82:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001b86:	4946      	ldr	r1, [pc, #280]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b88:	4844      	ldr	r0, [pc, #272]	@ (8001c9c <HAL_UART_RxCpltCallback+0x2a4>)
 8001b8a:	f004 fac1 	bl	8006110 <siscanf>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d143      	bne.n	8001c1c <HAL_UART_RxCpltCallback+0x224>
				{
					gotoX = 0;
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
					gotoY = 0;
 8001b9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
					testX[received_point] = x_val;
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <HAL_UART_RxCpltCallback+0x298>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001baa:	4836      	ldr	r0, [pc, #216]	@ (8001c84 <HAL_UART_RxCpltCallback+0x28c>)
 8001bac:	00c9      	lsls	r1, r1, #3
 8001bae:	4401      	add	r1, r0
 8001bb0:	e9c1 2300 	strd	r2, r3, [r1]
					testY[received_point] = y_val;
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <HAL_UART_RxCpltCallback+0x298>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001bbe:	4832      	ldr	r0, [pc, #200]	@ (8001c88 <HAL_UART_RxCpltCallback+0x290>)
 8001bc0:	00c9      	lsls	r1, r1, #3
 8001bc2:	4401      	add	r1, r0
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
					setting_robot(received_point, testX, testY);
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_UART_RxCpltCallback+0x298>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c88 <HAL_UART_RxCpltCallback+0x290>)
 8001bce:	492d      	ldr	r1, [pc, #180]	@ (8001c84 <HAL_UART_RxCpltCallback+0x28c>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa2f 	bl	8001034 <setting_robot>
					received_point++;
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <HAL_UART_RxCpltCallback+0x298>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <HAL_UART_RxCpltCallback+0x298>)
 8001be0:	701a      	strb	r2, [r3, #0]

					char msg[64];
					sprintf(msg, "Saved: X=%.1f, Y=%.1f\r\n", x_val, y_val);
 8001be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001be6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001bea:	f107 040c 	add.w	r4, r7, #12
 8001bee:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	492d      	ldr	r1, [pc, #180]	@ (8001cac <HAL_UART_RxCpltCallback+0x2b4>)
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f004 fa69 	bl	80060d0 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe faa4 	bl	8000150 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f107 010c 	add.w	r1, r7, #12
 8001c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c14:	4812      	ldr	r0, [pc, #72]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001c16:	f002 fd12 	bl	800463e <HAL_UART_Transmit>
 8001c1a:	e018      	b.n	8001c4e <HAL_UART_RxCpltCallback+0x256>
				}
				else {
					char msg[] = "Re-enter X and Y. \r\n";
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001c1e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001c22:	461d      	mov	r5, r3
 8001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c2c:	6020      	str	r0, [r4, #0]
 8001c2e:	3404      	adds	r4, #4
 8001c30:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001c32:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fa8a 	bl	8000150 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001c44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c48:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <HAL_UART_RxCpltCallback+0x268>)
 8001c4a:	f002 fcf8 	bl	800463e <HAL_UART_Transmit>
				}

				memset(uart_rx_buffer, 0, sizeof(uart_rx_buffer));
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	2100      	movs	r1, #0
 8001c52:	4812      	ldr	r0, [pc, #72]	@ (8001c9c <HAL_UART_RxCpltCallback+0x2a4>)
 8001c54:	f004 facb 	bl	80061ee <memset>
				rx_index = 0;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <HAL_UART_RxCpltCallback+0x2a0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e03b      	b.n	8001cd8 <HAL_UART_RxCpltCallback+0x2e0>
 8001c60:	20000314 	.word	0x20000314
 8001c64:	20000a54 	.word	0x20000a54
 8001c68:	20000a58 	.word	0x20000a58
 8001c6c:	0800a2e0 	.word	0x0800a2e0
 8001c70:	20000a00 	.word	0x20000a00
 8001c74:	20000048 	.word	0x20000048
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	200009c4 	.word	0x200009c4
 8001c80:	0800a2f4 	.word	0x0800a2f4
 8001c84:	20000360 	.word	0x20000360
 8001c88:	20000680 	.word	0x20000680
 8001c8c:	0800a29c 	.word	0x0800a29c
 8001c90:	20000a51 	.word	0x20000a51
 8001c94:	200009e0 	.word	0x200009e0
 8001c98:	20000a50 	.word	0x20000a50
 8001c9c:	20000a10 	.word	0x20000a10
 8001ca0:	0800a2bc 	.word	0x0800a2bc
 8001ca4:	200009d0 	.word	0x200009d0
 8001ca8:	200009d4 	.word	0x200009d4
 8001cac:	0800a2c8 	.word	0x0800a2c8
 8001cb0:	0800a30c 	.word	0x0800a30c
			}
			else
			{
				uart_rx_buffer[rx_index++] = rx_byte;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_UART_RxCpltCallback+0x32c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	b2d1      	uxtb	r1, r2
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_UART_RxCpltCallback+0x32c>)
 8001cbe:	7011      	strb	r1, [r2, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <HAL_UART_RxCpltCallback+0x330>)
 8001cc4:	7819      	ldrb	r1, [r3, #0]
 8001cc6:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_UART_RxCpltCallback+0x334>)
 8001cc8:	5499      	strb	r1, [r3, r2]
				if (rx_index >= sizeof(uart_rx_buffer)) {
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <HAL_UART_RxCpltCallback+0x32c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cd0:	d902      	bls.n	8001cd8 <HAL_UART_RxCpltCallback+0x2e0>
					rx_index = 0;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_UART_RxCpltCallback+0x32c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
				}
			}

			if(rx_byte == '!')
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <HAL_UART_RxCpltCallback+0x330>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b21      	cmp	r3, #33	@ 0x21
 8001cde:	d118      	bne.n	8001d12 <HAL_UART_RxCpltCallback+0x31a>
			{
				save_point = 0;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <HAL_UART_RxCpltCallback+0x338>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
	            char msg[] = "Quit Manual Input\r\n";
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_UART_RxCpltCallback+0x33c>)
 8001ce8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001cec:	461d      	mov	r5, r3
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	682b      	ldr	r3, [r5, #0]
 8001cf4:	6023      	str	r3, [r4, #0]
	            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001cf6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa28 	bl	8000150 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	480a      	ldr	r0, [pc, #40]	@ (8001d38 <HAL_UART_RxCpltCallback+0x340>)
 8001d0e:	f002 fc96 	bl	800463e <HAL_UART_Transmit>
			}
		}
	}
	HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001d12:	2201      	movs	r2, #1
 8001d14:	4904      	ldr	r1, [pc, #16]	@ (8001d28 <HAL_UART_RxCpltCallback+0x330>)
 8001d16:	4808      	ldr	r0, [pc, #32]	@ (8001d38 <HAL_UART_RxCpltCallback+0x340>)
 8001d18:	f002 fd1c 	bl	8004754 <HAL_UART_Receive_IT>
}
 8001d1c:	bf00      	nop
 8001d1e:	37b8      	adds	r7, #184	@ 0xb8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	20000a50 	.word	0x20000a50
 8001d28:	20000a58 	.word	0x20000a58
 8001d2c:	20000a10 	.word	0x20000a10
 8001d30:	20000a54 	.word	0x20000a54
 8001d34:	0800a324 	.word	0x0800a324
 8001d38:	20000314 	.word	0x20000314

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <Error_Handler+0x8>

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6193      	str	r3, [r2, #24]
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_MspInit+0x5c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_MspInit+0x60>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_MspInit+0x60>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a26      	ldr	r2, [pc, #152]	@ (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	4a25      	ldr	r2, [pc, #148]	@ (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001dc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dc8:	6193      	str	r3, [r2, #24]
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2018      	movs	r0, #24
 8001ddc:	f000 fb81 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001de0:	2018      	movs	r0, #24
 8001de2:	f000 fb9a 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	2019      	movs	r0, #25
 8001dec:	f000 fb79 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001df0:	2019      	movs	r0, #25
 8001df2:	f000 fb92 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	201a      	movs	r0, #26
 8001dfc:	f000 fb71 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001e00:	201a      	movs	r0, #26
 8001e02:	f000 fb8a 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	201b      	movs	r0, #27
 8001e0c:	f000 fb69 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e10:	201b      	movs	r0, #27
 8001e12:	f000 fb82 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e16:	e018      	b.n	8001e4a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e20:	d113      	bne.n	8001e4a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	201c      	movs	r0, #28
 8001e40:	f000 fb4f 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e44:	201c      	movs	r0, #28
 8001e46:	f000 fb68 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef4 <HAL_TIM_MspPostInit+0x98>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d119      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4814      	ldr	r0, [pc, #80]	@ (8001efc <HAL_TIM_MspPostInit+0xa0>)
 8001eaa:	f000 fc03 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eae:	e01c      	b.n	8001eea <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d117      	bne.n	8001eea <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_TIM_MspPostInit+0x9c>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <HAL_TIM_MspPostInit+0xa0>)
 8001ee6:	f000 fbe5 	bl	80026b4 <HAL_GPIO_Init>
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800

08001f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <HAL_UART_MspInit+0x9c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d139      	bne.n	8001f94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <HAL_UART_MspInit+0xa0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_UART_MspInit+0xa0>)
 8001f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_UART_MspInit+0xa0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_UART_MspInit+0xa0>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <HAL_UART_MspInit+0xa0>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_UART_MspInit+0xa0>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4619      	mov	r1, r3
 8001f64:	480f      	ldr	r0, [pc, #60]	@ (8001fa4 <HAL_UART_MspInit+0xa4>)
 8001f66:	f000 fba5 	bl	80026b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <HAL_UART_MspInit+0xa4>)
 8001f80:	f000 fb98 	bl	80026b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2102      	movs	r1, #2
 8001f88:	2025      	movs	r0, #37	@ 0x25
 8001f8a:	f000 faaa 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f8e:	2025      	movs	r0, #37	@ 0x25
 8001f90:	f000 fac3 	bl	800251a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010800 	.word	0x40010800

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <NMI_Handler+0x4>

08001fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <MemManage_Handler+0x4>

08001fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f980 	bl	80022fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002004:	2040      	movs	r0, #64	@ 0x40
 8002006:	f000 fcf1 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800200a:	2080      	movs	r0, #128	@ 0x80
 800200c:	f000 fcee 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002010:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002014:	f000 fcea 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <TIM1_BRK_IRQHandler+0x10>)
 8002022:	f001 fcad 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000284 	.word	0x20000284

08002030 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <TIM1_UP_IRQHandler+0x10>)
 8002036:	f001 fca3 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000284 	.word	0x20000284

08002044 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM1_TRG_COM_IRQHandler+0x10>)
 800204a:	f001 fc99 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000284 	.word	0x20000284

08002058 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM1_CC_IRQHandler+0x10>)
 800205e:	f001 fc8f 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000284 	.word	0x20000284

0800206c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <TIM2_IRQHandler+0x10>)
 8002072:	f001 fc85 	bl	8003980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002cc 	.word	0x200002cc

08002080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <USART1_IRQHandler+0x10>)
 8002086:	f002 fb8b 	bl	80047a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000314 	.word	0x20000314

08002094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <_kill>:

int _kill(int pid, int sig)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ac:	f004 f8f2 	bl	8006294 <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2216      	movs	r2, #22
 80020b4:	601a      	str	r2, [r3, #0]
  return -1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_exit>:

void _exit (int status)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ca:	f04f 31ff 	mov.w	r1, #4294967295
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffe7 	bl	80020a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <_exit+0x12>

080020d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e00a      	b.n	8002100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ea:	f3af 8000 	nop.w
 80020ee:	4601      	mov	r1, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	60ba      	str	r2, [r7, #8]
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf0      	blt.n	80020ea <_read+0x12>
  }

  return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e009      	b.n	8002138 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf1      	blt.n	8002124 <_write+0x12>
  }
  return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:

int _close(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002170:	605a      	str	r2, [r3, #4]
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <_isatty>:

int _isatty(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f004 f85a 	bl	8006294 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20005000 	.word	0x20005000
 800220c:	00000400 	.word	0x00000400
 8002210:	20000a5c 	.word	0x20000a5c
 8002214:	20000bb0 	.word	0x20000bb0

08002218 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002224:	f7ff fff8 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	@ (8002258 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800222a:	490c      	ldr	r1, [pc, #48]	@ (800225c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800222c:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <LoopFillZerobss+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002240:	4c09      	ldr	r4, [pc, #36]	@ (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224e:	f004 f827 	bl	80062a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002252:	f7fe fcbf 	bl	8000bd4 <main>
  bx lr
 8002256:	4770      	bx	lr
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002260:	0800a7c4 	.word	0x0800a7c4
  ldr r2, =_sbss
 8002264:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002268:	20000bb0 	.word	0x20000bb0

0800226c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_2_IRQHandler>
	...

08002270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <HAL_Init+0x28>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <HAL_Init+0x28>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f923 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002286:	200f      	movs	r0, #15
 8002288:	f000 f808 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff fd5c 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f93b 	bl	8002536 <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f903 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000090 	.word	0x20000090
 80022f4:	20000098 	.word	0x20000098
 80022f8:	20000094 	.word	0x20000094

080022fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_IncTick+0x1c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_IncTick+0x20>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a03      	ldr	r2, [pc, #12]	@ (800231c <HAL_IncTick+0x20>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000098 	.word	0x20000098
 800231c:	20000a60 	.word	0x20000a60

08002320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b02      	ldr	r3, [pc, #8]	@ (8002330 <HAL_GetTick+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000a60 	.word	0x20000a60

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4906      	ldr	r1, [pc, #24]	@ (80023cc <__NVIC_EnableIRQ+0x34>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff90 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff2d 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff42 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff35 	bl	8002398 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d008      	beq.n	8002578 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e020      	b.n	80025ba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020e 	bic.w	r2, r2, #14
 8002586:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d005      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e051      	b.n	800268c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 020e 	bic.w	r2, r2, #14
 80025f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a22      	ldr	r2, [pc, #136]	@ (8002698 <HAL_DMA_Abort_IT+0xd4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d029      	beq.n	8002666 <HAL_DMA_Abort_IT+0xa2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a21      	ldr	r2, [pc, #132]	@ (800269c <HAL_DMA_Abort_IT+0xd8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <HAL_DMA_Abort_IT+0x9e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1f      	ldr	r2, [pc, #124]	@ (80026a0 <HAL_DMA_Abort_IT+0xdc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01a      	beq.n	800265c <HAL_DMA_Abort_IT+0x98>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1e      	ldr	r2, [pc, #120]	@ (80026a4 <HAL_DMA_Abort_IT+0xe0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d012      	beq.n	8002656 <HAL_DMA_Abort_IT+0x92>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <HAL_DMA_Abort_IT+0xe4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00a      	beq.n	8002650 <HAL_DMA_Abort_IT+0x8c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_DMA_Abort_IT+0xe8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d102      	bne.n	800264a <HAL_DMA_Abort_IT+0x86>
 8002644:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002648:	e00e      	b.n	8002668 <HAL_DMA_Abort_IT+0xa4>
 800264a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800264e:	e00b      	b.n	8002668 <HAL_DMA_Abort_IT+0xa4>
 8002650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002654:	e008      	b.n	8002668 <HAL_DMA_Abort_IT+0xa4>
 8002656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800265a:	e005      	b.n	8002668 <HAL_DMA_Abort_IT+0xa4>
 800265c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002660:	e002      	b.n	8002668 <HAL_DMA_Abort_IT+0xa4>
 8002662:	2310      	movs	r3, #16
 8002664:	e000      	b.n	8002668 <HAL_DMA_Abort_IT+0xa4>
 8002666:	2301      	movs	r3, #1
 8002668:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <HAL_DMA_Abort_IT+0xec>)
 800266a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
    } 
  }
  return status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40020008 	.word	0x40020008
 800269c:	4002001c 	.word	0x4002001c
 80026a0:	40020030 	.word	0x40020030
 80026a4:	40020044 	.word	0x40020044
 80026a8:	40020058 	.word	0x40020058
 80026ac:	4002006c 	.word	0x4002006c
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b08b      	sub	sp, #44	@ 0x2c
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c6:	e169      	b.n	800299c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026c8:	2201      	movs	r2, #1
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8158 	bne.w	8002996 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a9a      	ldr	r2, [pc, #616]	@ (8002954 <HAL_GPIO_Init+0x2a0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d05e      	beq.n	80027ae <HAL_GPIO_Init+0xfa>
 80026f0:	4a98      	ldr	r2, [pc, #608]	@ (8002954 <HAL_GPIO_Init+0x2a0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d875      	bhi.n	80027e2 <HAL_GPIO_Init+0x12e>
 80026f6:	4a98      	ldr	r2, [pc, #608]	@ (8002958 <HAL_GPIO_Init+0x2a4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d058      	beq.n	80027ae <HAL_GPIO_Init+0xfa>
 80026fc:	4a96      	ldr	r2, [pc, #600]	@ (8002958 <HAL_GPIO_Init+0x2a4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d86f      	bhi.n	80027e2 <HAL_GPIO_Init+0x12e>
 8002702:	4a96      	ldr	r2, [pc, #600]	@ (800295c <HAL_GPIO_Init+0x2a8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d052      	beq.n	80027ae <HAL_GPIO_Init+0xfa>
 8002708:	4a94      	ldr	r2, [pc, #592]	@ (800295c <HAL_GPIO_Init+0x2a8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d869      	bhi.n	80027e2 <HAL_GPIO_Init+0x12e>
 800270e:	4a94      	ldr	r2, [pc, #592]	@ (8002960 <HAL_GPIO_Init+0x2ac>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d04c      	beq.n	80027ae <HAL_GPIO_Init+0xfa>
 8002714:	4a92      	ldr	r2, [pc, #584]	@ (8002960 <HAL_GPIO_Init+0x2ac>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d863      	bhi.n	80027e2 <HAL_GPIO_Init+0x12e>
 800271a:	4a92      	ldr	r2, [pc, #584]	@ (8002964 <HAL_GPIO_Init+0x2b0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d046      	beq.n	80027ae <HAL_GPIO_Init+0xfa>
 8002720:	4a90      	ldr	r2, [pc, #576]	@ (8002964 <HAL_GPIO_Init+0x2b0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d85d      	bhi.n	80027e2 <HAL_GPIO_Init+0x12e>
 8002726:	2b12      	cmp	r3, #18
 8002728:	d82a      	bhi.n	8002780 <HAL_GPIO_Init+0xcc>
 800272a:	2b12      	cmp	r3, #18
 800272c:	d859      	bhi.n	80027e2 <HAL_GPIO_Init+0x12e>
 800272e:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <HAL_GPIO_Init+0x80>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	080027af 	.word	0x080027af
 8002738:	08002789 	.word	0x08002789
 800273c:	0800279b 	.word	0x0800279b
 8002740:	080027dd 	.word	0x080027dd
 8002744:	080027e3 	.word	0x080027e3
 8002748:	080027e3 	.word	0x080027e3
 800274c:	080027e3 	.word	0x080027e3
 8002750:	080027e3 	.word	0x080027e3
 8002754:	080027e3 	.word	0x080027e3
 8002758:	080027e3 	.word	0x080027e3
 800275c:	080027e3 	.word	0x080027e3
 8002760:	080027e3 	.word	0x080027e3
 8002764:	080027e3 	.word	0x080027e3
 8002768:	080027e3 	.word	0x080027e3
 800276c:	080027e3 	.word	0x080027e3
 8002770:	080027e3 	.word	0x080027e3
 8002774:	080027e3 	.word	0x080027e3
 8002778:	08002791 	.word	0x08002791
 800277c:	080027a5 	.word	0x080027a5
 8002780:	4a79      	ldr	r2, [pc, #484]	@ (8002968 <HAL_GPIO_Init+0x2b4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002786:	e02c      	b.n	80027e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	623b      	str	r3, [r7, #32]
          break;
 800278e:	e029      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	3304      	adds	r3, #4
 8002796:	623b      	str	r3, [r7, #32]
          break;
 8002798:	e024      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	3308      	adds	r3, #8
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e01f      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	330c      	adds	r3, #12
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e01a      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027b6:	2304      	movs	r3, #4
 80027b8:	623b      	str	r3, [r7, #32]
          break;
 80027ba:	e013      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c4:	2308      	movs	r3, #8
 80027c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	611a      	str	r2, [r3, #16]
          break;
 80027ce:	e009      	b.n	80027e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d0:	2308      	movs	r3, #8
 80027d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	615a      	str	r2, [r3, #20]
          break;
 80027da:	e003      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
          break;
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x130>
          break;
 80027e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2bff      	cmp	r3, #255	@ 0xff
 80027e8:	d801      	bhi.n	80027ee <HAL_GPIO_Init+0x13a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	e001      	b.n	80027f2 <HAL_GPIO_Init+0x13e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2bff      	cmp	r3, #255	@ 0xff
 80027f8:	d802      	bhi.n	8002800 <HAL_GPIO_Init+0x14c>
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	e002      	b.n	8002806 <HAL_GPIO_Init+0x152>
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	3b08      	subs	r3, #8
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	210f      	movs	r1, #15
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	401a      	ands	r2, r3
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	431a      	orrs	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80b1 	beq.w	8002996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002834:	4b4d      	ldr	r3, [pc, #308]	@ (800296c <HAL_GPIO_Init+0x2b8>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a4c      	ldr	r2, [pc, #304]	@ (800296c <HAL_GPIO_Init+0x2b8>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <HAL_GPIO_Init+0x2b8>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800284c:	4a48      	ldr	r2, [pc, #288]	@ (8002970 <HAL_GPIO_Init+0x2bc>)
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a40      	ldr	r2, [pc, #256]	@ (8002974 <HAL_GPIO_Init+0x2c0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_GPIO_Init+0x1ec>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3f      	ldr	r2, [pc, #252]	@ (8002978 <HAL_GPIO_Init+0x2c4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00d      	beq.n	800289c <HAL_GPIO_Init+0x1e8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a3e      	ldr	r2, [pc, #248]	@ (800297c <HAL_GPIO_Init+0x2c8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <HAL_GPIO_Init+0x1e4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a3d      	ldr	r2, [pc, #244]	@ (8002980 <HAL_GPIO_Init+0x2cc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_GPIO_Init+0x1e0>
 8002890:	2303      	movs	r3, #3
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002894:	2304      	movs	r3, #4
 8002896:	e004      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 8002898:	2302      	movs	r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_GPIO_Init+0x1ee>
 80028a0:	2300      	movs	r3, #0
 80028a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4093      	lsls	r3, r2
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028b2:	492f      	ldr	r1, [pc, #188]	@ (8002970 <HAL_GPIO_Init+0x2bc>)
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	492c      	ldr	r1, [pc, #176]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028da:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4928      	ldr	r1, [pc, #160]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028f4:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4922      	ldr	r1, [pc, #136]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	43db      	mvns	r3, r3
 800290a:	491e      	ldr	r1, [pc, #120]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 800290c:	4013      	ands	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800291c:	4b19      	ldr	r3, [pc, #100]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4918      	ldr	r1, [pc, #96]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800292a:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	43db      	mvns	r3, r3
 8002932:	4914      	ldr	r1, [pc, #80]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 8002934:	4013      	ands	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d021      	beq.n	8002988 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002944:	4b0f      	ldr	r3, [pc, #60]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	490e      	ldr	r1, [pc, #56]	@ (8002984 <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e021      	b.n	8002996 <HAL_GPIO_Init+0x2e2>
 8002952:	bf00      	nop
 8002954:	10320000 	.word	0x10320000
 8002958:	10310000 	.word	0x10310000
 800295c:	10220000 	.word	0x10220000
 8002960:	10210000 	.word	0x10210000
 8002964:	10120000 	.word	0x10120000
 8002968:	10110000 	.word	0x10110000
 800296c:	40021000 	.word	0x40021000
 8002970:	40010000 	.word	0x40010000
 8002974:	40010800 	.word	0x40010800
 8002978:	40010c00 	.word	0x40010c00
 800297c:	40011000 	.word	0x40011000
 8002980:	40011400 	.word	0x40011400
 8002984:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002988:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <HAL_GPIO_Init+0x304>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	43db      	mvns	r3, r3
 8002990:	4909      	ldr	r1, [pc, #36]	@ (80029b8 <HAL_GPIO_Init+0x304>)
 8002992:	4013      	ands	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	3301      	adds	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f ae8e 	bne.w	80026c8 <HAL_GPIO_Init+0x14>
  }
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	372c      	adds	r7, #44	@ 0x2c
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	40010400 	.word	0x40010400

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029d8:	e003      	b.n	80029e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	611a      	str	r2, [r3, #16]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	@ (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe ffac 	bl	8001968 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e272      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	4b92      	ldr	r3, [pc, #584]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a48:	4b8f      	ldr	r3, [pc, #572]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d112      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5e>
 8002a54:	4b8c      	ldr	r3, [pc, #560]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a60:	d10b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a62:	4b89      	ldr	r3, [pc, #548]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d06c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x12c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d168      	bne.n	8002b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e24c      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x76>
 8002a84:	4b80      	ldr	r3, [pc, #512]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7f      	ldr	r2, [pc, #508]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	e02e      	b.n	8002af0 <HAL_RCC_OscConfig+0xd4>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x98>
 8002a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b78      	ldr	r3, [pc, #480]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a77      	ldr	r2, [pc, #476]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0xd4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xbc>
 8002abe:	4b72      	ldr	r3, [pc, #456]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a71      	ldr	r2, [pc, #452]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b6f      	ldr	r3, [pc, #444]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6e      	ldr	r2, [pc, #440]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xd4>
 8002ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6a      	ldr	r2, [pc, #424]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b68      	ldr	r3, [pc, #416]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a67      	ldr	r2, [pc, #412]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff fc12 	bl	8002320 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff fc0e 	bl	8002320 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	@ 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e200      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	4b5d      	ldr	r3, [pc, #372]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe4>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7ff fbfe 	bl	8002320 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7ff fbfa 	bl	8002320 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e1ec      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x10c>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d063      	beq.n	8002c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b56:	4b4c      	ldr	r3, [pc, #304]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b62:	4b49      	ldr	r3, [pc, #292]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x18c>
 8002b6e:	4b46      	ldr	r3, [pc, #280]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	4b43      	ldr	r3, [pc, #268]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_RCC_OscConfig+0x176>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e1c0      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b3d      	ldr	r3, [pc, #244]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4939      	ldr	r1, [pc, #228]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e03a      	b.n	8002c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb0:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff fbb3 	bl	8002320 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7ff fbaf 	bl	8002320 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e1a1      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4927      	ldr	r1, [pc, #156]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff fb92 	bl	8002320 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7ff fb8e 	bl	8002320 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e180      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d03a      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d019      	beq.n	8002c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7ff fb72 	bl	8002320 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7ff fb6e 	bl	8002320 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e160      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f000 face 	bl	8003200 <RCC_Delay>
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7ff fb58 	bl	8002320 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c72:	e00f      	b.n	8002c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7ff fb54 	bl	8002320 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d908      	bls.n	8002c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e146      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	42420000 	.word	0x42420000
 8002c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	4b92      	ldr	r3, [pc, #584]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e9      	bne.n	8002c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a6 	beq.w	8002dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b88      	ldr	r3, [pc, #544]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4a87      	ldr	r2, [pc, #540]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	61d3      	str	r3, [r2, #28]
 8002cca:	4b85      	ldr	r3, [pc, #532]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b82      	ldr	r3, [pc, #520]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7e      	ldr	r2, [pc, #504]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c8>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fb15 	bl	8002320 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7ff fb11 	bl	8002320 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	@ 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e103      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b75      	ldr	r3, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x312>
 8002d20:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_OscConfig+0x36e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x334>
 8002d36:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a69      	ldr	r2, [pc, #420]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	4b67      	ldr	r3, [pc, #412]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a66      	ldr	r2, [pc, #408]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6213      	str	r3, [r2, #32]
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCC_OscConfig+0x36e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x356>
 8002d58:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a60      	ldr	r2, [pc, #384]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	e00b      	b.n	8002d8a <HAL_RCC_OscConfig+0x36e>
 8002d72:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	4b58      	ldr	r3, [pc, #352]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a57      	ldr	r2, [pc, #348]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7ff fac5 	bl	8002320 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7ff fac1 	bl	8002320 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0b1      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCC_OscConfig+0x37e>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff faaf 	bl	8002320 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7ff faab 	bl	8002320 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e09b      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8087 	beq.w	8002f12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e04:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d061      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d146      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b33      	ldr	r3, [pc, #204]	@ (8002ee8 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7ff fa7f 	bl	8002320 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e26:	f7ff fa7b 	bl	8002320 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e06d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e38:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4c:	d108      	bne.n	8002e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	4921      	ldr	r1, [pc, #132]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a19      	ldr	r1, [r3, #32]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	430b      	orrs	r3, r1
 8002e72:	491b      	ldr	r1, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7ff fa4f 	bl	8002320 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e86:	f7ff fa4b 	bl	8002320 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e03d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x46a>
 8002ea4:	e035      	b.n	8002f12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <HAL_RCC_OscConfig+0x4cc>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff fa38 	bl	8002320 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7ff fa34 	bl	8002320 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e026      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x498>
 8002ed2:	e01e      	b.n	8002f12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e019      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_RCC_OscConfig+0x500>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000

08002f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0d0      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	4b6a      	ldr	r3, [pc, #424]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d910      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b67      	ldr	r3, [pc, #412]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 0207 	bic.w	r2, r3, #7
 8002f4a:	4965      	ldr	r1, [pc, #404]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4a52      	ldr	r2, [pc, #328]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d040      	beq.n	8003040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d115      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	4b41      	ldr	r3, [pc, #260]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e073      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	4b3d      	ldr	r3, [pc, #244]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e06b      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffe:	4b39      	ldr	r3, [pc, #228]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f023 0203 	bic.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4936      	ldr	r1, [pc, #216]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003010:	f7ff f986 	bl	8002320 <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	e00a      	b.n	800302e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003018:	f7ff f982 	bl	8002320 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e053      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 020c 	and.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	429a      	cmp	r2, r3
 800303e:	d1eb      	bne.n	8003018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b27      	ldr	r3, [pc, #156]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d210      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	4922      	ldr	r1, [pc, #136]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800309a:	4b12      	ldr	r3, [pc, #72]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f821 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1cc>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_RCC_ClockConfig+0x1d0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff f8e4 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	0800a344 	.word	0x0800a344
 80030ec:	20000090 	.word	0x20000090
 80030f0:	20000094 	.word	0x20000094

080030f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800310e:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x94>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b04      	cmp	r3, #4
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x30>
 800311e:	2b08      	cmp	r3, #8
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x36>
 8003122:	e027      	b.n	8003174 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_GetSysClockFreq+0x98>)
 8003126:	613b      	str	r3, [r7, #16]
      break;
 8003128:	e027      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0c9b      	lsrs	r3, r3, #18
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003142:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x94>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0c5b      	lsrs	r3, r3, #17
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a0d      	ldr	r2, [pc, #52]	@ (800318c <HAL_RCC_GetSysClockFreq+0x98>)
 8003156:	fb03 f202 	mul.w	r2, r3, r2
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e004      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a0c      	ldr	r2, [pc, #48]	@ (8003198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	613b      	str	r3, [r7, #16]
      break;
 8003172:	e002      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <HAL_RCC_GetSysClockFreq+0x98>)
 8003176:	613b      	str	r3, [r7, #16]
      break;
 8003178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317a:	693b      	ldr	r3, [r7, #16]
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	007a1200 	.word	0x007a1200
 8003190:	0800a35c 	.word	0x0800a35c
 8003194:	0800a36c 	.word	0x0800a36c
 8003198:	003d0900 	.word	0x003d0900

0800319c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b02      	ldr	r3, [pc, #8]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x10>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000090 	.word	0x20000090

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b4:	f7ff fff2 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	0800a354 	.word	0x0800a354

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031dc:	f7ff ffde 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	0adb      	lsrs	r3, r3, #11
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	@ (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	0800a354 	.word	0x0800a354

08003200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003208:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <RCC_Delay+0x34>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <RCC_Delay+0x38>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a5b      	lsrs	r3, r3, #9
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800321c:	bf00      	nop
  }
  while (Delay --);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e5a      	subs	r2, r3, #1
 8003222:	60fa      	str	r2, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f9      	bne.n	800321c <RCC_Delay+0x1c>
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	20000090 	.word	0x20000090
 8003238:	10624dd3 	.word	0x10624dd3

0800323c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e041      	b.n	80032d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fda2 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f000 fe1e 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d001      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e03a      	b.n	800336a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a18      	ldr	r2, [pc, #96]	@ (8003374 <HAL_TIM_Base_Start_IT+0x98>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00e      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x58>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331e:	d009      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x58>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <HAL_TIM_Base_Start_IT+0x9c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x58>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a13      	ldr	r2, [pc, #76]	@ (800337c <HAL_TIM_Base_Start_IT+0xa0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d010      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	e007      	b.n	8003368 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800

08003380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e041      	b.n	8003416 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f839 	bl	800341e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fd7c 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x24>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e022      	b.n	800349a <HAL_TIM_PWM_Start+0x6a>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d109      	bne.n	800346e <HAL_TIM_PWM_Start+0x3e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e015      	b.n	800349a <HAL_TIM_PWM_Start+0x6a>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x58>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e008      	b.n	800349a <HAL_TIM_PWM_Start+0x6a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e05e      	b.n	8003560 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0x82>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b0:	e013      	b.n	80034da <HAL_TIM_PWM_Start+0xaa>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x92>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c0:	e00b      	b.n	80034da <HAL_TIM_PWM_Start+0xaa>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Start+0xa2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d0:	e003      	b.n	80034da <HAL_TIM_PWM_Start+0xaa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 ff76 	bl	80043d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003568 <HAL_TIM_PWM_Start+0x138>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d107      	bne.n	8003502 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <HAL_TIM_PWM_Start+0x138>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_TIM_PWM_Start+0xfa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003514:	d009      	beq.n	800352a <HAL_TIM_PWM_Start+0xfa>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a14      	ldr	r2, [pc, #80]	@ (800356c <HAL_TIM_PWM_Start+0x13c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_TIM_PWM_Start+0xfa>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a12      	ldr	r2, [pc, #72]	@ (8003570 <HAL_TIM_PWM_Start+0x140>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d111      	bne.n	800354e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b06      	cmp	r3, #6
 800353a:	d010      	beq.n	800355e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	e007      	b.n	800355e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800

08003574 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 ff24 	bl	80043d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a29      	ldr	r2, [pc, #164]	@ (8003638 <HAL_TIM_PWM_Stop+0xc4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d117      	bne.n	80035c6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_TIM_PWM_Stop+0x52>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <HAL_TIM_PWM_Stop+0x52>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <HAL_TIM_PWM_Stop+0x82>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a1a      	ldr	r2, [r3, #32]
 80035dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_PWM_Stop+0x82>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Stop+0x92>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	e013      	b.n	800362e <HAL_TIM_PWM_Stop+0xba>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d104      	bne.n	8003616 <HAL_TIM_PWM_Stop+0xa2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003614:	e00b      	b.n	800362e <HAL_TIM_PWM_Stop+0xba>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_TIM_PWM_Stop+0xb2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003624:	e003      	b.n	800362e <HAL_TIM_PWM_Stop+0xba>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40012c00 	.word	0x40012c00

0800363c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_TIM_PWM_Start_IT+0x28>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e022      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x6e>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d109      	bne.n	800367e <HAL_TIM_PWM_Start_IT+0x42>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e015      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x6e>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start_IT+0x5c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e008      	b.n	80036aa <HAL_TIM_PWM_Start_IT+0x6e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0a9      	b.n	8003806 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Start_IT+0x86>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c0:	e013      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0xae>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start_IT+0x96>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0xae>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start_IT+0xa6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e0:	e003      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0xae>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d841      	bhi.n	8003774 <HAL_TIM_PWM_Start_IT+0x138>
 80036f0:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003775 	.word	0x08003775
 8003700:	08003775 	.word	0x08003775
 8003704:	08003775 	.word	0x08003775
 8003708:	0800373f 	.word	0x0800373f
 800370c:	08003775 	.word	0x08003775
 8003710:	08003775 	.word	0x08003775
 8003714:	08003775 	.word	0x08003775
 8003718:	08003751 	.word	0x08003751
 800371c:	08003775 	.word	0x08003775
 8003720:	08003775 	.word	0x08003775
 8003724:	08003775 	.word	0x08003775
 8003728:	08003763 	.word	0x08003763
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0202 	orr.w	r2, r2, #2
 800373a:	60da      	str	r2, [r3, #12]
      break;
 800373c:	e01d      	b.n	800377a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0204 	orr.w	r2, r2, #4
 800374c:	60da      	str	r2, [r3, #12]
      break;
 800374e:	e014      	b.n	800377a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0208 	orr.w	r2, r2, #8
 800375e:	60da      	str	r2, [r3, #12]
      break;
 8003760:	e00b      	b.n	800377a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0210 	orr.w	r2, r2, #16
 8003770:	60da      	str	r2, [r3, #12]
      break;
 8003772:	e002      	b.n	800377a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      break;
 8003778:	bf00      	nop
  }

  if (status == HAL_OK)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d141      	bne.n	8003804 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2201      	movs	r2, #1
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fe23 	bl	80043d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d107      	bne.n	80037a8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a18      	ldr	r2, [pc, #96]	@ (8003810 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_TIM_PWM_Start_IT+0x194>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ba:	d009      	beq.n	80037d0 <HAL_TIM_PWM_Start_IT+0x194>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_TIM_PWM_Start_IT+0x194>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d010      	beq.n	8003804 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f2:	e007      	b.n	8003804 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800

0800381c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d841      	bhi.n	80038b4 <HAL_TIM_PWM_Stop_IT+0x98>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800386d 	.word	0x0800386d
 800383c:	080038b5 	.word	0x080038b5
 8003840:	080038b5 	.word	0x080038b5
 8003844:	080038b5 	.word	0x080038b5
 8003848:	0800387f 	.word	0x0800387f
 800384c:	080038b5 	.word	0x080038b5
 8003850:	080038b5 	.word	0x080038b5
 8003854:	080038b5 	.word	0x080038b5
 8003858:	08003891 	.word	0x08003891
 800385c:	080038b5 	.word	0x080038b5
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038b5 	.word	0x080038b5
 8003868:	080038a3 	.word	0x080038a3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0202 	bic.w	r2, r2, #2
 800387a:	60da      	str	r2, [r3, #12]
      break;
 800387c:	e01d      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0204 	bic.w	r2, r2, #4
 800388c:	60da      	str	r2, [r3, #12]
      break;
 800388e:	e014      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0208 	bic.w	r2, r2, #8
 800389e:	60da      	str	r2, [r3, #12]
      break;
 80038a0:	e00b      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0210 	bic.w	r2, r2, #16
 80038b0:	60da      	str	r2, [r3, #12]
      break;
 80038b2:	e002      	b.n	80038ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd83 	bl	80043d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <HAL_TIM_PWM_Stop_IT+0x160>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d117      	bne.n	8003908 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <HAL_TIM_PWM_Stop_IT+0xec>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_PWM_Stop_IT+0xec>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a1a      	ldr	r2, [r3, #32]
 800390e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10f      	bne.n	8003938 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <HAL_TIM_PWM_Stop_IT+0x12c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003946:	e013      	b.n	8003970 <HAL_TIM_PWM_Stop_IT+0x154>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d104      	bne.n	8003958 <HAL_TIM_PWM_Stop_IT+0x13c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003956:	e00b      	b.n	8003970 <HAL_TIM_PWM_Stop_IT+0x154>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d104      	bne.n	8003968 <HAL_TIM_PWM_Stop_IT+0x14c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003966:	e003      	b.n	8003970 <HAL_TIM_PWM_Stop_IT+0x154>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40012c00 	.word	0x40012c00

08003980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d020      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01b      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0202 	mvn.w	r2, #2
 80039b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa63 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa56 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd fe45 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d020      	beq.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0204 	mvn.w	r2, #4
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fa3d 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa30 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fd fe1f 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d020      	beq.n	8003a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0208 	mvn.w	r2, #8
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa17 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa0a 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fd fdf9 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d020      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0210 	mvn.w	r2, #16
 8003a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9f1 	bl	8003e96 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9e4 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd fdd3 	bl	8001668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0201 	mvn.w	r2, #1
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9c3 	bl	8003e72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00c      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fd3e 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9ba 	bl	8003ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0220 	mvn.w	r2, #32
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fd11 	bl	800457a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0ae      	b.n	8003cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	f200 809f 	bhi.w	8003ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bc9 	.word	0x08003bc9
 8003b98:	08003ccd 	.word	0x08003ccd
 8003b9c:	08003ccd 	.word	0x08003ccd
 8003ba0:	08003ccd 	.word	0x08003ccd
 8003ba4:	08003c09 	.word	0x08003c09
 8003ba8:	08003ccd 	.word	0x08003ccd
 8003bac:	08003ccd 	.word	0x08003ccd
 8003bb0:	08003ccd 	.word	0x08003ccd
 8003bb4:	08003c4b 	.word	0x08003c4b
 8003bb8:	08003ccd 	.word	0x08003ccd
 8003bbc:	08003ccd 	.word	0x08003ccd
 8003bc0:	08003ccd 	.word	0x08003ccd
 8003bc4:	08003c8b 	.word	0x08003c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f9e2 	bl	8003f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0208 	orr.w	r2, r2, #8
 8003be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0204 	bic.w	r2, r2, #4
 8003bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6999      	ldr	r1, [r3, #24]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	619a      	str	r2, [r3, #24]
      break;
 8003c06:	e064      	b.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fa28 	bl	8004064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6999      	ldr	r1, [r3, #24]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	021a      	lsls	r2, r3, #8
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	619a      	str	r2, [r3, #24]
      break;
 8003c48:	e043      	b.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fa71 	bl	8004138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0208 	orr.w	r2, r2, #8
 8003c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0204 	bic.w	r2, r2, #4
 8003c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69d9      	ldr	r1, [r3, #28]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	61da      	str	r2, [r3, #28]
      break;
 8003c88:	e023      	b.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fabb 	bl	800420c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69d9      	ldr	r1, [r3, #28]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	021a      	lsls	r2, r3, #8
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	61da      	str	r2, [r3, #28]
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_ConfigClockSource+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0b4      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x186>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d38:	d03e      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d3e:	f200 8087 	bhi.w	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d46:	f000 8086 	beq.w	8003e56 <HAL_TIM_ConfigClockSource+0x172>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4e:	d87f      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b70      	cmp	r3, #112	@ 0x70
 8003d52:	d01a      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xa6>
 8003d54:	2b70      	cmp	r3, #112	@ 0x70
 8003d56:	d87b      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b60      	cmp	r3, #96	@ 0x60
 8003d5a:	d050      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x11a>
 8003d5c:	2b60      	cmp	r3, #96	@ 0x60
 8003d5e:	d877      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b50      	cmp	r3, #80	@ 0x50
 8003d62:	d03c      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xfa>
 8003d64:	2b50      	cmp	r3, #80	@ 0x50
 8003d66:	d873      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b40      	cmp	r3, #64	@ 0x40
 8003d6a:	d058      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x13a>
 8003d6c:	2b40      	cmp	r3, #64	@ 0x40
 8003d6e:	d86f      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b30      	cmp	r3, #48	@ 0x30
 8003d72:	d064      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d74:	2b30      	cmp	r3, #48	@ 0x30
 8003d76:	d86b      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d060      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d867      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05c      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d05a      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	e062      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d9a:	f000 fafc 	bl	8004396 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	609a      	str	r2, [r3, #8]
      break;
 8003db6:	e04f      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dc8:	f000 fae5 	bl	8004396 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dda:	609a      	str	r2, [r3, #8]
      break;
 8003ddc:	e03c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 fa5c 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2150      	movs	r1, #80	@ 0x50
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fab3 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e02c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 fa7a 	bl	8004304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2160      	movs	r1, #96	@ 0x60
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 faa3 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e01c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 fa3c 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2140      	movs	r1, #64	@ 0x40
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fa93 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f000 fa8a 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e003      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e000      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
	...

08003ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2f      	ldr	r2, [pc, #188]	@ (8003f8c <TIM_Base_SetConfig+0xd0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	@ (8003f90 <TIM_Base_SetConfig+0xd4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f94 <TIM_Base_SetConfig+0xd8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a22      	ldr	r2, [pc, #136]	@ (8003f8c <TIM_Base_SetConfig+0xd0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1f      	ldr	r2, [pc, #124]	@ (8003f90 <TIM_Base_SetConfig+0xd4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <TIM_Base_SetConfig+0xd8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0d      	ldr	r2, [pc, #52]	@ (8003f8c <TIM_Base_SetConfig+0xd0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f023 0201 	bic.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]
  }
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800

08003f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 0201 	bic.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 0302 	bic.w	r3, r3, #2
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <TIM_OC1_SetConfig+0xc8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10c      	bne.n	800400e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0308 	bic.w	r3, r3, #8
 8003ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <TIM_OC1_SetConfig+0xc8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d111      	bne.n	800403a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800401c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00

08004064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 0210 	bic.w	r2, r3, #16
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0320 	bic.w	r3, r3, #32
 80040ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <TIM_OC2_SetConfig+0xd0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10d      	bne.n	80040e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a14      	ldr	r2, [pc, #80]	@ (8004134 <TIM_OC2_SetConfig+0xd0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d113      	bne.n	8004110 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	621a      	str	r2, [r3, #32]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00

08004138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1d      	ldr	r2, [pc, #116]	@ (8004208 <TIM_OC3_SetConfig+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10d      	bne.n	80041b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <TIM_OC3_SetConfig+0xd0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d113      	bne.n	80041e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	621a      	str	r2, [r3, #32]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40012c00 	.word	0x40012c00

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	031b      	lsls	r3, r3, #12
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a0f      	ldr	r2, [pc, #60]	@ (80042a4 <TIM_OC4_SetConfig+0x98>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d109      	bne.n	8004280 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	019b      	lsls	r3, r3, #6
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	40012c00 	.word	0x40012c00

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	621a      	str	r2, [r3, #32]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	f043 0307 	orr.w	r3, r3, #7
 8004384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2201      	movs	r2, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e046      	b.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004480:	d009      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a10      	ldr	r2, [pc, #64]	@ (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10c      	bne.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800449c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800

080044d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e03d      	b.n	8004570 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e042      	b.n	8004636 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fd fc9b 	bl	8001f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2224      	movs	r2, #36	@ 0x24
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fdb8 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004606:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004616:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08a      	sub	sp, #40	@ 0x28
 8004642:	af02      	add	r7, sp, #8
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b20      	cmp	r3, #32
 800465c:	d175      	bne.n	800474a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_Transmit+0x2c>
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e06e      	b.n	800474c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2221      	movs	r2, #33	@ 0x21
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800467c:	f7fd fe50 	bl	8002320 <HAL_GetTick>
 8004680:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d108      	bne.n	80046aa <HAL_UART_Transmit+0x6c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e003      	b.n	80046b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b2:	e02e      	b.n	8004712 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fb1d 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e03a      	b.n	800474c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3302      	adds	r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e007      	b.n	8004704 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3301      	adds	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1cb      	bne.n	80046b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	2140      	movs	r1, #64	@ 0x40
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fae9 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e006      	b.n	800474c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b20      	cmp	r3, #32
 800476c:	d112      	bne.n	8004794 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_UART_Receive_IT+0x26>
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e00b      	b.n	8004796 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	461a      	mov	r2, r3
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fb10 	bl	8004db0 <UART_Start_Receive_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	e000      	b.n	8004796 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b0ba      	sub	sp, #232	@ 0xe8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_UART_IRQHandler+0x66>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fbec 	bl	8004fdc <UART_Receive_IT>
      return;
 8004804:	e25b      	b.n	8004cbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80de 	beq.w	80049cc <HAL_UART_IRQHandler+0x22c>
 8004810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004820:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80d1 	beq.w	80049cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_UART_IRQHandler+0xae>
 8004836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_UART_IRQHandler+0xd2>
 800485a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_UART_IRQHandler+0xf6>
 800487e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d011      	beq.n	80048c6 <HAL_UART_IRQHandler+0x126>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d105      	bne.n	80048ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 81f2 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_UART_IRQHandler+0x14e>
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb77 	bl	8004fdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_UART_IRQHandler+0x17a>
 8004912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d04f      	beq.n	80049ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa81 	bl	8004e22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d041      	beq.n	80049b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800494c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800495a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800495e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1d9      	bne.n	800492e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	4a7e      	ldr	r2, [pc, #504]	@ (8004b80 <HAL_UART_IRQHandler+0x3e0>)
 8004988:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd fe18 	bl	80025c4 <HAL_DMA_Abort_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049a4:	4610      	mov	r0, r2
 80049a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	e00e      	b.n	80049c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f993 	bl	8004cd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	e00a      	b.n	80049c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f98f 	bl	8004cd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	e006      	b.n	80049c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f98b 	bl	8004cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049c6:	e175      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	bf00      	nop
    return;
 80049ca:	e173      	b.n	8004cb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	f040 814f 	bne.w	8004c74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8148 	beq.w	8004c74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8141 	beq.w	8004c74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80b6 	beq.w	8004b84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8145 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f080 813e 	bcs.w	8004cb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	f000 8088 	beq.w	8004b60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a7c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1d9      	bne.n	8004a50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004aac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3314      	adds	r3, #20
 8004abc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ac0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e1      	bne.n	8004a9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004afc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004afe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e3      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b30:	f023 0310 	bic.w	r3, r3, #16
 8004b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e3      	bne.n	8004b1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd fcf7 	bl	800254e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8b6 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b7c:	e09c      	b.n	8004cb8 <HAL_UART_IRQHandler+0x518>
 8004b7e:	bf00      	nop
 8004b80:	08004ee7 	.word	0x08004ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 808e 	beq.w	8004cbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8089 	beq.w	8004cbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	330c      	adds	r3, #12
 8004bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bce:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e3      	bne.n	8004baa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3314      	adds	r3, #20
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3314      	adds	r3, #20
 8004c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c06:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e3      	bne.n	8004be2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c4c:	61fa      	str	r2, [r7, #28]
 8004c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e3      	bne.n	8004c28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f83b 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c72:	e023      	b.n	8004cbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <HAL_UART_IRQHandler+0x4f4>
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f93e 	bl	8004f0e <UART_Transmit_IT>
    return;
 8004c92:	e014      	b.n	8004cbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <HAL_UART_IRQHandler+0x51e>
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f97d 	bl	8004fac <UART_EndTransmit_IT>
    return;
 8004cb2:	e004      	b.n	8004cbe <HAL_UART_IRQHandler+0x51e>
    return;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8004cbc:	bf00      	nop
  }
}
 8004cbe:	37e8      	adds	r7, #232	@ 0xe8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0e:	e03b      	b.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d037      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d18:	f7fd fb02 	bl	8002320 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d302      	bcc.n	8004d2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e03a      	b.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d023      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b80      	cmp	r3, #128	@ 0x80
 8004d44:	d020      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b40      	cmp	r3, #64	@ 0x40
 8004d4a:	d01d      	beq.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d116      	bne.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f856 	bl	8004e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e00f      	b.n	8004da8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d0b4      	beq.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2222      	movs	r2, #34	@ 0x22
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0220 	orr.w	r2, r2, #32
 8004e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b095      	sub	sp, #84	@ 0x54
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e5      	bne.n	8004e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d119      	bne.n	8004ece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 0310 	bic.w	r3, r3, #16
 8004eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eba:	61ba      	str	r2, [r7, #24]
 8004ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6979      	ldr	r1, [r7, #20]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e5      	bne.n	8004e9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004edc:	bf00      	nop
 8004ede:	3754      	adds	r7, #84	@ 0x54
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fee8 	bl	8004cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b21      	cmp	r3, #33	@ 0x21
 8004f20:	d13e      	bne.n	8004fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2a:	d114      	bne.n	8004f56 <UART_Transmit_IT+0x48>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d110      	bne.n	8004f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	621a      	str	r2, [r3, #32]
 8004f54:	e008      	b.n	8004f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6211      	str	r1, [r2, #32]
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4619      	mov	r1, r3
 8004f76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10f      	bne.n	8004f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe79 	bl	8004cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	@ 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b22      	cmp	r3, #34	@ 0x22
 8004fee:	f040 80ae 	bne.w	800514e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffa:	d117      	bne.n	800502c <UART_Receive_IT+0x50>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	b29a      	uxth	r2, r3
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	629a      	str	r2, [r3, #40]	@ 0x28
 800502a:	e026      	b.n	800507a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d007      	beq.n	8005050 <UART_Receive_IT+0x74>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <UART_Receive_IT+0x82>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e008      	b.n	8005070 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506a:	b2da      	uxtb	r2, r3
 800506c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29b      	uxth	r3, r3
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4619      	mov	r1, r3
 8005088:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800508a:	2b00      	cmp	r3, #0
 800508c:	d15d      	bne.n	800514a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0220 	bic.w	r2, r2, #32
 800509c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d135      	bne.n	8005140 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	613b      	str	r3, [r7, #16]
   return(result);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fa:	623a      	str	r2, [r7, #32]
 80050fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	61bb      	str	r3, [r7, #24]
   return(result);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d10a      	bne.n	8005132 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fdd5 	bl	8004ce8 <HAL_UARTEx_RxEventCallback>
 800513e:	e002      	b.n	8005146 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fc fc59 	bl	80019f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e002      	b.n	8005150 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	@ 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005192:	f023 030c 	bic.w	r3, r3, #12
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	@ (800526c <UART_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fe f80a 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	e002      	b.n	80051ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fd fff2 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	0119      	lsls	r1, r3, #4
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	4b1a      	ldr	r3, [pc, #104]	@ (8005270 <UART_SetConfig+0x118>)
 8005206:	fba3 0302 	umull	r0, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2064      	movs	r0, #100	@ 0x64
 800520e:	fb00 f303 	mul.w	r3, r0, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	@ 0x32
 8005218:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <UART_SetConfig+0x118>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005224:	4419      	add	r1, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fbb2 f2f3 	udiv	r2, r2, r3
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <UART_SetConfig+0x118>)
 800523e:	fba3 0302 	umull	r0, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2064      	movs	r0, #100	@ 0x64
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	@ 0x32
 8005250:	4a07      	ldr	r2, [pc, #28]	@ (8005270 <UART_SetConfig+0x118>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	440a      	add	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013800 	.word	0x40013800
 8005270:	51eb851f 	.word	0x51eb851f

08005274 <__cvt>:
 8005274:	2b00      	cmp	r3, #0
 8005276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527a:	461d      	mov	r5, r3
 800527c:	bfbb      	ittet	lt
 800527e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005282:	461d      	movlt	r5, r3
 8005284:	2300      	movge	r3, #0
 8005286:	232d      	movlt	r3, #45	@ 0x2d
 8005288:	b088      	sub	sp, #32
 800528a:	4614      	mov	r4, r2
 800528c:	bfb8      	it	lt
 800528e:	4614      	movlt	r4, r2
 8005290:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005292:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005294:	7013      	strb	r3, [r2, #0]
 8005296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005298:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800529c:	f023 0820 	bic.w	r8, r3, #32
 80052a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052a4:	d005      	beq.n	80052b2 <__cvt+0x3e>
 80052a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052aa:	d100      	bne.n	80052ae <__cvt+0x3a>
 80052ac:	3601      	adds	r6, #1
 80052ae:	2302      	movs	r3, #2
 80052b0:	e000      	b.n	80052b4 <__cvt+0x40>
 80052b2:	2303      	movs	r3, #3
 80052b4:	aa07      	add	r2, sp, #28
 80052b6:	9204      	str	r2, [sp, #16]
 80052b8:	aa06      	add	r2, sp, #24
 80052ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80052be:	e9cd 3600 	strd	r3, r6, [sp]
 80052c2:	4622      	mov	r2, r4
 80052c4:	462b      	mov	r3, r5
 80052c6:	f001 f8bb 	bl	8006440 <_dtoa_r>
 80052ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052ce:	4607      	mov	r7, r0
 80052d0:	d119      	bne.n	8005306 <__cvt+0x92>
 80052d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80052d4:	07db      	lsls	r3, r3, #31
 80052d6:	d50e      	bpl.n	80052f6 <__cvt+0x82>
 80052d8:	eb00 0906 	add.w	r9, r0, r6
 80052dc:	2200      	movs	r2, #0
 80052de:	2300      	movs	r3, #0
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7fb fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80052e8:	b108      	cbz	r0, 80052ee <__cvt+0x7a>
 80052ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80052ee:	2230      	movs	r2, #48	@ 0x30
 80052f0:	9b07      	ldr	r3, [sp, #28]
 80052f2:	454b      	cmp	r3, r9
 80052f4:	d31e      	bcc.n	8005334 <__cvt+0xc0>
 80052f6:	4638      	mov	r0, r7
 80052f8:	9b07      	ldr	r3, [sp, #28]
 80052fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052fc:	1bdb      	subs	r3, r3, r7
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	b008      	add	sp, #32
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800530a:	eb00 0906 	add.w	r9, r0, r6
 800530e:	d1e5      	bne.n	80052dc <__cvt+0x68>
 8005310:	7803      	ldrb	r3, [r0, #0]
 8005312:	2b30      	cmp	r3, #48	@ 0x30
 8005314:	d10a      	bne.n	800532c <__cvt+0xb8>
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	4620      	mov	r0, r4
 800531c:	4629      	mov	r1, r5
 800531e:	f7fb fb43 	bl	80009a8 <__aeabi_dcmpeq>
 8005322:	b918      	cbnz	r0, 800532c <__cvt+0xb8>
 8005324:	f1c6 0601 	rsb	r6, r6, #1
 8005328:	f8ca 6000 	str.w	r6, [sl]
 800532c:	f8da 3000 	ldr.w	r3, [sl]
 8005330:	4499      	add	r9, r3
 8005332:	e7d3      	b.n	80052dc <__cvt+0x68>
 8005334:	1c59      	adds	r1, r3, #1
 8005336:	9107      	str	r1, [sp, #28]
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e7d9      	b.n	80052f0 <__cvt+0x7c>

0800533c <__exponent>:
 800533c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800533e:	2900      	cmp	r1, #0
 8005340:	bfb6      	itet	lt
 8005342:	232d      	movlt	r3, #45	@ 0x2d
 8005344:	232b      	movge	r3, #43	@ 0x2b
 8005346:	4249      	neglt	r1, r1
 8005348:	2909      	cmp	r1, #9
 800534a:	7002      	strb	r2, [r0, #0]
 800534c:	7043      	strb	r3, [r0, #1]
 800534e:	dd29      	ble.n	80053a4 <__exponent+0x68>
 8005350:	f10d 0307 	add.w	r3, sp, #7
 8005354:	461d      	mov	r5, r3
 8005356:	270a      	movs	r7, #10
 8005358:	fbb1 f6f7 	udiv	r6, r1, r7
 800535c:	461a      	mov	r2, r3
 800535e:	fb07 1416 	mls	r4, r7, r6, r1
 8005362:	3430      	adds	r4, #48	@ 0x30
 8005364:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005368:	460c      	mov	r4, r1
 800536a:	2c63      	cmp	r4, #99	@ 0x63
 800536c:	4631      	mov	r1, r6
 800536e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005372:	dcf1      	bgt.n	8005358 <__exponent+0x1c>
 8005374:	3130      	adds	r1, #48	@ 0x30
 8005376:	1e94      	subs	r4, r2, #2
 8005378:	f803 1c01 	strb.w	r1, [r3, #-1]
 800537c:	4623      	mov	r3, r4
 800537e:	1c41      	adds	r1, r0, #1
 8005380:	42ab      	cmp	r3, r5
 8005382:	d30a      	bcc.n	800539a <__exponent+0x5e>
 8005384:	f10d 0309 	add.w	r3, sp, #9
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	42ac      	cmp	r4, r5
 800538c:	bf88      	it	hi
 800538e:	2300      	movhi	r3, #0
 8005390:	3302      	adds	r3, #2
 8005392:	4403      	add	r3, r0
 8005394:	1a18      	subs	r0, r3, r0
 8005396:	b003      	add	sp, #12
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800539e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053a2:	e7ed      	b.n	8005380 <__exponent+0x44>
 80053a4:	2330      	movs	r3, #48	@ 0x30
 80053a6:	3130      	adds	r1, #48	@ 0x30
 80053a8:	7083      	strb	r3, [r0, #2]
 80053aa:	70c1      	strb	r1, [r0, #3]
 80053ac:	1d03      	adds	r3, r0, #4
 80053ae:	e7f1      	b.n	8005394 <__exponent+0x58>

080053b0 <_printf_float>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	b091      	sub	sp, #68	@ 0x44
 80053b6:	460c      	mov	r4, r1
 80053b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80053bc:	4616      	mov	r6, r2
 80053be:	461f      	mov	r7, r3
 80053c0:	4605      	mov	r5, r0
 80053c2:	f000 ff1d 	bl	8006200 <_localeconv_r>
 80053c6:	6803      	ldr	r3, [r0, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	9308      	str	r3, [sp, #32]
 80053cc:	f7fa fec0 	bl	8000150 <strlen>
 80053d0:	2300      	movs	r3, #0
 80053d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80053d4:	f8d8 3000 	ldr.w	r3, [r8]
 80053d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80053da:	3307      	adds	r3, #7
 80053dc:	f023 0307 	bic.w	r3, r3, #7
 80053e0:	f103 0208 	add.w	r2, r3, #8
 80053e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053e8:	f8d4 b000 	ldr.w	fp, [r4]
 80053ec:	f8c8 2000 	str.w	r2, [r8]
 80053f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005406:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800540a:	4b9c      	ldr	r3, [pc, #624]	@ (800567c <_printf_float+0x2cc>)
 800540c:	f7fb fafe 	bl	8000a0c <__aeabi_dcmpun>
 8005410:	bb70      	cbnz	r0, 8005470 <_printf_float+0xc0>
 8005412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	4b98      	ldr	r3, [pc, #608]	@ (800567c <_printf_float+0x2cc>)
 800541c:	f7fb fad8 	bl	80009d0 <__aeabi_dcmple>
 8005420:	bb30      	cbnz	r0, 8005470 <_printf_float+0xc0>
 8005422:	2200      	movs	r2, #0
 8005424:	2300      	movs	r3, #0
 8005426:	4640      	mov	r0, r8
 8005428:	4649      	mov	r1, r9
 800542a:	f7fb fac7 	bl	80009bc <__aeabi_dcmplt>
 800542e:	b110      	cbz	r0, 8005436 <_printf_float+0x86>
 8005430:	232d      	movs	r3, #45	@ 0x2d
 8005432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005436:	4a92      	ldr	r2, [pc, #584]	@ (8005680 <_printf_float+0x2d0>)
 8005438:	4b92      	ldr	r3, [pc, #584]	@ (8005684 <_printf_float+0x2d4>)
 800543a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800543e:	bf94      	ite	ls
 8005440:	4690      	movls	r8, r2
 8005442:	4698      	movhi	r8, r3
 8005444:	2303      	movs	r3, #3
 8005446:	f04f 0900 	mov.w	r9, #0
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f02b 0304 	bic.w	r3, fp, #4
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	4633      	mov	r3, r6
 8005454:	4621      	mov	r1, r4
 8005456:	4628      	mov	r0, r5
 8005458:	9700      	str	r7, [sp, #0]
 800545a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800545c:	f000 f9d4 	bl	8005808 <_printf_common>
 8005460:	3001      	adds	r0, #1
 8005462:	f040 8090 	bne.w	8005586 <_printf_float+0x1d6>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	b011      	add	sp, #68	@ 0x44
 800546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	f7fb fac8 	bl	8000a0c <__aeabi_dcmpun>
 800547c:	b148      	cbz	r0, 8005492 <_printf_float+0xe2>
 800547e:	464b      	mov	r3, r9
 8005480:	2b00      	cmp	r3, #0
 8005482:	bfb8      	it	lt
 8005484:	232d      	movlt	r3, #45	@ 0x2d
 8005486:	4a80      	ldr	r2, [pc, #512]	@ (8005688 <_printf_float+0x2d8>)
 8005488:	bfb8      	it	lt
 800548a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800548e:	4b7f      	ldr	r3, [pc, #508]	@ (800568c <_printf_float+0x2dc>)
 8005490:	e7d3      	b.n	800543a <_printf_float+0x8a>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	d13f      	bne.n	800551c <_printf_float+0x16c>
 800549c:	2306      	movs	r3, #6
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	9206      	str	r2, [sp, #24]
 80054aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80054ac:	e9cd a204 	strd	sl, r2, [sp, #16]
 80054b0:	aa0d      	add	r2, sp, #52	@ 0x34
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80054b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	4642      	mov	r2, r8
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4628      	mov	r0, r5
 80054c4:	464b      	mov	r3, r9
 80054c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80054c8:	f7ff fed4 	bl	8005274 <__cvt>
 80054cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054ce:	4680      	mov	r8, r0
 80054d0:	2947      	cmp	r1, #71	@ 0x47
 80054d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80054d4:	d128      	bne.n	8005528 <_printf_float+0x178>
 80054d6:	1cc8      	adds	r0, r1, #3
 80054d8:	db02      	blt.n	80054e0 <_printf_float+0x130>
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	4299      	cmp	r1, r3
 80054de:	dd40      	ble.n	8005562 <_printf_float+0x1b2>
 80054e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80054e4:	fa5f fa8a 	uxtb.w	sl, sl
 80054e8:	4652      	mov	r2, sl
 80054ea:	3901      	subs	r1, #1
 80054ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80054f2:	f7ff ff23 	bl	800533c <__exponent>
 80054f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054f8:	4681      	mov	r9, r0
 80054fa:	1813      	adds	r3, r2, r0
 80054fc:	2a01      	cmp	r2, #1
 80054fe:	6123      	str	r3, [r4, #16]
 8005500:	dc02      	bgt.n	8005508 <_printf_float+0x158>
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	07d2      	lsls	r2, r2, #31
 8005506:	d501      	bpl.n	800550c <_printf_float+0x15c>
 8005508:	3301      	adds	r3, #1
 800550a:	6123      	str	r3, [r4, #16]
 800550c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005510:	2b00      	cmp	r3, #0
 8005512:	d09e      	beq.n	8005452 <_printf_float+0xa2>
 8005514:	232d      	movs	r3, #45	@ 0x2d
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800551a:	e79a      	b.n	8005452 <_printf_float+0xa2>
 800551c:	2947      	cmp	r1, #71	@ 0x47
 800551e:	d1bf      	bne.n	80054a0 <_printf_float+0xf0>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1bd      	bne.n	80054a0 <_printf_float+0xf0>
 8005524:	2301      	movs	r3, #1
 8005526:	e7ba      	b.n	800549e <_printf_float+0xee>
 8005528:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800552c:	d9dc      	bls.n	80054e8 <_printf_float+0x138>
 800552e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005532:	d118      	bne.n	8005566 <_printf_float+0x1b6>
 8005534:	2900      	cmp	r1, #0
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	dd0b      	ble.n	8005552 <_printf_float+0x1a2>
 800553a:	6121      	str	r1, [r4, #16]
 800553c:	b913      	cbnz	r3, 8005544 <_printf_float+0x194>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	07d0      	lsls	r0, r2, #31
 8005542:	d502      	bpl.n	800554a <_printf_float+0x19a>
 8005544:	3301      	adds	r3, #1
 8005546:	440b      	add	r3, r1
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	f04f 0900 	mov.w	r9, #0
 800554e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005550:	e7dc      	b.n	800550c <_printf_float+0x15c>
 8005552:	b913      	cbnz	r3, 800555a <_printf_float+0x1aa>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	07d2      	lsls	r2, r2, #31
 8005558:	d501      	bpl.n	800555e <_printf_float+0x1ae>
 800555a:	3302      	adds	r3, #2
 800555c:	e7f4      	b.n	8005548 <_printf_float+0x198>
 800555e:	2301      	movs	r3, #1
 8005560:	e7f2      	b.n	8005548 <_printf_float+0x198>
 8005562:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005568:	4299      	cmp	r1, r3
 800556a:	db05      	blt.n	8005578 <_printf_float+0x1c8>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	6121      	str	r1, [r4, #16]
 8005570:	07d8      	lsls	r0, r3, #31
 8005572:	d5ea      	bpl.n	800554a <_printf_float+0x19a>
 8005574:	1c4b      	adds	r3, r1, #1
 8005576:	e7e7      	b.n	8005548 <_printf_float+0x198>
 8005578:	2900      	cmp	r1, #0
 800557a:	bfcc      	ite	gt
 800557c:	2201      	movgt	r2, #1
 800557e:	f1c1 0202 	rsble	r2, r1, #2
 8005582:	4413      	add	r3, r2
 8005584:	e7e0      	b.n	8005548 <_printf_float+0x198>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	055a      	lsls	r2, r3, #21
 800558a:	d407      	bmi.n	800559c <_printf_float+0x1ec>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	4642      	mov	r2, r8
 8005590:	4631      	mov	r1, r6
 8005592:	4628      	mov	r0, r5
 8005594:	47b8      	blx	r7
 8005596:	3001      	adds	r0, #1
 8005598:	d12b      	bne.n	80055f2 <_printf_float+0x242>
 800559a:	e764      	b.n	8005466 <_printf_float+0xb6>
 800559c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055a0:	f240 80dc 	bls.w	800575c <_printf_float+0x3ac>
 80055a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	f7fb f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d033      	beq.n	800561c <_printf_float+0x26c>
 80055b4:	2301      	movs	r3, #1
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	4a35      	ldr	r2, [pc, #212]	@ (8005690 <_printf_float+0x2e0>)
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f af51 	beq.w	8005466 <_printf_float+0xb6>
 80055c4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80055c8:	4543      	cmp	r3, r8
 80055ca:	db02      	blt.n	80055d2 <_printf_float+0x222>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	07d8      	lsls	r0, r3, #31
 80055d0:	d50f      	bpl.n	80055f2 <_printf_float+0x242>
 80055d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f af42 	beq.w	8005466 <_printf_float+0xb6>
 80055e2:	f04f 0900 	mov.w	r9, #0
 80055e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80055ea:	f104 0a1a 	add.w	sl, r4, #26
 80055ee:	45c8      	cmp	r8, r9
 80055f0:	dc09      	bgt.n	8005606 <_printf_float+0x256>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	079b      	lsls	r3, r3, #30
 80055f6:	f100 8102 	bmi.w	80057fe <_printf_float+0x44e>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e731      	b.n	800546a <_printf_float+0xba>
 8005606:	2301      	movs	r3, #1
 8005608:	4652      	mov	r2, sl
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f af28 	beq.w	8005466 <_printf_float+0xb6>
 8005616:	f109 0901 	add.w	r9, r9, #1
 800561a:	e7e8      	b.n	80055ee <_printf_float+0x23e>
 800561c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800561e:	2b00      	cmp	r3, #0
 8005620:	dc38      	bgt.n	8005694 <_printf_float+0x2e4>
 8005622:	2301      	movs	r3, #1
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <_printf_float+0x2e0>)
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f af1a 	beq.w	8005466 <_printf_float+0xb6>
 8005632:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005636:	ea59 0303 	orrs.w	r3, r9, r3
 800563a:	d102      	bne.n	8005642 <_printf_float+0x292>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07d9      	lsls	r1, r3, #31
 8005640:	d5d7      	bpl.n	80055f2 <_printf_float+0x242>
 8005642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	f43f af0a 	beq.w	8005466 <_printf_float+0xb6>
 8005652:	f04f 0a00 	mov.w	sl, #0
 8005656:	f104 0b1a 	add.w	fp, r4, #26
 800565a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800565c:	425b      	negs	r3, r3
 800565e:	4553      	cmp	r3, sl
 8005660:	dc01      	bgt.n	8005666 <_printf_float+0x2b6>
 8005662:	464b      	mov	r3, r9
 8005664:	e793      	b.n	800558e <_printf_float+0x1de>
 8005666:	2301      	movs	r3, #1
 8005668:	465a      	mov	r2, fp
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f aef8 	beq.w	8005466 <_printf_float+0xb6>
 8005676:	f10a 0a01 	add.w	sl, sl, #1
 800567a:	e7ee      	b.n	800565a <_printf_float+0x2aa>
 800567c:	7fefffff 	.word	0x7fefffff
 8005680:	0800a36e 	.word	0x0800a36e
 8005684:	0800a372 	.word	0x0800a372
 8005688:	0800a376 	.word	0x0800a376
 800568c:	0800a37a 	.word	0x0800a37a
 8005690:	0800a708 	.word	0x0800a708
 8005694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005696:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800569a:	4553      	cmp	r3, sl
 800569c:	bfa8      	it	ge
 800569e:	4653      	movge	r3, sl
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	4699      	mov	r9, r3
 80056a4:	dc36      	bgt.n	8005714 <_printf_float+0x364>
 80056a6:	f04f 0b00 	mov.w	fp, #0
 80056aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ae:	f104 021a 	add.w	r2, r4, #26
 80056b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80056b6:	eba3 0309 	sub.w	r3, r3, r9
 80056ba:	455b      	cmp	r3, fp
 80056bc:	dc31      	bgt.n	8005722 <_printf_float+0x372>
 80056be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c0:	459a      	cmp	sl, r3
 80056c2:	dc3a      	bgt.n	800573a <_printf_float+0x38a>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	07da      	lsls	r2, r3, #31
 80056c8:	d437      	bmi.n	800573a <_printf_float+0x38a>
 80056ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056cc:	ebaa 0903 	sub.w	r9, sl, r3
 80056d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056d2:	ebaa 0303 	sub.w	r3, sl, r3
 80056d6:	4599      	cmp	r9, r3
 80056d8:	bfa8      	it	ge
 80056da:	4699      	movge	r9, r3
 80056dc:	f1b9 0f00 	cmp.w	r9, #0
 80056e0:	dc33      	bgt.n	800574a <_printf_float+0x39a>
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056ea:	f104 0b1a 	add.w	fp, r4, #26
 80056ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056f0:	ebaa 0303 	sub.w	r3, sl, r3
 80056f4:	eba3 0309 	sub.w	r3, r3, r9
 80056f8:	4543      	cmp	r3, r8
 80056fa:	f77f af7a 	ble.w	80055f2 <_printf_float+0x242>
 80056fe:	2301      	movs	r3, #1
 8005700:	465a      	mov	r2, fp
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	f43f aeac 	beq.w	8005466 <_printf_float+0xb6>
 800570e:	f108 0801 	add.w	r8, r8, #1
 8005712:	e7ec      	b.n	80056ee <_printf_float+0x33e>
 8005714:	4642      	mov	r2, r8
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	d1c2      	bne.n	80056a6 <_printf_float+0x2f6>
 8005720:	e6a1      	b.n	8005466 <_printf_float+0xb6>
 8005722:	2301      	movs	r3, #1
 8005724:	4631      	mov	r1, r6
 8005726:	4628      	mov	r0, r5
 8005728:	920a      	str	r2, [sp, #40]	@ 0x28
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	f43f ae9a 	beq.w	8005466 <_printf_float+0xb6>
 8005732:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005734:	f10b 0b01 	add.w	fp, fp, #1
 8005738:	e7bb      	b.n	80056b2 <_printf_float+0x302>
 800573a:	4631      	mov	r1, r6
 800573c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005740:	4628      	mov	r0, r5
 8005742:	47b8      	blx	r7
 8005744:	3001      	adds	r0, #1
 8005746:	d1c0      	bne.n	80056ca <_printf_float+0x31a>
 8005748:	e68d      	b.n	8005466 <_printf_float+0xb6>
 800574a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800574c:	464b      	mov	r3, r9
 800574e:	4631      	mov	r1, r6
 8005750:	4628      	mov	r0, r5
 8005752:	4442      	add	r2, r8
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	d1c3      	bne.n	80056e2 <_printf_float+0x332>
 800575a:	e684      	b.n	8005466 <_printf_float+0xb6>
 800575c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005760:	f1ba 0f01 	cmp.w	sl, #1
 8005764:	dc01      	bgt.n	800576a <_printf_float+0x3ba>
 8005766:	07db      	lsls	r3, r3, #31
 8005768:	d536      	bpl.n	80057d8 <_printf_float+0x428>
 800576a:	2301      	movs	r3, #1
 800576c:	4642      	mov	r2, r8
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	f43f ae76 	beq.w	8005466 <_printf_float+0xb6>
 800577a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f ae6e 	beq.w	8005466 <_printf_float+0xb6>
 800578a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800578e:	2200      	movs	r2, #0
 8005790:	2300      	movs	r3, #0
 8005792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005796:	f7fb f907 	bl	80009a8 <__aeabi_dcmpeq>
 800579a:	b9c0      	cbnz	r0, 80057ce <_printf_float+0x41e>
 800579c:	4653      	mov	r3, sl
 800579e:	f108 0201 	add.w	r2, r8, #1
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	d10c      	bne.n	80057c6 <_printf_float+0x416>
 80057ac:	e65b      	b.n	8005466 <_printf_float+0xb6>
 80057ae:	2301      	movs	r3, #1
 80057b0:	465a      	mov	r2, fp
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f ae54 	beq.w	8005466 <_printf_float+0xb6>
 80057be:	f108 0801 	add.w	r8, r8, #1
 80057c2:	45d0      	cmp	r8, sl
 80057c4:	dbf3      	blt.n	80057ae <_printf_float+0x3fe>
 80057c6:	464b      	mov	r3, r9
 80057c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057cc:	e6e0      	b.n	8005590 <_printf_float+0x1e0>
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f104 0b1a 	add.w	fp, r4, #26
 80057d6:	e7f4      	b.n	80057c2 <_printf_float+0x412>
 80057d8:	2301      	movs	r3, #1
 80057da:	4642      	mov	r2, r8
 80057dc:	e7e1      	b.n	80057a2 <_printf_float+0x3f2>
 80057de:	2301      	movs	r3, #1
 80057e0:	464a      	mov	r2, r9
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	f43f ae3c 	beq.w	8005466 <_printf_float+0xb6>
 80057ee:	f108 0801 	add.w	r8, r8, #1
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80057f6:	1a5b      	subs	r3, r3, r1
 80057f8:	4543      	cmp	r3, r8
 80057fa:	dcf0      	bgt.n	80057de <_printf_float+0x42e>
 80057fc:	e6fd      	b.n	80055fa <_printf_float+0x24a>
 80057fe:	f04f 0800 	mov.w	r8, #0
 8005802:	f104 0919 	add.w	r9, r4, #25
 8005806:	e7f4      	b.n	80057f2 <_printf_float+0x442>

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4698      	mov	r8, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	4607      	mov	r7, r0
 8005816:	4293      	cmp	r3, r2
 8005818:	bfb8      	it	lt
 800581a:	4613      	movlt	r3, r2
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005822:	460c      	mov	r4, r1
 8005824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc2b      	bgt.n	80058a8 <_printf_common+0xa0>
 8005850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	3b00      	subs	r3, #0
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d430      	bmi.n	80058c2 <_printf_common+0xba>
 8005860:	4641      	mov	r1, r8
 8005862:	4638      	mov	r0, r7
 8005864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005868:	47c8      	blx	r9
 800586a:	3001      	adds	r0, #1
 800586c:	d023      	beq.n	80058b6 <_printf_common+0xae>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	6922      	ldr	r2, [r4, #16]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf14      	ite	ne
 800587a:	2500      	movne	r5, #0
 800587c:	6833      	ldreq	r3, [r6, #0]
 800587e:	f04f 0600 	mov.w	r6, #0
 8005882:	bf08      	it	eq
 8005884:	68e5      	ldreq	r5, [r4, #12]
 8005886:	f104 041a 	add.w	r4, r4, #26
 800588a:	bf08      	it	eq
 800588c:	1aed      	subeq	r5, r5, r3
 800588e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005892:	bf08      	it	eq
 8005894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005898:	4293      	cmp	r3, r2
 800589a:	bfc4      	itt	gt
 800589c:	1a9b      	subgt	r3, r3, r2
 800589e:	18ed      	addgt	r5, r5, r3
 80058a0:	42b5      	cmp	r5, r6
 80058a2:	d11a      	bne.n	80058da <_printf_common+0xd2>
 80058a4:	2000      	movs	r0, #0
 80058a6:	e008      	b.n	80058ba <_printf_common+0xb2>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4652      	mov	r2, sl
 80058ac:	4641      	mov	r1, r8
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c8      	blx	r9
 80058b2:	3001      	adds	r0, #1
 80058b4:	d103      	bne.n	80058be <_printf_common+0xb6>
 80058b6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058be:	3501      	adds	r5, #1
 80058c0:	e7c1      	b.n	8005846 <_printf_common+0x3e>
 80058c2:	2030      	movs	r0, #48	@ 0x30
 80058c4:	18e1      	adds	r1, r4, r3
 80058c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058d0:	4422      	add	r2, r4
 80058d2:	3302      	adds	r3, #2
 80058d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058d8:	e7c2      	b.n	8005860 <_printf_common+0x58>
 80058da:	2301      	movs	r3, #1
 80058dc:	4622      	mov	r2, r4
 80058de:	4641      	mov	r1, r8
 80058e0:	4638      	mov	r0, r7
 80058e2:	47c8      	blx	r9
 80058e4:	3001      	adds	r0, #1
 80058e6:	d0e6      	beq.n	80058b6 <_printf_common+0xae>
 80058e8:	3601      	adds	r6, #1
 80058ea:	e7d9      	b.n	80058a0 <_printf_common+0x98>

080058ec <_printf_i>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	7e0f      	ldrb	r7, [r1, #24]
 80058f2:	4691      	mov	r9, r2
 80058f4:	2f78      	cmp	r7, #120	@ 0x78
 80058f6:	4680      	mov	r8, r0
 80058f8:	460c      	mov	r4, r1
 80058fa:	469a      	mov	sl, r3
 80058fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005902:	d807      	bhi.n	8005914 <_printf_i+0x28>
 8005904:	2f62      	cmp	r7, #98	@ 0x62
 8005906:	d80a      	bhi.n	800591e <_printf_i+0x32>
 8005908:	2f00      	cmp	r7, #0
 800590a:	f000 80d3 	beq.w	8005ab4 <_printf_i+0x1c8>
 800590e:	2f58      	cmp	r7, #88	@ 0x58
 8005910:	f000 80ba 	beq.w	8005a88 <_printf_i+0x19c>
 8005914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800591c:	e03a      	b.n	8005994 <_printf_i+0xa8>
 800591e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005922:	2b15      	cmp	r3, #21
 8005924:	d8f6      	bhi.n	8005914 <_printf_i+0x28>
 8005926:	a101      	add	r1, pc, #4	@ (adr r1, 800592c <_printf_i+0x40>)
 8005928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800592c:	08005985 	.word	0x08005985
 8005930:	08005999 	.word	0x08005999
 8005934:	08005915 	.word	0x08005915
 8005938:	08005915 	.word	0x08005915
 800593c:	08005915 	.word	0x08005915
 8005940:	08005915 	.word	0x08005915
 8005944:	08005999 	.word	0x08005999
 8005948:	08005915 	.word	0x08005915
 800594c:	08005915 	.word	0x08005915
 8005950:	08005915 	.word	0x08005915
 8005954:	08005915 	.word	0x08005915
 8005958:	08005a9b 	.word	0x08005a9b
 800595c:	080059c3 	.word	0x080059c3
 8005960:	08005a55 	.word	0x08005a55
 8005964:	08005915 	.word	0x08005915
 8005968:	08005915 	.word	0x08005915
 800596c:	08005abd 	.word	0x08005abd
 8005970:	08005915 	.word	0x08005915
 8005974:	080059c3 	.word	0x080059c3
 8005978:	08005915 	.word	0x08005915
 800597c:	08005915 	.word	0x08005915
 8005980:	08005a5d 	.word	0x08005a5d
 8005984:	6833      	ldr	r3, [r6, #0]
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6032      	str	r2, [r6, #0]
 800598c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005994:	2301      	movs	r3, #1
 8005996:	e09e      	b.n	8005ad6 <_printf_i+0x1ea>
 8005998:	6833      	ldr	r3, [r6, #0]
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	6031      	str	r1, [r6, #0]
 80059a0:	0606      	lsls	r6, r0, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xbc>
 80059a4:	681d      	ldr	r5, [r3, #0]
 80059a6:	e003      	b.n	80059b0 <_printf_i+0xc4>
 80059a8:	0645      	lsls	r5, r0, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xb8>
 80059ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	da03      	bge.n	80059bc <_printf_i+0xd0>
 80059b4:	232d      	movs	r3, #45	@ 0x2d
 80059b6:	426d      	negs	r5, r5
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059bc:	230a      	movs	r3, #10
 80059be:	4859      	ldr	r0, [pc, #356]	@ (8005b24 <_printf_i+0x238>)
 80059c0:	e011      	b.n	80059e6 <_printf_i+0xfa>
 80059c2:	6821      	ldr	r1, [r4, #0]
 80059c4:	6833      	ldr	r3, [r6, #0]
 80059c6:	0608      	lsls	r0, r1, #24
 80059c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059cc:	d402      	bmi.n	80059d4 <_printf_i+0xe8>
 80059ce:	0649      	lsls	r1, r1, #25
 80059d0:	bf48      	it	mi
 80059d2:	b2ad      	uxthmi	r5, r5
 80059d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	bf14      	ite	ne
 80059da:	230a      	movne	r3, #10
 80059dc:	2308      	moveq	r3, #8
 80059de:	4851      	ldr	r0, [pc, #324]	@ (8005b24 <_printf_i+0x238>)
 80059e0:	2100      	movs	r1, #0
 80059e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059e6:	6866      	ldr	r6, [r4, #4]
 80059e8:	2e00      	cmp	r6, #0
 80059ea:	bfa8      	it	ge
 80059ec:	6821      	ldrge	r1, [r4, #0]
 80059ee:	60a6      	str	r6, [r4, #8]
 80059f0:	bfa4      	itt	ge
 80059f2:	f021 0104 	bicge.w	r1, r1, #4
 80059f6:	6021      	strge	r1, [r4, #0]
 80059f8:	b90d      	cbnz	r5, 80059fe <_printf_i+0x112>
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d04b      	beq.n	8005a96 <_printf_i+0x1aa>
 80059fe:	4616      	mov	r6, r2
 8005a00:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a04:	fb03 5711 	mls	r7, r3, r1, r5
 8005a08:	5dc7      	ldrb	r7, [r0, r7]
 8005a0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a0e:	462f      	mov	r7, r5
 8005a10:	42bb      	cmp	r3, r7
 8005a12:	460d      	mov	r5, r1
 8005a14:	d9f4      	bls.n	8005a00 <_printf_i+0x114>
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d10b      	bne.n	8005a32 <_printf_i+0x146>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	07df      	lsls	r7, r3, #31
 8005a1e:	d508      	bpl.n	8005a32 <_printf_i+0x146>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	6861      	ldr	r1, [r4, #4]
 8005a24:	4299      	cmp	r1, r3
 8005a26:	bfde      	ittt	le
 8005a28:	2330      	movle	r3, #48	@ 0x30
 8005a2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a32:	1b92      	subs	r2, r2, r6
 8005a34:	6122      	str	r2, [r4, #16]
 8005a36:	464b      	mov	r3, r9
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f8cd a000 	str.w	sl, [sp]
 8005a40:	aa03      	add	r2, sp, #12
 8005a42:	f7ff fee1 	bl	8005808 <_printf_common>
 8005a46:	3001      	adds	r0, #1
 8005a48:	d14a      	bne.n	8005ae0 <_printf_i+0x1f4>
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	b004      	add	sp, #16
 8005a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	f043 0320 	orr.w	r3, r3, #32
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	2778      	movs	r7, #120	@ 0x78
 8005a5e:	4832      	ldr	r0, [pc, #200]	@ (8005b28 <_printf_i+0x23c>)
 8005a60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	6831      	ldr	r1, [r6, #0]
 8005a68:	061f      	lsls	r7, r3, #24
 8005a6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a6e:	d402      	bmi.n	8005a76 <_printf_i+0x18a>
 8005a70:	065f      	lsls	r7, r3, #25
 8005a72:	bf48      	it	mi
 8005a74:	b2ad      	uxthmi	r5, r5
 8005a76:	6031      	str	r1, [r6, #0]
 8005a78:	07d9      	lsls	r1, r3, #31
 8005a7a:	bf44      	itt	mi
 8005a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a80:	6023      	strmi	r3, [r4, #0]
 8005a82:	b11d      	cbz	r5, 8005a8c <_printf_i+0x1a0>
 8005a84:	2310      	movs	r3, #16
 8005a86:	e7ab      	b.n	80059e0 <_printf_i+0xf4>
 8005a88:	4826      	ldr	r0, [pc, #152]	@ (8005b24 <_printf_i+0x238>)
 8005a8a:	e7e9      	b.n	8005a60 <_printf_i+0x174>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	f023 0320 	bic.w	r3, r3, #32
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	e7f6      	b.n	8005a84 <_printf_i+0x198>
 8005a96:	4616      	mov	r6, r2
 8005a98:	e7bd      	b.n	8005a16 <_printf_i+0x12a>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	6825      	ldr	r5, [r4, #0]
 8005a9e:	1d18      	adds	r0, r3, #4
 8005aa0:	6961      	ldr	r1, [r4, #20]
 8005aa2:	6030      	str	r0, [r6, #0]
 8005aa4:	062e      	lsls	r6, r5, #24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	d501      	bpl.n	8005aae <_printf_i+0x1c2>
 8005aaa:	6019      	str	r1, [r3, #0]
 8005aac:	e002      	b.n	8005ab4 <_printf_i+0x1c8>
 8005aae:	0668      	lsls	r0, r5, #25
 8005ab0:	d5fb      	bpl.n	8005aaa <_printf_i+0x1be>
 8005ab2:	8019      	strh	r1, [r3, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4616      	mov	r6, r2
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	e7bc      	b.n	8005a36 <_printf_i+0x14a>
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	1d1a      	adds	r2, r3, #4
 8005ac2:	6032      	str	r2, [r6, #0]
 8005ac4:	681e      	ldr	r6, [r3, #0]
 8005ac6:	6862      	ldr	r2, [r4, #4]
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 fc10 	bl	80062ee <memchr>
 8005ace:	b108      	cbz	r0, 8005ad4 <_printf_i+0x1e8>
 8005ad0:	1b80      	subs	r0, r0, r6
 8005ad2:	6060      	str	r0, [r4, #4]
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	6123      	str	r3, [r4, #16]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ade:	e7aa      	b.n	8005a36 <_printf_i+0x14a>
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	47d0      	blx	sl
 8005aea:	3001      	adds	r0, #1
 8005aec:	d0ad      	beq.n	8005a4a <_printf_i+0x15e>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	079b      	lsls	r3, r3, #30
 8005af2:	d413      	bmi.n	8005b1c <_printf_i+0x230>
 8005af4:	68e0      	ldr	r0, [r4, #12]
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bfb8      	it	lt
 8005afc:	4618      	movlt	r0, r3
 8005afe:	e7a6      	b.n	8005a4e <_printf_i+0x162>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4632      	mov	r2, r6
 8005b04:	4649      	mov	r1, r9
 8005b06:	4640      	mov	r0, r8
 8005b08:	47d0      	blx	sl
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d09d      	beq.n	8005a4a <_printf_i+0x15e>
 8005b0e:	3501      	adds	r5, #1
 8005b10:	68e3      	ldr	r3, [r4, #12]
 8005b12:	9903      	ldr	r1, [sp, #12]
 8005b14:	1a5b      	subs	r3, r3, r1
 8005b16:	42ab      	cmp	r3, r5
 8005b18:	dcf2      	bgt.n	8005b00 <_printf_i+0x214>
 8005b1a:	e7eb      	b.n	8005af4 <_printf_i+0x208>
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	f104 0619 	add.w	r6, r4, #25
 8005b22:	e7f5      	b.n	8005b10 <_printf_i+0x224>
 8005b24:	0800a37e 	.word	0x0800a37e
 8005b28:	0800a38f 	.word	0x0800a38f

08005b2c <_scanf_float>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	b087      	sub	sp, #28
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	688b      	ldr	r3, [r1, #8]
 8005b36:	4617      	mov	r7, r2
 8005b38:	1e5a      	subs	r2, r3, #1
 8005b3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b3e:	bf82      	ittt	hi
 8005b40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b44:	eb03 0b05 	addhi.w	fp, r3, r5
 8005b48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	f04f 0500 	mov.w	r5, #0
 8005b52:	bf88      	it	hi
 8005b54:	608b      	strhi	r3, [r1, #8]
 8005b56:	680b      	ldr	r3, [r1, #0]
 8005b58:	4680      	mov	r8, r0
 8005b5a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005b5e:	f842 3b1c 	str.w	r3, [r2], #28
 8005b62:	460c      	mov	r4, r1
 8005b64:	bf98      	it	ls
 8005b66:	f04f 0b00 	movls.w	fp, #0
 8005b6a:	4616      	mov	r6, r2
 8005b6c:	46aa      	mov	sl, r5
 8005b6e:	46a9      	mov	r9, r5
 8005b70:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b74:	9201      	str	r2, [sp, #4]
 8005b76:	9502      	str	r5, [sp, #8]
 8005b78:	68a2      	ldr	r2, [r4, #8]
 8005b7a:	b152      	cbz	r2, 8005b92 <_scanf_float+0x66>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b4e      	cmp	r3, #78	@ 0x4e
 8005b82:	d865      	bhi.n	8005c50 <_scanf_float+0x124>
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d83d      	bhi.n	8005c04 <_scanf_float+0xd8>
 8005b88:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005b8c:	b2c8      	uxtb	r0, r1
 8005b8e:	280e      	cmp	r0, #14
 8005b90:	d93b      	bls.n	8005c0a <_scanf_float+0xde>
 8005b92:	f1b9 0f00 	cmp.w	r9, #0
 8005b96:	d003      	beq.n	8005ba0 <_scanf_float+0x74>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ba4:	f1ba 0f01 	cmp.w	sl, #1
 8005ba8:	f200 8118 	bhi.w	8005ddc <_scanf_float+0x2b0>
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	429e      	cmp	r6, r3
 8005bb0:	f200 8109 	bhi.w	8005dc6 <_scanf_float+0x29a>
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	b007      	add	sp, #28
 8005bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005bc0:	2a0d      	cmp	r2, #13
 8005bc2:	d8e6      	bhi.n	8005b92 <_scanf_float+0x66>
 8005bc4:	a101      	add	r1, pc, #4	@ (adr r1, 8005bcc <_scanf_float+0xa0>)
 8005bc6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005d13 	.word	0x08005d13
 8005bd0:	08005b93 	.word	0x08005b93
 8005bd4:	08005b93 	.word	0x08005b93
 8005bd8:	08005b93 	.word	0x08005b93
 8005bdc:	08005d73 	.word	0x08005d73
 8005be0:	08005d4b 	.word	0x08005d4b
 8005be4:	08005b93 	.word	0x08005b93
 8005be8:	08005b93 	.word	0x08005b93
 8005bec:	08005d21 	.word	0x08005d21
 8005bf0:	08005b93 	.word	0x08005b93
 8005bf4:	08005b93 	.word	0x08005b93
 8005bf8:	08005b93 	.word	0x08005b93
 8005bfc:	08005b93 	.word	0x08005b93
 8005c00:	08005cd9 	.word	0x08005cd9
 8005c04:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c08:	e7da      	b.n	8005bc0 <_scanf_float+0x94>
 8005c0a:	290e      	cmp	r1, #14
 8005c0c:	d8c1      	bhi.n	8005b92 <_scanf_float+0x66>
 8005c0e:	a001      	add	r0, pc, #4	@ (adr r0, 8005c14 <_scanf_float+0xe8>)
 8005c10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c14:	08005cc9 	.word	0x08005cc9
 8005c18:	08005b93 	.word	0x08005b93
 8005c1c:	08005cc9 	.word	0x08005cc9
 8005c20:	08005d5f 	.word	0x08005d5f
 8005c24:	08005b93 	.word	0x08005b93
 8005c28:	08005c71 	.word	0x08005c71
 8005c2c:	08005caf 	.word	0x08005caf
 8005c30:	08005caf 	.word	0x08005caf
 8005c34:	08005caf 	.word	0x08005caf
 8005c38:	08005caf 	.word	0x08005caf
 8005c3c:	08005caf 	.word	0x08005caf
 8005c40:	08005caf 	.word	0x08005caf
 8005c44:	08005caf 	.word	0x08005caf
 8005c48:	08005caf 	.word	0x08005caf
 8005c4c:	08005caf 	.word	0x08005caf
 8005c50:	2b6e      	cmp	r3, #110	@ 0x6e
 8005c52:	d809      	bhi.n	8005c68 <_scanf_float+0x13c>
 8005c54:	2b60      	cmp	r3, #96	@ 0x60
 8005c56:	d8b1      	bhi.n	8005bbc <_scanf_float+0x90>
 8005c58:	2b54      	cmp	r3, #84	@ 0x54
 8005c5a:	d07b      	beq.n	8005d54 <_scanf_float+0x228>
 8005c5c:	2b59      	cmp	r3, #89	@ 0x59
 8005c5e:	d198      	bne.n	8005b92 <_scanf_float+0x66>
 8005c60:	2d07      	cmp	r5, #7
 8005c62:	d196      	bne.n	8005b92 <_scanf_float+0x66>
 8005c64:	2508      	movs	r5, #8
 8005c66:	e02c      	b.n	8005cc2 <_scanf_float+0x196>
 8005c68:	2b74      	cmp	r3, #116	@ 0x74
 8005c6a:	d073      	beq.n	8005d54 <_scanf_float+0x228>
 8005c6c:	2b79      	cmp	r3, #121	@ 0x79
 8005c6e:	e7f6      	b.n	8005c5e <_scanf_float+0x132>
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	05c8      	lsls	r0, r1, #23
 8005c74:	d51b      	bpl.n	8005cae <_scanf_float+0x182>
 8005c76:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005c7a:	6021      	str	r1, [r4, #0]
 8005c7c:	f109 0901 	add.w	r9, r9, #1
 8005c80:	f1bb 0f00 	cmp.w	fp, #0
 8005c84:	d003      	beq.n	8005c8e <_scanf_float+0x162>
 8005c86:	3201      	adds	r2, #1
 8005c88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c8c:	60a2      	str	r2, [r4, #8]
 8005c8e:	68a3      	ldr	r3, [r4, #8]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	60a3      	str	r3, [r4, #8]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	3301      	adds	r3, #1
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	f340 8087 	ble.w	8005db4 <_scanf_float+0x288>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	e764      	b.n	8005b78 <_scanf_float+0x4c>
 8005cae:	eb1a 0105 	adds.w	r1, sl, r5
 8005cb2:	f47f af6e 	bne.w	8005b92 <_scanf_float+0x66>
 8005cb6:	460d      	mov	r5, r1
 8005cb8:	468a      	mov	sl, r1
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005cc0:	6022      	str	r2, [r4, #0]
 8005cc2:	f806 3b01 	strb.w	r3, [r6], #1
 8005cc6:	e7e2      	b.n	8005c8e <_scanf_float+0x162>
 8005cc8:	6822      	ldr	r2, [r4, #0]
 8005cca:	0610      	lsls	r0, r2, #24
 8005ccc:	f57f af61 	bpl.w	8005b92 <_scanf_float+0x66>
 8005cd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cd4:	6022      	str	r2, [r4, #0]
 8005cd6:	e7f4      	b.n	8005cc2 <_scanf_float+0x196>
 8005cd8:	f1ba 0f00 	cmp.w	sl, #0
 8005cdc:	d10e      	bne.n	8005cfc <_scanf_float+0x1d0>
 8005cde:	f1b9 0f00 	cmp.w	r9, #0
 8005ce2:	d10e      	bne.n	8005d02 <_scanf_float+0x1d6>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005cea:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005cee:	d108      	bne.n	8005d02 <_scanf_float+0x1d6>
 8005cf0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005cf4:	f04f 0a01 	mov.w	sl, #1
 8005cf8:	6022      	str	r2, [r4, #0]
 8005cfa:	e7e2      	b.n	8005cc2 <_scanf_float+0x196>
 8005cfc:	f1ba 0f02 	cmp.w	sl, #2
 8005d00:	d055      	beq.n	8005dae <_scanf_float+0x282>
 8005d02:	2d01      	cmp	r5, #1
 8005d04:	d002      	beq.n	8005d0c <_scanf_float+0x1e0>
 8005d06:	2d04      	cmp	r5, #4
 8005d08:	f47f af43 	bne.w	8005b92 <_scanf_float+0x66>
 8005d0c:	3501      	adds	r5, #1
 8005d0e:	b2ed      	uxtb	r5, r5
 8005d10:	e7d7      	b.n	8005cc2 <_scanf_float+0x196>
 8005d12:	f1ba 0f01 	cmp.w	sl, #1
 8005d16:	f47f af3c 	bne.w	8005b92 <_scanf_float+0x66>
 8005d1a:	f04f 0a02 	mov.w	sl, #2
 8005d1e:	e7d0      	b.n	8005cc2 <_scanf_float+0x196>
 8005d20:	b97d      	cbnz	r5, 8005d42 <_scanf_float+0x216>
 8005d22:	f1b9 0f00 	cmp.w	r9, #0
 8005d26:	f47f af37 	bne.w	8005b98 <_scanf_float+0x6c>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d34:	f040 8103 	bne.w	8005f3e <_scanf_float+0x412>
 8005d38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d3c:	2501      	movs	r5, #1
 8005d3e:	6022      	str	r2, [r4, #0]
 8005d40:	e7bf      	b.n	8005cc2 <_scanf_float+0x196>
 8005d42:	2d03      	cmp	r5, #3
 8005d44:	d0e2      	beq.n	8005d0c <_scanf_float+0x1e0>
 8005d46:	2d05      	cmp	r5, #5
 8005d48:	e7de      	b.n	8005d08 <_scanf_float+0x1dc>
 8005d4a:	2d02      	cmp	r5, #2
 8005d4c:	f47f af21 	bne.w	8005b92 <_scanf_float+0x66>
 8005d50:	2503      	movs	r5, #3
 8005d52:	e7b6      	b.n	8005cc2 <_scanf_float+0x196>
 8005d54:	2d06      	cmp	r5, #6
 8005d56:	f47f af1c 	bne.w	8005b92 <_scanf_float+0x66>
 8005d5a:	2507      	movs	r5, #7
 8005d5c:	e7b1      	b.n	8005cc2 <_scanf_float+0x196>
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	0591      	lsls	r1, r2, #22
 8005d62:	f57f af16 	bpl.w	8005b92 <_scanf_float+0x66>
 8005d66:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d70:	e7a7      	b.n	8005cc2 <_scanf_float+0x196>
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d78:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d7c:	d006      	beq.n	8005d8c <_scanf_float+0x260>
 8005d7e:	0550      	lsls	r0, r2, #21
 8005d80:	f57f af07 	bpl.w	8005b92 <_scanf_float+0x66>
 8005d84:	f1b9 0f00 	cmp.w	r9, #0
 8005d88:	f000 80d9 	beq.w	8005f3e <_scanf_float+0x412>
 8005d8c:	0591      	lsls	r1, r2, #22
 8005d8e:	bf58      	it	pl
 8005d90:	9902      	ldrpl	r1, [sp, #8]
 8005d92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d96:	bf58      	it	pl
 8005d98:	eba9 0101 	subpl.w	r1, r9, r1
 8005d9c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005da0:	f04f 0900 	mov.w	r9, #0
 8005da4:	bf58      	it	pl
 8005da6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005daa:	6022      	str	r2, [r4, #0]
 8005dac:	e789      	b.n	8005cc2 <_scanf_float+0x196>
 8005dae:	f04f 0a03 	mov.w	sl, #3
 8005db2:	e786      	b.n	8005cc2 <_scanf_float+0x196>
 8005db4:	4639      	mov	r1, r7
 8005db6:	4640      	mov	r0, r8
 8005db8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005dbc:	4798      	blx	r3
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f43f aeda 	beq.w	8005b78 <_scanf_float+0x4c>
 8005dc4:	e6e5      	b.n	8005b92 <_scanf_float+0x66>
 8005dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dca:	463a      	mov	r2, r7
 8005dcc:	4640      	mov	r0, r8
 8005dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dd2:	4798      	blx	r3
 8005dd4:	6923      	ldr	r3, [r4, #16]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	e6e7      	b.n	8005bac <_scanf_float+0x80>
 8005ddc:	1e6b      	subs	r3, r5, #1
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d824      	bhi.n	8005e2c <_scanf_float+0x300>
 8005de2:	2d02      	cmp	r5, #2
 8005de4:	d836      	bhi.n	8005e54 <_scanf_float+0x328>
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	429e      	cmp	r6, r3
 8005dea:	f67f aee3 	bls.w	8005bb4 <_scanf_float+0x88>
 8005dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005df2:	463a      	mov	r2, r7
 8005df4:	4640      	mov	r0, r8
 8005df6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dfa:	4798      	blx	r3
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	e7f0      	b.n	8005de6 <_scanf_float+0x2ba>
 8005e04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e08:	463a      	mov	r2, r7
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e10:	4798      	blx	r3
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e1c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e20:	f1ba 0f02 	cmp.w	sl, #2
 8005e24:	d1ee      	bne.n	8005e04 <_scanf_float+0x2d8>
 8005e26:	3d03      	subs	r5, #3
 8005e28:	b2ed      	uxtb	r5, r5
 8005e2a:	1b76      	subs	r6, r6, r5
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	05da      	lsls	r2, r3, #23
 8005e30:	d530      	bpl.n	8005e94 <_scanf_float+0x368>
 8005e32:	055b      	lsls	r3, r3, #21
 8005e34:	d511      	bpl.n	8005e5a <_scanf_float+0x32e>
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	429e      	cmp	r6, r3
 8005e3a:	f67f aebb 	bls.w	8005bb4 <_scanf_float+0x88>
 8005e3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e42:	463a      	mov	r2, r7
 8005e44:	4640      	mov	r0, r8
 8005e46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e4a:	4798      	blx	r3
 8005e4c:	6923      	ldr	r3, [r4, #16]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	e7f0      	b.n	8005e36 <_scanf_float+0x30a>
 8005e54:	46aa      	mov	sl, r5
 8005e56:	46b3      	mov	fp, r6
 8005e58:	e7de      	b.n	8005e18 <_scanf_float+0x2ec>
 8005e5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	2965      	cmp	r1, #101	@ 0x65
 8005e62:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e66:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	d00c      	beq.n	8005e88 <_scanf_float+0x35c>
 8005e6e:	2945      	cmp	r1, #69	@ 0x45
 8005e70:	d00a      	beq.n	8005e88 <_scanf_float+0x35c>
 8005e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e76:	463a      	mov	r2, r7
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4798      	blx	r3
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	1eb5      	subs	r5, r6, #2
 8005e86:	6123      	str	r3, [r4, #16]
 8005e88:	463a      	mov	r2, r7
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e90:	4798      	blx	r3
 8005e92:	462e      	mov	r6, r5
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	f012 0210 	ands.w	r2, r2, #16
 8005e9a:	d001      	beq.n	8005ea0 <_scanf_float+0x374>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e68a      	b.n	8005bb6 <_scanf_float+0x8a>
 8005ea0:	7032      	strb	r2, [r6, #0]
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eac:	d11c      	bne.n	8005ee8 <_scanf_float+0x3bc>
 8005eae:	9b02      	ldr	r3, [sp, #8]
 8005eb0:	454b      	cmp	r3, r9
 8005eb2:	eba3 0209 	sub.w	r2, r3, r9
 8005eb6:	d123      	bne.n	8005f00 <_scanf_float+0x3d4>
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4640      	mov	r0, r8
 8005ebc:	9901      	ldr	r1, [sp, #4]
 8005ebe:	f002 fc27 	bl	8008710 <_strtod_r>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	6825      	ldr	r5, [r4, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f015 0f02 	tst.w	r5, #2
 8005ecc:	4606      	mov	r6, r0
 8005ece:	460f      	mov	r7, r1
 8005ed0:	f103 0204 	add.w	r2, r3, #4
 8005ed4:	d01f      	beq.n	8005f16 <_scanf_float+0x3ea>
 8005ed6:	9903      	ldr	r1, [sp, #12]
 8005ed8:	600a      	str	r2, [r1, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	e9c3 6700 	strd	r6, r7, [r3]
 8005ee0:	68e3      	ldr	r3, [r4, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60e3      	str	r3, [r4, #12]
 8005ee6:	e7d9      	b.n	8005e9c <_scanf_float+0x370>
 8005ee8:	9b04      	ldr	r3, [sp, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0e4      	beq.n	8005eb8 <_scanf_float+0x38c>
 8005eee:	9905      	ldr	r1, [sp, #20]
 8005ef0:	230a      	movs	r3, #10
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	3101      	adds	r1, #1
 8005ef6:	f002 fc8b 	bl	8008810 <_strtol_r>
 8005efa:	9b04      	ldr	r3, [sp, #16]
 8005efc:	9e05      	ldr	r6, [sp, #20]
 8005efe:	1ac2      	subs	r2, r0, r3
 8005f00:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005f04:	429e      	cmp	r6, r3
 8005f06:	bf28      	it	cs
 8005f08:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	490d      	ldr	r1, [pc, #52]	@ (8005f44 <_scanf_float+0x418>)
 8005f10:	f000 f8de 	bl	80060d0 <siprintf>
 8005f14:	e7d0      	b.n	8005eb8 <_scanf_float+0x38c>
 8005f16:	076d      	lsls	r5, r5, #29
 8005f18:	d4dd      	bmi.n	8005ed6 <_scanf_float+0x3aa>
 8005f1a:	9d03      	ldr	r5, [sp, #12]
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	681d      	ldr	r5, [r3, #0]
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	f7fa fd72 	bl	8000a0c <__aeabi_dcmpun>
 8005f28:	b120      	cbz	r0, 8005f34 <_scanf_float+0x408>
 8005f2a:	4807      	ldr	r0, [pc, #28]	@ (8005f48 <_scanf_float+0x41c>)
 8005f2c:	f000 f9fc 	bl	8006328 <nanf>
 8005f30:	6028      	str	r0, [r5, #0]
 8005f32:	e7d5      	b.n	8005ee0 <_scanf_float+0x3b4>
 8005f34:	4630      	mov	r0, r6
 8005f36:	4639      	mov	r1, r7
 8005f38:	f7fa fdc6 	bl	8000ac8 <__aeabi_d2f>
 8005f3c:	e7f8      	b.n	8005f30 <_scanf_float+0x404>
 8005f3e:	f04f 0900 	mov.w	r9, #0
 8005f42:	e62d      	b.n	8005ba0 <_scanf_float+0x74>
 8005f44:	0800a3a0 	.word	0x0800a3a0
 8005f48:	0800a750 	.word	0x0800a750

08005f4c <std>:
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	e9c0 3300 	strd	r3, r3, [r0]
 8005f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f5a:	6083      	str	r3, [r0, #8]
 8005f5c:	8181      	strh	r1, [r0, #12]
 8005f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f60:	81c2      	strh	r2, [r0, #14]
 8005f62:	6183      	str	r3, [r0, #24]
 8005f64:	4619      	mov	r1, r3
 8005f66:	2208      	movs	r2, #8
 8005f68:	305c      	adds	r0, #92	@ 0x5c
 8005f6a:	f000 f940 	bl	80061ee <memset>
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <std+0x58>)
 8005f70:	6224      	str	r4, [r4, #32]
 8005f72:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <std+0x5c>)
 8005f76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f78:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <std+0x60>)
 8005f7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <std+0x64>)
 8005f7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f80:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <std+0x68>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d006      	beq.n	8005f94 <std+0x48>
 8005f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f8a:	4294      	cmp	r4, r2
 8005f8c:	d002      	beq.n	8005f94 <std+0x48>
 8005f8e:	33d0      	adds	r3, #208	@ 0xd0
 8005f90:	429c      	cmp	r4, r3
 8005f92:	d105      	bne.n	8005fa0 <std+0x54>
 8005f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f9c:	f000 b9a4 	b.w	80062e8 <__retarget_lock_init_recursive>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	bf00      	nop
 8005fa4:	08006165 	.word	0x08006165
 8005fa8:	0800618b 	.word	0x0800618b
 8005fac:	080061c3 	.word	0x080061c3
 8005fb0:	080061e7 	.word	0x080061e7
 8005fb4:	20000a64 	.word	0x20000a64

08005fb8 <stdio_exit_handler>:
 8005fb8:	4a02      	ldr	r2, [pc, #8]	@ (8005fc4 <stdio_exit_handler+0xc>)
 8005fba:	4903      	ldr	r1, [pc, #12]	@ (8005fc8 <stdio_exit_handler+0x10>)
 8005fbc:	4803      	ldr	r0, [pc, #12]	@ (8005fcc <stdio_exit_handler+0x14>)
 8005fbe:	f000 b869 	b.w	8006094 <_fwalk_sglue>
 8005fc2:	bf00      	nop
 8005fc4:	2000009c 	.word	0x2000009c
 8005fc8:	080091f1 	.word	0x080091f1
 8005fcc:	200000ac 	.word	0x200000ac

08005fd0 <cleanup_stdio>:
 8005fd0:	6841      	ldr	r1, [r0, #4]
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <cleanup_stdio+0x34>)
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	4299      	cmp	r1, r3
 8005fd8:	4604      	mov	r4, r0
 8005fda:	d001      	beq.n	8005fe0 <cleanup_stdio+0x10>
 8005fdc:	f003 f908 	bl	80091f0 <_fflush_r>
 8005fe0:	68a1      	ldr	r1, [r4, #8]
 8005fe2:	4b09      	ldr	r3, [pc, #36]	@ (8006008 <cleanup_stdio+0x38>)
 8005fe4:	4299      	cmp	r1, r3
 8005fe6:	d002      	beq.n	8005fee <cleanup_stdio+0x1e>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f003 f901 	bl	80091f0 <_fflush_r>
 8005fee:	68e1      	ldr	r1, [r4, #12]
 8005ff0:	4b06      	ldr	r3, [pc, #24]	@ (800600c <cleanup_stdio+0x3c>)
 8005ff2:	4299      	cmp	r1, r3
 8005ff4:	d004      	beq.n	8006000 <cleanup_stdio+0x30>
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ffc:	f003 b8f8 	b.w	80091f0 <_fflush_r>
 8006000:	bd10      	pop	{r4, pc}
 8006002:	bf00      	nop
 8006004:	20000a64 	.word	0x20000a64
 8006008:	20000acc 	.word	0x20000acc
 800600c:	20000b34 	.word	0x20000b34

08006010 <global_stdio_init.part.0>:
 8006010:	b510      	push	{r4, lr}
 8006012:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <global_stdio_init.part.0+0x30>)
 8006014:	4c0b      	ldr	r4, [pc, #44]	@ (8006044 <global_stdio_init.part.0+0x34>)
 8006016:	4a0c      	ldr	r2, [pc, #48]	@ (8006048 <global_stdio_init.part.0+0x38>)
 8006018:	4620      	mov	r0, r4
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	2104      	movs	r1, #4
 800601e:	2200      	movs	r2, #0
 8006020:	f7ff ff94 	bl	8005f4c <std>
 8006024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006028:	2201      	movs	r2, #1
 800602a:	2109      	movs	r1, #9
 800602c:	f7ff ff8e 	bl	8005f4c <std>
 8006030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006034:	2202      	movs	r2, #2
 8006036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800603a:	2112      	movs	r1, #18
 800603c:	f7ff bf86 	b.w	8005f4c <std>
 8006040:	20000b9c 	.word	0x20000b9c
 8006044:	20000a64 	.word	0x20000a64
 8006048:	08005fb9 	.word	0x08005fb9

0800604c <__sfp_lock_acquire>:
 800604c:	4801      	ldr	r0, [pc, #4]	@ (8006054 <__sfp_lock_acquire+0x8>)
 800604e:	f000 b94c 	b.w	80062ea <__retarget_lock_acquire_recursive>
 8006052:	bf00      	nop
 8006054:	20000ba5 	.word	0x20000ba5

08006058 <__sfp_lock_release>:
 8006058:	4801      	ldr	r0, [pc, #4]	@ (8006060 <__sfp_lock_release+0x8>)
 800605a:	f000 b947 	b.w	80062ec <__retarget_lock_release_recursive>
 800605e:	bf00      	nop
 8006060:	20000ba5 	.word	0x20000ba5

08006064 <__sinit>:
 8006064:	b510      	push	{r4, lr}
 8006066:	4604      	mov	r4, r0
 8006068:	f7ff fff0 	bl	800604c <__sfp_lock_acquire>
 800606c:	6a23      	ldr	r3, [r4, #32]
 800606e:	b11b      	cbz	r3, 8006078 <__sinit+0x14>
 8006070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006074:	f7ff bff0 	b.w	8006058 <__sfp_lock_release>
 8006078:	4b04      	ldr	r3, [pc, #16]	@ (800608c <__sinit+0x28>)
 800607a:	6223      	str	r3, [r4, #32]
 800607c:	4b04      	ldr	r3, [pc, #16]	@ (8006090 <__sinit+0x2c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f5      	bne.n	8006070 <__sinit+0xc>
 8006084:	f7ff ffc4 	bl	8006010 <global_stdio_init.part.0>
 8006088:	e7f2      	b.n	8006070 <__sinit+0xc>
 800608a:	bf00      	nop
 800608c:	08005fd1 	.word	0x08005fd1
 8006090:	20000b9c 	.word	0x20000b9c

08006094 <_fwalk_sglue>:
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	4607      	mov	r7, r0
 800609a:	4688      	mov	r8, r1
 800609c:	4614      	mov	r4, r2
 800609e:	2600      	movs	r6, #0
 80060a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060a4:	f1b9 0901 	subs.w	r9, r9, #1
 80060a8:	d505      	bpl.n	80060b6 <_fwalk_sglue+0x22>
 80060aa:	6824      	ldr	r4, [r4, #0]
 80060ac:	2c00      	cmp	r4, #0
 80060ae:	d1f7      	bne.n	80060a0 <_fwalk_sglue+0xc>
 80060b0:	4630      	mov	r0, r6
 80060b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d907      	bls.n	80060cc <_fwalk_sglue+0x38>
 80060bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060c0:	3301      	adds	r3, #1
 80060c2:	d003      	beq.n	80060cc <_fwalk_sglue+0x38>
 80060c4:	4629      	mov	r1, r5
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c0      	blx	r8
 80060ca:	4306      	orrs	r6, r0
 80060cc:	3568      	adds	r5, #104	@ 0x68
 80060ce:	e7e9      	b.n	80060a4 <_fwalk_sglue+0x10>

080060d0 <siprintf>:
 80060d0:	b40e      	push	{r1, r2, r3}
 80060d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060d6:	b500      	push	{lr}
 80060d8:	b09c      	sub	sp, #112	@ 0x70
 80060da:	ab1d      	add	r3, sp, #116	@ 0x74
 80060dc:	9002      	str	r0, [sp, #8]
 80060de:	9006      	str	r0, [sp, #24]
 80060e0:	9107      	str	r1, [sp, #28]
 80060e2:	9104      	str	r1, [sp, #16]
 80060e4:	4808      	ldr	r0, [pc, #32]	@ (8006108 <siprintf+0x38>)
 80060e6:	4909      	ldr	r1, [pc, #36]	@ (800610c <siprintf+0x3c>)
 80060e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ec:	9105      	str	r1, [sp, #20]
 80060ee:	6800      	ldr	r0, [r0, #0]
 80060f0:	a902      	add	r1, sp, #8
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	f002 fbea 	bl	80088cc <_svfiprintf_r>
 80060f8:	2200      	movs	r2, #0
 80060fa:	9b02      	ldr	r3, [sp, #8]
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	b01c      	add	sp, #112	@ 0x70
 8006100:	f85d eb04 	ldr.w	lr, [sp], #4
 8006104:	b003      	add	sp, #12
 8006106:	4770      	bx	lr
 8006108:	200000a8 	.word	0x200000a8
 800610c:	ffff0208 	.word	0xffff0208

08006110 <siscanf>:
 8006110:	b40e      	push	{r1, r2, r3}
 8006112:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006116:	b530      	push	{r4, r5, lr}
 8006118:	b09c      	sub	sp, #112	@ 0x70
 800611a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800611c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006120:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006124:	9002      	str	r0, [sp, #8]
 8006126:	9006      	str	r0, [sp, #24]
 8006128:	f7fa f812 	bl	8000150 <strlen>
 800612c:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <siscanf+0x4c>)
 800612e:	9003      	str	r0, [sp, #12]
 8006130:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006132:	2300      	movs	r3, #0
 8006134:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006136:	9314      	str	r3, [sp, #80]	@ 0x50
 8006138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800613c:	9007      	str	r0, [sp, #28]
 800613e:	4808      	ldr	r0, [pc, #32]	@ (8006160 <siscanf+0x50>)
 8006140:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006144:	462a      	mov	r2, r5
 8006146:	4623      	mov	r3, r4
 8006148:	a902      	add	r1, sp, #8
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	9401      	str	r4, [sp, #4]
 800614e:	f002 fd11 	bl	8008b74 <__ssvfiscanf_r>
 8006152:	b01c      	add	sp, #112	@ 0x70
 8006154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006158:	b003      	add	sp, #12
 800615a:	4770      	bx	lr
 800615c:	08006187 	.word	0x08006187
 8006160:	200000a8 	.word	0x200000a8

08006164 <__sread>:
 8006164:	b510      	push	{r4, lr}
 8006166:	460c      	mov	r4, r1
 8006168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616c:	f000 f86e 	bl	800624c <_read_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	bfab      	itete	ge
 8006174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006176:	89a3      	ldrhlt	r3, [r4, #12]
 8006178:	181b      	addge	r3, r3, r0
 800617a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800617e:	bfac      	ite	ge
 8006180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006182:	81a3      	strhlt	r3, [r4, #12]
 8006184:	bd10      	pop	{r4, pc}

08006186 <__seofread>:
 8006186:	2000      	movs	r0, #0
 8006188:	4770      	bx	lr

0800618a <__swrite>:
 800618a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	461f      	mov	r7, r3
 8006190:	898b      	ldrh	r3, [r1, #12]
 8006192:	4605      	mov	r5, r0
 8006194:	05db      	lsls	r3, r3, #23
 8006196:	460c      	mov	r4, r1
 8006198:	4616      	mov	r6, r2
 800619a:	d505      	bpl.n	80061a8 <__swrite+0x1e>
 800619c:	2302      	movs	r3, #2
 800619e:	2200      	movs	r2, #0
 80061a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a4:	f000 f840 	bl	8006228 <_lseek_r>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	4632      	mov	r2, r6
 80061ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	4628      	mov	r0, r5
 80061b4:	463b      	mov	r3, r7
 80061b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061be:	f000 b857 	b.w	8006270 <_write_r>

080061c2 <__sseek>:
 80061c2:	b510      	push	{r4, lr}
 80061c4:	460c      	mov	r4, r1
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 f82d 	bl	8006228 <_lseek_r>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	bf15      	itete	ne
 80061d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061de:	81a3      	strheq	r3, [r4, #12]
 80061e0:	bf18      	it	ne
 80061e2:	81a3      	strhne	r3, [r4, #12]
 80061e4:	bd10      	pop	{r4, pc}

080061e6 <__sclose>:
 80061e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ea:	f000 b80d 	b.w	8006208 <_close_r>

080061ee <memset>:
 80061ee:	4603      	mov	r3, r0
 80061f0:	4402      	add	r2, r0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d100      	bne.n	80061f8 <memset+0xa>
 80061f6:	4770      	bx	lr
 80061f8:	f803 1b01 	strb.w	r1, [r3], #1
 80061fc:	e7f9      	b.n	80061f2 <memset+0x4>
	...

08006200 <_localeconv_r>:
 8006200:	4800      	ldr	r0, [pc, #0]	@ (8006204 <_localeconv_r+0x4>)
 8006202:	4770      	bx	lr
 8006204:	200001e8 	.word	0x200001e8

08006208 <_close_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	2300      	movs	r3, #0
 800620c:	4d05      	ldr	r5, [pc, #20]	@ (8006224 <_close_r+0x1c>)
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fb ff99 	bl	800214a <_close>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_close_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_close_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20000ba0 	.word	0x20000ba0

08006228 <_lseek_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	2200      	movs	r2, #0
 8006232:	4d05      	ldr	r5, [pc, #20]	@ (8006248 <_lseek_r+0x20>)
 8006234:	602a      	str	r2, [r5, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	f7fb ffab 	bl	8002192 <_lseek>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_lseek_r+0x1e>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_lseek_r+0x1e>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000ba0 	.word	0x20000ba0

0800624c <_read_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	2200      	movs	r2, #0
 8006256:	4d05      	ldr	r5, [pc, #20]	@ (800626c <_read_r+0x20>)
 8006258:	602a      	str	r2, [r5, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f7fb ff3c 	bl	80020d8 <_read>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_read_r+0x1e>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_read_r+0x1e>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20000ba0 	.word	0x20000ba0

08006270 <_write_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	2200      	movs	r2, #0
 800627a:	4d05      	ldr	r5, [pc, #20]	@ (8006290 <_write_r+0x20>)
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fb ff47 	bl	8002112 <_write>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_write_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_write_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000ba0 	.word	0x20000ba0

08006294 <__errno>:
 8006294:	4b01      	ldr	r3, [pc, #4]	@ (800629c <__errno+0x8>)
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	200000a8 	.word	0x200000a8

080062a0 <__libc_init_array>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	2600      	movs	r6, #0
 80062a4:	4d0c      	ldr	r5, [pc, #48]	@ (80062d8 <__libc_init_array+0x38>)
 80062a6:	4c0d      	ldr	r4, [pc, #52]	@ (80062dc <__libc_init_array+0x3c>)
 80062a8:	1b64      	subs	r4, r4, r5
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	42a6      	cmp	r6, r4
 80062ae:	d109      	bne.n	80062c4 <__libc_init_array+0x24>
 80062b0:	f003 ff60 	bl	800a174 <_init>
 80062b4:	2600      	movs	r6, #0
 80062b6:	4d0a      	ldr	r5, [pc, #40]	@ (80062e0 <__libc_init_array+0x40>)
 80062b8:	4c0a      	ldr	r4, [pc, #40]	@ (80062e4 <__libc_init_array+0x44>)
 80062ba:	1b64      	subs	r4, r4, r5
 80062bc:	10a4      	asrs	r4, r4, #2
 80062be:	42a6      	cmp	r6, r4
 80062c0:	d105      	bne.n	80062ce <__libc_init_array+0x2e>
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c8:	4798      	blx	r3
 80062ca:	3601      	adds	r6, #1
 80062cc:	e7ee      	b.n	80062ac <__libc_init_array+0xc>
 80062ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d2:	4798      	blx	r3
 80062d4:	3601      	adds	r6, #1
 80062d6:	e7f2      	b.n	80062be <__libc_init_array+0x1e>
 80062d8:	0800a7bc 	.word	0x0800a7bc
 80062dc:	0800a7bc 	.word	0x0800a7bc
 80062e0:	0800a7bc 	.word	0x0800a7bc
 80062e4:	0800a7c0 	.word	0x0800a7c0

080062e8 <__retarget_lock_init_recursive>:
 80062e8:	4770      	bx	lr

080062ea <__retarget_lock_acquire_recursive>:
 80062ea:	4770      	bx	lr

080062ec <__retarget_lock_release_recursive>:
 80062ec:	4770      	bx	lr

080062ee <memchr>:
 80062ee:	4603      	mov	r3, r0
 80062f0:	b510      	push	{r4, lr}
 80062f2:	b2c9      	uxtb	r1, r1
 80062f4:	4402      	add	r2, r0
 80062f6:	4293      	cmp	r3, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	d101      	bne.n	8006300 <memchr+0x12>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e003      	b.n	8006308 <memchr+0x1a>
 8006300:	7804      	ldrb	r4, [r0, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	428c      	cmp	r4, r1
 8006306:	d1f6      	bne.n	80062f6 <memchr+0x8>
 8006308:	bd10      	pop	{r4, pc}

0800630a <memcpy>:
 800630a:	440a      	add	r2, r1
 800630c:	4291      	cmp	r1, r2
 800630e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006312:	d100      	bne.n	8006316 <memcpy+0xc>
 8006314:	4770      	bx	lr
 8006316:	b510      	push	{r4, lr}
 8006318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800631c:	4291      	cmp	r1, r2
 800631e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006322:	d1f9      	bne.n	8006318 <memcpy+0xe>
 8006324:	bd10      	pop	{r4, pc}
	...

08006328 <nanf>:
 8006328:	4800      	ldr	r0, [pc, #0]	@ (800632c <nanf+0x4>)
 800632a:	4770      	bx	lr
 800632c:	7fc00000 	.word	0x7fc00000

08006330 <quorem>:
 8006330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	6903      	ldr	r3, [r0, #16]
 8006336:	690c      	ldr	r4, [r1, #16]
 8006338:	4607      	mov	r7, r0
 800633a:	42a3      	cmp	r3, r4
 800633c:	db7e      	blt.n	800643c <quorem+0x10c>
 800633e:	3c01      	subs	r4, #1
 8006340:	00a3      	lsls	r3, r4, #2
 8006342:	f100 0514 	add.w	r5, r0, #20
 8006346:	f101 0814 	add.w	r8, r1, #20
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800635a:	3301      	adds	r3, #1
 800635c:	429a      	cmp	r2, r3
 800635e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006362:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006366:	d32e      	bcc.n	80063c6 <quorem+0x96>
 8006368:	f04f 0a00 	mov.w	sl, #0
 800636c:	46c4      	mov	ip, r8
 800636e:	46ae      	mov	lr, r5
 8006370:	46d3      	mov	fp, sl
 8006372:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006376:	b298      	uxth	r0, r3
 8006378:	fb06 a000 	mla	r0, r6, r0, sl
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	0c02      	lsrs	r2, r0, #16
 8006380:	fb06 2303 	mla	r3, r6, r3, r2
 8006384:	f8de 2000 	ldr.w	r2, [lr]
 8006388:	b280      	uxth	r0, r0
 800638a:	b292      	uxth	r2, r2
 800638c:	1a12      	subs	r2, r2, r0
 800638e:	445a      	add	r2, fp
 8006390:	f8de 0000 	ldr.w	r0, [lr]
 8006394:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006398:	b29b      	uxth	r3, r3
 800639a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800639e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063a2:	b292      	uxth	r2, r2
 80063a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063a8:	45e1      	cmp	r9, ip
 80063aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063ae:	f84e 2b04 	str.w	r2, [lr], #4
 80063b2:	d2de      	bcs.n	8006372 <quorem+0x42>
 80063b4:	9b00      	ldr	r3, [sp, #0]
 80063b6:	58eb      	ldr	r3, [r5, r3]
 80063b8:	b92b      	cbnz	r3, 80063c6 <quorem+0x96>
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	3b04      	subs	r3, #4
 80063be:	429d      	cmp	r5, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	d32f      	bcc.n	8006424 <quorem+0xf4>
 80063c4:	613c      	str	r4, [r7, #16]
 80063c6:	4638      	mov	r0, r7
 80063c8:	f001 f9c2 	bl	8007750 <__mcmp>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	db25      	blt.n	800641c <quorem+0xec>
 80063d0:	4629      	mov	r1, r5
 80063d2:	2000      	movs	r0, #0
 80063d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80063d8:	f8d1 c000 	ldr.w	ip, [r1]
 80063dc:	fa1f fe82 	uxth.w	lr, r2
 80063e0:	fa1f f38c 	uxth.w	r3, ip
 80063e4:	eba3 030e 	sub.w	r3, r3, lr
 80063e8:	4403      	add	r3, r0
 80063ea:	0c12      	lsrs	r2, r2, #16
 80063ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80063f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fa:	45c1      	cmp	r9, r8
 80063fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006400:	f841 3b04 	str.w	r3, [r1], #4
 8006404:	d2e6      	bcs.n	80063d4 <quorem+0xa4>
 8006406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800640a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800640e:	b922      	cbnz	r2, 800641a <quorem+0xea>
 8006410:	3b04      	subs	r3, #4
 8006412:	429d      	cmp	r5, r3
 8006414:	461a      	mov	r2, r3
 8006416:	d30b      	bcc.n	8006430 <quorem+0x100>
 8006418:	613c      	str	r4, [r7, #16]
 800641a:	3601      	adds	r6, #1
 800641c:	4630      	mov	r0, r6
 800641e:	b003      	add	sp, #12
 8006420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	3b04      	subs	r3, #4
 8006428:	2a00      	cmp	r2, #0
 800642a:	d1cb      	bne.n	80063c4 <quorem+0x94>
 800642c:	3c01      	subs	r4, #1
 800642e:	e7c6      	b.n	80063be <quorem+0x8e>
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	3b04      	subs	r3, #4
 8006434:	2a00      	cmp	r2, #0
 8006436:	d1ef      	bne.n	8006418 <quorem+0xe8>
 8006438:	3c01      	subs	r4, #1
 800643a:	e7ea      	b.n	8006412 <quorem+0xe2>
 800643c:	2000      	movs	r0, #0
 800643e:	e7ee      	b.n	800641e <quorem+0xee>

08006440 <_dtoa_r>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	4614      	mov	r4, r2
 8006446:	461d      	mov	r5, r3
 8006448:	69c7      	ldr	r7, [r0, #28]
 800644a:	b097      	sub	sp, #92	@ 0x5c
 800644c:	4683      	mov	fp, r0
 800644e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006452:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006454:	b97f      	cbnz	r7, 8006476 <_dtoa_r+0x36>
 8006456:	2010      	movs	r0, #16
 8006458:	f000 fe02 	bl	8007060 <malloc>
 800645c:	4602      	mov	r2, r0
 800645e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006462:	b920      	cbnz	r0, 800646e <_dtoa_r+0x2e>
 8006464:	21ef      	movs	r1, #239	@ 0xef
 8006466:	4ba8      	ldr	r3, [pc, #672]	@ (8006708 <_dtoa_r+0x2c8>)
 8006468:	48a8      	ldr	r0, [pc, #672]	@ (800670c <_dtoa_r+0x2cc>)
 800646a:	f002 ff9d 	bl	80093a8 <__assert_func>
 800646e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006472:	6007      	str	r7, [r0, #0]
 8006474:	60c7      	str	r7, [r0, #12]
 8006476:	f8db 301c 	ldr.w	r3, [fp, #28]
 800647a:	6819      	ldr	r1, [r3, #0]
 800647c:	b159      	cbz	r1, 8006496 <_dtoa_r+0x56>
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	2301      	movs	r3, #1
 8006482:	4093      	lsls	r3, r2
 8006484:	604a      	str	r2, [r1, #4]
 8006486:	608b      	str	r3, [r1, #8]
 8006488:	4658      	mov	r0, fp
 800648a:	f000 fedf 	bl	800724c <_Bfree>
 800648e:	2200      	movs	r2, #0
 8006490:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	1e2b      	subs	r3, r5, #0
 8006498:	bfaf      	iteee	ge
 800649a:	2300      	movge	r3, #0
 800649c:	2201      	movlt	r2, #1
 800649e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064a2:	9303      	strlt	r3, [sp, #12]
 80064a4:	bfa8      	it	ge
 80064a6:	6033      	strge	r3, [r6, #0]
 80064a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064ac:	4b98      	ldr	r3, [pc, #608]	@ (8006710 <_dtoa_r+0x2d0>)
 80064ae:	bfb8      	it	lt
 80064b0:	6032      	strlt	r2, [r6, #0]
 80064b2:	ea33 0308 	bics.w	r3, r3, r8
 80064b6:	d112      	bne.n	80064de <_dtoa_r+0x9e>
 80064b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80064c4:	4323      	orrs	r3, r4
 80064c6:	f000 8550 	beq.w	8006f6a <_dtoa_r+0xb2a>
 80064ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006714 <_dtoa_r+0x2d4>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8552 	beq.w	8006f7a <_dtoa_r+0xb3a>
 80064d6:	f10a 0303 	add.w	r3, sl, #3
 80064da:	f000 bd4c 	b.w	8006f76 <_dtoa_r+0xb36>
 80064de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ea:	2200      	movs	r2, #0
 80064ec:	2300      	movs	r3, #0
 80064ee:	f7fa fa5b 	bl	80009a8 <__aeabi_dcmpeq>
 80064f2:	4607      	mov	r7, r0
 80064f4:	b158      	cbz	r0, 800650e <_dtoa_r+0xce>
 80064f6:	2301      	movs	r3, #1
 80064f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064fe:	b113      	cbz	r3, 8006506 <_dtoa_r+0xc6>
 8006500:	4b85      	ldr	r3, [pc, #532]	@ (8006718 <_dtoa_r+0x2d8>)
 8006502:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800671c <_dtoa_r+0x2dc>
 800650a:	f000 bd36 	b.w	8006f7a <_dtoa_r+0xb3a>
 800650e:	ab14      	add	r3, sp, #80	@ 0x50
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	ab15      	add	r3, sp, #84	@ 0x54
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	4658      	mov	r0, fp
 8006518:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800651c:	f001 fa30 	bl	8007980 <__d2b>
 8006520:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006524:	4681      	mov	r9, r0
 8006526:	2e00      	cmp	r6, #0
 8006528:	d077      	beq.n	800661a <_dtoa_r+0x1da>
 800652a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800652e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006530:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006538:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800653c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006540:	9712      	str	r7, [sp, #72]	@ 0x48
 8006542:	4619      	mov	r1, r3
 8006544:	2200      	movs	r2, #0
 8006546:	4b76      	ldr	r3, [pc, #472]	@ (8006720 <_dtoa_r+0x2e0>)
 8006548:	f7f9 fe0e 	bl	8000168 <__aeabi_dsub>
 800654c:	a368      	add	r3, pc, #416	@ (adr r3, 80066f0 <_dtoa_r+0x2b0>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7f9 ffc1 	bl	80004d8 <__aeabi_dmul>
 8006556:	a368      	add	r3, pc, #416	@ (adr r3, 80066f8 <_dtoa_r+0x2b8>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fe06 	bl	800016c <__adddf3>
 8006560:	4604      	mov	r4, r0
 8006562:	4630      	mov	r0, r6
 8006564:	460d      	mov	r5, r1
 8006566:	f7f9 ff4d 	bl	8000404 <__aeabi_i2d>
 800656a:	a365      	add	r3, pc, #404	@ (adr r3, 8006700 <_dtoa_r+0x2c0>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 ffb2 	bl	80004d8 <__aeabi_dmul>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4620      	mov	r0, r4
 800657a:	4629      	mov	r1, r5
 800657c:	f7f9 fdf6 	bl	800016c <__adddf3>
 8006580:	4604      	mov	r4, r0
 8006582:	460d      	mov	r5, r1
 8006584:	f7fa fa58 	bl	8000a38 <__aeabi_d2iz>
 8006588:	2200      	movs	r2, #0
 800658a:	4607      	mov	r7, r0
 800658c:	2300      	movs	r3, #0
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa fa13 	bl	80009bc <__aeabi_dcmplt>
 8006596:	b140      	cbz	r0, 80065aa <_dtoa_r+0x16a>
 8006598:	4638      	mov	r0, r7
 800659a:	f7f9 ff33 	bl	8000404 <__aeabi_i2d>
 800659e:	4622      	mov	r2, r4
 80065a0:	462b      	mov	r3, r5
 80065a2:	f7fa fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80065a6:	b900      	cbnz	r0, 80065aa <_dtoa_r+0x16a>
 80065a8:	3f01      	subs	r7, #1
 80065aa:	2f16      	cmp	r7, #22
 80065ac:	d853      	bhi.n	8006656 <_dtoa_r+0x216>
 80065ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006724 <_dtoa_r+0x2e4>)
 80065b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7fa f9fe 	bl	80009bc <__aeabi_dcmplt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d04a      	beq.n	800665a <_dtoa_r+0x21a>
 80065c4:	2300      	movs	r3, #0
 80065c6:	3f01      	subs	r7, #1
 80065c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065cc:	1b9b      	subs	r3, r3, r6
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	bf46      	itte	mi
 80065d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80065d6:	2300      	movmi	r3, #0
 80065d8:	f04f 0800 	movpl.w	r8, #0
 80065dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80065de:	bf48      	it	mi
 80065e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80065e2:	2f00      	cmp	r7, #0
 80065e4:	db3b      	blt.n	800665e <_dtoa_r+0x21e>
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	970e      	str	r7, [sp, #56]	@ 0x38
 80065ea:	443b      	add	r3, r7
 80065ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ee:	2300      	movs	r3, #0
 80065f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d866      	bhi.n	80066c6 <_dtoa_r+0x286>
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	bfc4      	itt	gt
 80065fc:	3b04      	subgt	r3, #4
 80065fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006600:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006602:	bfc8      	it	gt
 8006604:	2400      	movgt	r4, #0
 8006606:	f1a3 0302 	sub.w	r3, r3, #2
 800660a:	bfd8      	it	le
 800660c:	2401      	movle	r4, #1
 800660e:	2b03      	cmp	r3, #3
 8006610:	d864      	bhi.n	80066dc <_dtoa_r+0x29c>
 8006612:	e8df f003 	tbb	[pc, r3]
 8006616:	382b      	.short	0x382b
 8006618:	5636      	.short	0x5636
 800661a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800661e:	441e      	add	r6, r3
 8006620:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006624:	2b20      	cmp	r3, #32
 8006626:	bfc1      	itttt	gt
 8006628:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800662c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006630:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006634:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006638:	bfd6      	itet	le
 800663a:	f1c3 0320 	rsble	r3, r3, #32
 800663e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006642:	fa04 f003 	lslle.w	r0, r4, r3
 8006646:	f7f9 fecd 	bl	80003e4 <__aeabi_ui2d>
 800664a:	2201      	movs	r2, #1
 800664c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006650:	3e01      	subs	r6, #1
 8006652:	9212      	str	r2, [sp, #72]	@ 0x48
 8006654:	e775      	b.n	8006542 <_dtoa_r+0x102>
 8006656:	2301      	movs	r3, #1
 8006658:	e7b6      	b.n	80065c8 <_dtoa_r+0x188>
 800665a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800665c:	e7b5      	b.n	80065ca <_dtoa_r+0x18a>
 800665e:	427b      	negs	r3, r7
 8006660:	930a      	str	r3, [sp, #40]	@ 0x28
 8006662:	2300      	movs	r3, #0
 8006664:	eba8 0807 	sub.w	r8, r8, r7
 8006668:	930e      	str	r3, [sp, #56]	@ 0x38
 800666a:	e7c2      	b.n	80065f2 <_dtoa_r+0x1b2>
 800666c:	2300      	movs	r3, #0
 800666e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006670:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006672:	2b00      	cmp	r3, #0
 8006674:	dc35      	bgt.n	80066e2 <_dtoa_r+0x2a2>
 8006676:	2301      	movs	r3, #1
 8006678:	461a      	mov	r2, r3
 800667a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800667e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006680:	e00b      	b.n	800669a <_dtoa_r+0x25a>
 8006682:	2301      	movs	r3, #1
 8006684:	e7f3      	b.n	800666e <_dtoa_r+0x22e>
 8006686:	2300      	movs	r3, #0
 8006688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800668a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	9308      	str	r3, [sp, #32]
 8006690:	3301      	adds	r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	9307      	str	r3, [sp, #28]
 8006696:	bfb8      	it	lt
 8006698:	2301      	movlt	r3, #1
 800669a:	2100      	movs	r1, #0
 800669c:	2204      	movs	r2, #4
 800669e:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066a2:	f102 0514 	add.w	r5, r2, #20
 80066a6:	429d      	cmp	r5, r3
 80066a8:	d91f      	bls.n	80066ea <_dtoa_r+0x2aa>
 80066aa:	6041      	str	r1, [r0, #4]
 80066ac:	4658      	mov	r0, fp
 80066ae:	f000 fd8d 	bl	80071cc <_Balloc>
 80066b2:	4682      	mov	sl, r0
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d139      	bne.n	800672c <_dtoa_r+0x2ec>
 80066b8:	4602      	mov	r2, r0
 80066ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80066be:	4b1a      	ldr	r3, [pc, #104]	@ (8006728 <_dtoa_r+0x2e8>)
 80066c0:	e6d2      	b.n	8006468 <_dtoa_r+0x28>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7e0      	b.n	8006688 <_dtoa_r+0x248>
 80066c6:	2401      	movs	r4, #1
 80066c8:	2300      	movs	r3, #0
 80066ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80066cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80066ce:	f04f 33ff 	mov.w	r3, #4294967295
 80066d2:	2200      	movs	r2, #0
 80066d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066d8:	2312      	movs	r3, #18
 80066da:	e7d0      	b.n	800667e <_dtoa_r+0x23e>
 80066dc:	2301      	movs	r3, #1
 80066de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066e0:	e7f5      	b.n	80066ce <_dtoa_r+0x28e>
 80066e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066e8:	e7d7      	b.n	800669a <_dtoa_r+0x25a>
 80066ea:	3101      	adds	r1, #1
 80066ec:	0052      	lsls	r2, r2, #1
 80066ee:	e7d8      	b.n	80066a2 <_dtoa_r+0x262>
 80066f0:	636f4361 	.word	0x636f4361
 80066f4:	3fd287a7 	.word	0x3fd287a7
 80066f8:	8b60c8b3 	.word	0x8b60c8b3
 80066fc:	3fc68a28 	.word	0x3fc68a28
 8006700:	509f79fb 	.word	0x509f79fb
 8006704:	3fd34413 	.word	0x3fd34413
 8006708:	0800a3b2 	.word	0x0800a3b2
 800670c:	0800a3c9 	.word	0x0800a3c9
 8006710:	7ff00000 	.word	0x7ff00000
 8006714:	0800a3ae 	.word	0x0800a3ae
 8006718:	0800a709 	.word	0x0800a709
 800671c:	0800a708 	.word	0x0800a708
 8006720:	3ff80000 	.word	0x3ff80000
 8006724:	0800a4c0 	.word	0x0800a4c0
 8006728:	0800a421 	.word	0x0800a421
 800672c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006730:	6018      	str	r0, [r3, #0]
 8006732:	9b07      	ldr	r3, [sp, #28]
 8006734:	2b0e      	cmp	r3, #14
 8006736:	f200 80a4 	bhi.w	8006882 <_dtoa_r+0x442>
 800673a:	2c00      	cmp	r4, #0
 800673c:	f000 80a1 	beq.w	8006882 <_dtoa_r+0x442>
 8006740:	2f00      	cmp	r7, #0
 8006742:	dd33      	ble.n	80067ac <_dtoa_r+0x36c>
 8006744:	4b86      	ldr	r3, [pc, #536]	@ (8006960 <_dtoa_r+0x520>)
 8006746:	f007 020f 	and.w	r2, r7, #15
 800674a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800674e:	05f8      	lsls	r0, r7, #23
 8006750:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006754:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006758:	ea4f 1427 	mov.w	r4, r7, asr #4
 800675c:	d516      	bpl.n	800678c <_dtoa_r+0x34c>
 800675e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006762:	4b80      	ldr	r3, [pc, #512]	@ (8006964 <_dtoa_r+0x524>)
 8006764:	2603      	movs	r6, #3
 8006766:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800676a:	f7f9 ffdf 	bl	800072c <__aeabi_ddiv>
 800676e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006772:	f004 040f 	and.w	r4, r4, #15
 8006776:	4d7b      	ldr	r5, [pc, #492]	@ (8006964 <_dtoa_r+0x524>)
 8006778:	b954      	cbnz	r4, 8006790 <_dtoa_r+0x350>
 800677a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800677e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006782:	f7f9 ffd3 	bl	800072c <__aeabi_ddiv>
 8006786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800678a:	e028      	b.n	80067de <_dtoa_r+0x39e>
 800678c:	2602      	movs	r6, #2
 800678e:	e7f2      	b.n	8006776 <_dtoa_r+0x336>
 8006790:	07e1      	lsls	r1, r4, #31
 8006792:	d508      	bpl.n	80067a6 <_dtoa_r+0x366>
 8006794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006798:	e9d5 2300 	ldrd	r2, r3, [r5]
 800679c:	f7f9 fe9c 	bl	80004d8 <__aeabi_dmul>
 80067a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a4:	3601      	adds	r6, #1
 80067a6:	1064      	asrs	r4, r4, #1
 80067a8:	3508      	adds	r5, #8
 80067aa:	e7e5      	b.n	8006778 <_dtoa_r+0x338>
 80067ac:	f000 80d2 	beq.w	8006954 <_dtoa_r+0x514>
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067b4:	427c      	negs	r4, r7
 80067b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006960 <_dtoa_r+0x520>)
 80067b8:	f004 020f 	and.w	r2, r4, #15
 80067bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f7f9 fe88 	bl	80004d8 <__aeabi_dmul>
 80067c8:	2602      	movs	r6, #2
 80067ca:	2300      	movs	r3, #0
 80067cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067d0:	4d64      	ldr	r5, [pc, #400]	@ (8006964 <_dtoa_r+0x524>)
 80067d2:	1124      	asrs	r4, r4, #4
 80067d4:	2c00      	cmp	r4, #0
 80067d6:	f040 80b2 	bne.w	800693e <_dtoa_r+0x4fe>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1d3      	bne.n	8006786 <_dtoa_r+0x346>
 80067de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80b7 	beq.w	8006958 <_dtoa_r+0x518>
 80067ea:	2200      	movs	r2, #0
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	4b5d      	ldr	r3, [pc, #372]	@ (8006968 <_dtoa_r+0x528>)
 80067f2:	f7fa f8e3 	bl	80009bc <__aeabi_dcmplt>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	f000 80ae 	beq.w	8006958 <_dtoa_r+0x518>
 80067fc:	9b07      	ldr	r3, [sp, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 80aa 	beq.w	8006958 <_dtoa_r+0x518>
 8006804:	9b08      	ldr	r3, [sp, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	dd37      	ble.n	800687a <_dtoa_r+0x43a>
 800680a:	1e7b      	subs	r3, r7, #1
 800680c:	4620      	mov	r0, r4
 800680e:	9304      	str	r3, [sp, #16]
 8006810:	2200      	movs	r2, #0
 8006812:	4629      	mov	r1, r5
 8006814:	4b55      	ldr	r3, [pc, #340]	@ (800696c <_dtoa_r+0x52c>)
 8006816:	f7f9 fe5f 	bl	80004d8 <__aeabi_dmul>
 800681a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800681e:	9c08      	ldr	r4, [sp, #32]
 8006820:	3601      	adds	r6, #1
 8006822:	4630      	mov	r0, r6
 8006824:	f7f9 fdee 	bl	8000404 <__aeabi_i2d>
 8006828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800682c:	f7f9 fe54 	bl	80004d8 <__aeabi_dmul>
 8006830:	2200      	movs	r2, #0
 8006832:	4b4f      	ldr	r3, [pc, #316]	@ (8006970 <_dtoa_r+0x530>)
 8006834:	f7f9 fc9a 	bl	800016c <__adddf3>
 8006838:	4605      	mov	r5, r0
 800683a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800683e:	2c00      	cmp	r4, #0
 8006840:	f040 809a 	bne.w	8006978 <_dtoa_r+0x538>
 8006844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	4b4a      	ldr	r3, [pc, #296]	@ (8006974 <_dtoa_r+0x534>)
 800684c:	f7f9 fc8c 	bl	8000168 <__aeabi_dsub>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006858:	462a      	mov	r2, r5
 800685a:	4633      	mov	r3, r6
 800685c:	f7fa f8cc 	bl	80009f8 <__aeabi_dcmpgt>
 8006860:	2800      	cmp	r0, #0
 8006862:	f040 828e 	bne.w	8006d82 <_dtoa_r+0x942>
 8006866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686a:	462a      	mov	r2, r5
 800686c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006870:	f7fa f8a4 	bl	80009bc <__aeabi_dcmplt>
 8006874:	2800      	cmp	r0, #0
 8006876:	f040 8127 	bne.w	8006ac8 <_dtoa_r+0x688>
 800687a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800687e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006882:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006884:	2b00      	cmp	r3, #0
 8006886:	f2c0 8163 	blt.w	8006b50 <_dtoa_r+0x710>
 800688a:	2f0e      	cmp	r7, #14
 800688c:	f300 8160 	bgt.w	8006b50 <_dtoa_r+0x710>
 8006890:	4b33      	ldr	r3, [pc, #204]	@ (8006960 <_dtoa_r+0x520>)
 8006892:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800689a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800689e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	da03      	bge.n	80068ac <_dtoa_r+0x46c>
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f340 8100 	ble.w	8006aac <_dtoa_r+0x66c>
 80068ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068b0:	4656      	mov	r6, sl
 80068b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b6:	4620      	mov	r0, r4
 80068b8:	4629      	mov	r1, r5
 80068ba:	f7f9 ff37 	bl	800072c <__aeabi_ddiv>
 80068be:	f7fa f8bb 	bl	8000a38 <__aeabi_d2iz>
 80068c2:	4680      	mov	r8, r0
 80068c4:	f7f9 fd9e 	bl	8000404 <__aeabi_i2d>
 80068c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068cc:	f7f9 fe04 	bl	80004d8 <__aeabi_dmul>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7f9 fc46 	bl	8000168 <__aeabi_dsub>
 80068dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80068e0:	9d07      	ldr	r5, [sp, #28]
 80068e2:	f806 4b01 	strb.w	r4, [r6], #1
 80068e6:	eba6 040a 	sub.w	r4, r6, sl
 80068ea:	42a5      	cmp	r5, r4
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	f040 8116 	bne.w	8006b20 <_dtoa_r+0x6e0>
 80068f4:	f7f9 fc3a 	bl	800016c <__adddf3>
 80068f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068fc:	4604      	mov	r4, r0
 80068fe:	460d      	mov	r5, r1
 8006900:	f7fa f87a 	bl	80009f8 <__aeabi_dcmpgt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f040 80f8 	bne.w	8006afa <_dtoa_r+0x6ba>
 800690a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7fa f849 	bl	80009a8 <__aeabi_dcmpeq>
 8006916:	b118      	cbz	r0, 8006920 <_dtoa_r+0x4e0>
 8006918:	f018 0f01 	tst.w	r8, #1
 800691c:	f040 80ed 	bne.w	8006afa <_dtoa_r+0x6ba>
 8006920:	4649      	mov	r1, r9
 8006922:	4658      	mov	r0, fp
 8006924:	f000 fc92 	bl	800724c <_Bfree>
 8006928:	2300      	movs	r3, #0
 800692a:	7033      	strb	r3, [r6, #0]
 800692c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800692e:	3701      	adds	r7, #1
 8006930:	601f      	str	r7, [r3, #0]
 8006932:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8320 	beq.w	8006f7a <_dtoa_r+0xb3a>
 800693a:	601e      	str	r6, [r3, #0]
 800693c:	e31d      	b.n	8006f7a <_dtoa_r+0xb3a>
 800693e:	07e2      	lsls	r2, r4, #31
 8006940:	d505      	bpl.n	800694e <_dtoa_r+0x50e>
 8006942:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006946:	f7f9 fdc7 	bl	80004d8 <__aeabi_dmul>
 800694a:	2301      	movs	r3, #1
 800694c:	3601      	adds	r6, #1
 800694e:	1064      	asrs	r4, r4, #1
 8006950:	3508      	adds	r5, #8
 8006952:	e73f      	b.n	80067d4 <_dtoa_r+0x394>
 8006954:	2602      	movs	r6, #2
 8006956:	e742      	b.n	80067de <_dtoa_r+0x39e>
 8006958:	9c07      	ldr	r4, [sp, #28]
 800695a:	9704      	str	r7, [sp, #16]
 800695c:	e761      	b.n	8006822 <_dtoa_r+0x3e2>
 800695e:	bf00      	nop
 8006960:	0800a4c0 	.word	0x0800a4c0
 8006964:	0800a498 	.word	0x0800a498
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	40240000 	.word	0x40240000
 8006970:	401c0000 	.word	0x401c0000
 8006974:	40140000 	.word	0x40140000
 8006978:	4b70      	ldr	r3, [pc, #448]	@ (8006b3c <_dtoa_r+0x6fc>)
 800697a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800697c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006980:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006984:	4454      	add	r4, sl
 8006986:	2900      	cmp	r1, #0
 8006988:	d045      	beq.n	8006a16 <_dtoa_r+0x5d6>
 800698a:	2000      	movs	r0, #0
 800698c:	496c      	ldr	r1, [pc, #432]	@ (8006b40 <_dtoa_r+0x700>)
 800698e:	f7f9 fecd 	bl	800072c <__aeabi_ddiv>
 8006992:	4633      	mov	r3, r6
 8006994:	462a      	mov	r2, r5
 8006996:	f7f9 fbe7 	bl	8000168 <__aeabi_dsub>
 800699a:	4656      	mov	r6, sl
 800699c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a4:	f7fa f848 	bl	8000a38 <__aeabi_d2iz>
 80069a8:	4605      	mov	r5, r0
 80069aa:	f7f9 fd2b 	bl	8000404 <__aeabi_i2d>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b6:	f7f9 fbd7 	bl	8000168 <__aeabi_dsub>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	3530      	adds	r5, #48	@ 0x30
 80069c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069c8:	f806 5b01 	strb.w	r5, [r6], #1
 80069cc:	f7f9 fff6 	bl	80009bc <__aeabi_dcmplt>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d163      	bne.n	8006a9c <_dtoa_r+0x65c>
 80069d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069d8:	2000      	movs	r0, #0
 80069da:	495a      	ldr	r1, [pc, #360]	@ (8006b44 <_dtoa_r+0x704>)
 80069dc:	f7f9 fbc4 	bl	8000168 <__aeabi_dsub>
 80069e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069e4:	f7f9 ffea 	bl	80009bc <__aeabi_dcmplt>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	f040 8087 	bne.w	8006afc <_dtoa_r+0x6bc>
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	f43f af43 	beq.w	800687a <_dtoa_r+0x43a>
 80069f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069f8:	2200      	movs	r2, #0
 80069fa:	4b53      	ldr	r3, [pc, #332]	@ (8006b48 <_dtoa_r+0x708>)
 80069fc:	f7f9 fd6c 	bl	80004d8 <__aeabi_dmul>
 8006a00:	2200      	movs	r2, #0
 8006a02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b48 <_dtoa_r+0x708>)
 8006a0c:	f7f9 fd64 	bl	80004d8 <__aeabi_dmul>
 8006a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a14:	e7c4      	b.n	80069a0 <_dtoa_r+0x560>
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7f9 fd5d 	bl	80004d8 <__aeabi_dmul>
 8006a1e:	4656      	mov	r6, sl
 8006a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a24:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2a:	f7fa f805 	bl	8000a38 <__aeabi_d2iz>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	f7f9 fce8 	bl	8000404 <__aeabi_i2d>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3c:	f7f9 fb94 	bl	8000168 <__aeabi_dsub>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	3530      	adds	r5, #48	@ 0x30
 8006a46:	f806 5b01 	strb.w	r5, [r6], #1
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	d124      	bne.n	8006aa0 <_dtoa_r+0x660>
 8006a56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a5a:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <_dtoa_r+0x700>)
 8006a5c:	f7f9 fb86 	bl	800016c <__adddf3>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a68:	f7f9 ffc6 	bl	80009f8 <__aeabi_dcmpgt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d145      	bne.n	8006afc <_dtoa_r+0x6bc>
 8006a70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a74:	2000      	movs	r0, #0
 8006a76:	4932      	ldr	r1, [pc, #200]	@ (8006b40 <_dtoa_r+0x700>)
 8006a78:	f7f9 fb76 	bl	8000168 <__aeabi_dsub>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a84:	f7f9 ff9a 	bl	80009bc <__aeabi_dcmplt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f43f aef6 	beq.w	800687a <_dtoa_r+0x43a>
 8006a8e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006a90:	1e73      	subs	r3, r6, #1
 8006a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a98:	2b30      	cmp	r3, #48	@ 0x30
 8006a9a:	d0f8      	beq.n	8006a8e <_dtoa_r+0x64e>
 8006a9c:	9f04      	ldr	r7, [sp, #16]
 8006a9e:	e73f      	b.n	8006920 <_dtoa_r+0x4e0>
 8006aa0:	4b29      	ldr	r3, [pc, #164]	@ (8006b48 <_dtoa_r+0x708>)
 8006aa2:	f7f9 fd19 	bl	80004d8 <__aeabi_dmul>
 8006aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aaa:	e7bc      	b.n	8006a26 <_dtoa_r+0x5e6>
 8006aac:	d10c      	bne.n	8006ac8 <_dtoa_r+0x688>
 8006aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4b25      	ldr	r3, [pc, #148]	@ (8006b4c <_dtoa_r+0x70c>)
 8006ab6:	f7f9 fd0f 	bl	80004d8 <__aeabi_dmul>
 8006aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006abe:	f7f9 ff91 	bl	80009e4 <__aeabi_dcmpge>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f000 815b 	beq.w	8006d7e <_dtoa_r+0x93e>
 8006ac8:	2400      	movs	r4, #0
 8006aca:	4625      	mov	r5, r4
 8006acc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ace:	4656      	mov	r6, sl
 8006ad0:	43db      	mvns	r3, r3
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	2700      	movs	r7, #0
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4658      	mov	r0, fp
 8006ada:	f000 fbb7 	bl	800724c <_Bfree>
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d0dc      	beq.n	8006a9c <_dtoa_r+0x65c>
 8006ae2:	b12f      	cbz	r7, 8006af0 <_dtoa_r+0x6b0>
 8006ae4:	42af      	cmp	r7, r5
 8006ae6:	d003      	beq.n	8006af0 <_dtoa_r+0x6b0>
 8006ae8:	4639      	mov	r1, r7
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fbae 	bl	800724c <_Bfree>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4658      	mov	r0, fp
 8006af4:	f000 fbaa 	bl	800724c <_Bfree>
 8006af8:	e7d0      	b.n	8006a9c <_dtoa_r+0x65c>
 8006afa:	9704      	str	r7, [sp, #16]
 8006afc:	4633      	mov	r3, r6
 8006afe:	461e      	mov	r6, r3
 8006b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b04:	2a39      	cmp	r2, #57	@ 0x39
 8006b06:	d107      	bne.n	8006b18 <_dtoa_r+0x6d8>
 8006b08:	459a      	cmp	sl, r3
 8006b0a:	d1f8      	bne.n	8006afe <_dtoa_r+0x6be>
 8006b0c:	9a04      	ldr	r2, [sp, #16]
 8006b0e:	3201      	adds	r2, #1
 8006b10:	9204      	str	r2, [sp, #16]
 8006b12:	2230      	movs	r2, #48	@ 0x30
 8006b14:	f88a 2000 	strb.w	r2, [sl]
 8006b18:	781a      	ldrb	r2, [r3, #0]
 8006b1a:	3201      	adds	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e7bd      	b.n	8006a9c <_dtoa_r+0x65c>
 8006b20:	2200      	movs	r2, #0
 8006b22:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <_dtoa_r+0x708>)
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
 8006b30:	f7f9 ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f43f aebc 	beq.w	80068b2 <_dtoa_r+0x472>
 8006b3a:	e6f1      	b.n	8006920 <_dtoa_r+0x4e0>
 8006b3c:	0800a4c0 	.word	0x0800a4c0
 8006b40:	3fe00000 	.word	0x3fe00000
 8006b44:	3ff00000 	.word	0x3ff00000
 8006b48:	40240000 	.word	0x40240000
 8006b4c:	40140000 	.word	0x40140000
 8006b50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	f000 80db 	beq.w	8006d0e <_dtoa_r+0x8ce>
 8006b58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b5a:	2a01      	cmp	r2, #1
 8006b5c:	f300 80bf 	bgt.w	8006cde <_dtoa_r+0x89e>
 8006b60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	f000 80b7 	beq.w	8006cd6 <_dtoa_r+0x896>
 8006b68:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b6c:	4646      	mov	r6, r8
 8006b6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b72:	2101      	movs	r1, #1
 8006b74:	441a      	add	r2, r3
 8006b76:	4658      	mov	r0, fp
 8006b78:	4498      	add	r8, r3
 8006b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b7c:	f000 fc64 	bl	8007448 <__i2b>
 8006b80:	4605      	mov	r5, r0
 8006b82:	b15e      	cbz	r6, 8006b9c <_dtoa_r+0x75c>
 8006b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dd08      	ble.n	8006b9c <_dtoa_r+0x75c>
 8006b8a:	42b3      	cmp	r3, r6
 8006b8c:	bfa8      	it	ge
 8006b8e:	4633      	movge	r3, r6
 8006b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b92:	eba8 0803 	sub.w	r8, r8, r3
 8006b96:	1af6      	subs	r6, r6, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9e:	b1f3      	cbz	r3, 8006bde <_dtoa_r+0x79e>
 8006ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 80b7 	beq.w	8006d16 <_dtoa_r+0x8d6>
 8006ba8:	b18c      	cbz	r4, 8006bce <_dtoa_r+0x78e>
 8006baa:	4629      	mov	r1, r5
 8006bac:	4622      	mov	r2, r4
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f000 fd08 	bl	80075c4 <__pow5mult>
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	4605      	mov	r5, r0
 8006bba:	4658      	mov	r0, fp
 8006bbc:	f000 fc5a 	bl	8007474 <__multiply>
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	9004      	str	r0, [sp, #16]
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	f000 fb41 	bl	800724c <_Bfree>
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	4699      	mov	r9, r3
 8006bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd0:	1b1a      	subs	r2, r3, r4
 8006bd2:	d004      	beq.n	8006bde <_dtoa_r+0x79e>
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4658      	mov	r0, fp
 8006bd8:	f000 fcf4 	bl	80075c4 <__pow5mult>
 8006bdc:	4681      	mov	r9, r0
 8006bde:	2101      	movs	r1, #1
 8006be0:	4658      	mov	r0, fp
 8006be2:	f000 fc31 	bl	8007448 <__i2b>
 8006be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006be8:	4604      	mov	r4, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 81c9 	beq.w	8006f82 <_dtoa_r+0xb42>
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f000 fce5 	bl	80075c4 <__pow5mult>
 8006bfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	f300 808f 	bgt.w	8006d22 <_dtoa_r+0x8e2>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 8087 	bne.w	8006d1a <_dtoa_r+0x8da>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 8083 	bne.w	8006d1e <_dtoa_r+0x8de>
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c1e:	0d1b      	lsrs	r3, r3, #20
 8006c20:	051b      	lsls	r3, r3, #20
 8006c22:	b12b      	cbz	r3, 8006c30 <_dtoa_r+0x7f0>
 8006c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c2e:	2301      	movs	r3, #1
 8006c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 81aa 	beq.w	8006f8e <_dtoa_r+0xb4e>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c40:	6918      	ldr	r0, [r3, #16]
 8006c42:	f000 fbb5 	bl	80073b0 <__hi0bits>
 8006c46:	f1c0 0020 	rsb	r0, r0, #32
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	4418      	add	r0, r3
 8006c4e:	f010 001f 	ands.w	r0, r0, #31
 8006c52:	d071      	beq.n	8006d38 <_dtoa_r+0x8f8>
 8006c54:	f1c0 0320 	rsb	r3, r0, #32
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	dd65      	ble.n	8006d28 <_dtoa_r+0x8e8>
 8006c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c5e:	f1c0 001c 	rsb	r0, r0, #28
 8006c62:	4403      	add	r3, r0
 8006c64:	4480      	add	r8, r0
 8006c66:	4406      	add	r6, r0
 8006c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c6a:	f1b8 0f00 	cmp.w	r8, #0
 8006c6e:	dd05      	ble.n	8006c7c <_dtoa_r+0x83c>
 8006c70:	4649      	mov	r1, r9
 8006c72:	4642      	mov	r2, r8
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fcff 	bl	8007678 <__lshift>
 8006c7a:	4681      	mov	r9, r0
 8006c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd05      	ble.n	8006c8e <_dtoa_r+0x84e>
 8006c82:	4621      	mov	r1, r4
 8006c84:	461a      	mov	r2, r3
 8006c86:	4658      	mov	r0, fp
 8006c88:	f000 fcf6 	bl	8007678 <__lshift>
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d053      	beq.n	8006d3c <_dtoa_r+0x8fc>
 8006c94:	4621      	mov	r1, r4
 8006c96:	4648      	mov	r0, r9
 8006c98:	f000 fd5a 	bl	8007750 <__mcmp>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	da4d      	bge.n	8006d3c <_dtoa_r+0x8fc>
 8006ca0:	1e7b      	subs	r3, r7, #1
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4658      	mov	r0, fp
 8006cac:	f000 faf0 	bl	8007290 <__multadd>
 8006cb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb2:	4681      	mov	r9, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 816c 	beq.w	8006f92 <_dtoa_r+0xb52>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	220a      	movs	r2, #10
 8006cc0:	4658      	mov	r0, fp
 8006cc2:	f000 fae5 	bl	8007290 <__multadd>
 8006cc6:	9b08      	ldr	r3, [sp, #32]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dc61      	bgt.n	8006d92 <_dtoa_r+0x952>
 8006cce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	dc3b      	bgt.n	8006d4c <_dtoa_r+0x90c>
 8006cd4:	e05d      	b.n	8006d92 <_dtoa_r+0x952>
 8006cd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cd8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006cdc:	e746      	b.n	8006b6c <_dtoa_r+0x72c>
 8006cde:	9b07      	ldr	r3, [sp, #28]
 8006ce0:	1e5c      	subs	r4, r3, #1
 8006ce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	bfbf      	itttt	lt
 8006ce8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006cea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006cec:	1ae3      	sublt	r3, r4, r3
 8006cee:	18d2      	addlt	r2, r2, r3
 8006cf0:	bfa8      	it	ge
 8006cf2:	1b1c      	subge	r4, r3, r4
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	bfbe      	ittt	lt
 8006cf8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006cfa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006cfc:	2400      	movlt	r4, #0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bfb5      	itete	lt
 8006d02:	eba8 0603 	sublt.w	r6, r8, r3
 8006d06:	4646      	movge	r6, r8
 8006d08:	2300      	movlt	r3, #0
 8006d0a:	9b07      	ldrge	r3, [sp, #28]
 8006d0c:	e730      	b.n	8006b70 <_dtoa_r+0x730>
 8006d0e:	4646      	mov	r6, r8
 8006d10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d14:	e735      	b.n	8006b82 <_dtoa_r+0x742>
 8006d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d18:	e75c      	b.n	8006bd4 <_dtoa_r+0x794>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e788      	b.n	8006c30 <_dtoa_r+0x7f0>
 8006d1e:	9b02      	ldr	r3, [sp, #8]
 8006d20:	e786      	b.n	8006c30 <_dtoa_r+0x7f0>
 8006d22:	2300      	movs	r3, #0
 8006d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d26:	e788      	b.n	8006c3a <_dtoa_r+0x7fa>
 8006d28:	d09f      	beq.n	8006c6a <_dtoa_r+0x82a>
 8006d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d2c:	331c      	adds	r3, #28
 8006d2e:	441a      	add	r2, r3
 8006d30:	4498      	add	r8, r3
 8006d32:	441e      	add	r6, r3
 8006d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d36:	e798      	b.n	8006c6a <_dtoa_r+0x82a>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	e7f6      	b.n	8006d2a <_dtoa_r+0x8ea>
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	9704      	str	r7, [sp, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc20      	bgt.n	8006d86 <_dtoa_r+0x946>
 8006d44:	9308      	str	r3, [sp, #32]
 8006d46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	dd1e      	ble.n	8006d8a <_dtoa_r+0x94a>
 8006d4c:	9b08      	ldr	r3, [sp, #32]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f47f aebc 	bne.w	8006acc <_dtoa_r+0x68c>
 8006d54:	4621      	mov	r1, r4
 8006d56:	2205      	movs	r2, #5
 8006d58:	4658      	mov	r0, fp
 8006d5a:	f000 fa99 	bl	8007290 <__multadd>
 8006d5e:	4601      	mov	r1, r0
 8006d60:	4604      	mov	r4, r0
 8006d62:	4648      	mov	r0, r9
 8006d64:	f000 fcf4 	bl	8007750 <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f77f aeaf 	ble.w	8006acc <_dtoa_r+0x68c>
 8006d6e:	2331      	movs	r3, #49	@ 0x31
 8006d70:	4656      	mov	r6, sl
 8006d72:	f806 3b01 	strb.w	r3, [r6], #1
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	e6aa      	b.n	8006ad4 <_dtoa_r+0x694>
 8006d7e:	9c07      	ldr	r4, [sp, #28]
 8006d80:	9704      	str	r7, [sp, #16]
 8006d82:	4625      	mov	r5, r4
 8006d84:	e7f3      	b.n	8006d6e <_dtoa_r+0x92e>
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	9308      	str	r3, [sp, #32]
 8006d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8104 	beq.w	8006f9a <_dtoa_r+0xb5a>
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	dd05      	ble.n	8006da2 <_dtoa_r+0x962>
 8006d96:	4629      	mov	r1, r5
 8006d98:	4632      	mov	r2, r6
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f000 fc6c 	bl	8007678 <__lshift>
 8006da0:	4605      	mov	r5, r0
 8006da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d05a      	beq.n	8006e5e <_dtoa_r+0xa1e>
 8006da8:	4658      	mov	r0, fp
 8006daa:	6869      	ldr	r1, [r5, #4]
 8006dac:	f000 fa0e 	bl	80071cc <_Balloc>
 8006db0:	4606      	mov	r6, r0
 8006db2:	b928      	cbnz	r0, 8006dc0 <_dtoa_r+0x980>
 8006db4:	4602      	mov	r2, r0
 8006db6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006dba:	4b83      	ldr	r3, [pc, #524]	@ (8006fc8 <_dtoa_r+0xb88>)
 8006dbc:	f7ff bb54 	b.w	8006468 <_dtoa_r+0x28>
 8006dc0:	692a      	ldr	r2, [r5, #16]
 8006dc2:	f105 010c 	add.w	r1, r5, #12
 8006dc6:	3202      	adds	r2, #2
 8006dc8:	0092      	lsls	r2, r2, #2
 8006dca:	300c      	adds	r0, #12
 8006dcc:	f7ff fa9d 	bl	800630a <memcpy>
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	f000 fc4f 	bl	8007678 <__lshift>
 8006dda:	462f      	mov	r7, r5
 8006ddc:	4605      	mov	r5, r0
 8006dde:	f10a 0301 	add.w	r3, sl, #1
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	4453      	add	r3, sl
 8006de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dea:	9b02      	ldr	r3, [sp, #8]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006df2:	9b07      	ldr	r3, [sp, #28]
 8006df4:	4621      	mov	r1, r4
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4648      	mov	r0, r9
 8006dfa:	9302      	str	r3, [sp, #8]
 8006dfc:	f7ff fa98 	bl	8006330 <quorem>
 8006e00:	4639      	mov	r1, r7
 8006e02:	9008      	str	r0, [sp, #32]
 8006e04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e08:	4648      	mov	r0, r9
 8006e0a:	f000 fca1 	bl	8007750 <__mcmp>
 8006e0e:	462a      	mov	r2, r5
 8006e10:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e12:	4621      	mov	r1, r4
 8006e14:	4658      	mov	r0, fp
 8006e16:	f000 fcb7 	bl	8007788 <__mdiff>
 8006e1a:	68c2      	ldr	r2, [r0, #12]
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	bb02      	cbnz	r2, 8006e62 <_dtoa_r+0xa22>
 8006e20:	4601      	mov	r1, r0
 8006e22:	4648      	mov	r0, r9
 8006e24:	f000 fc94 	bl	8007750 <__mcmp>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4658      	mov	r0, fp
 8006e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e30:	f000 fa0c 	bl	800724c <_Bfree>
 8006e34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006e38:	9e07      	ldr	r6, [sp, #28]
 8006e3a:	ea43 0102 	orr.w	r1, r3, r2
 8006e3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e40:	4319      	orrs	r1, r3
 8006e42:	d110      	bne.n	8006e66 <_dtoa_r+0xa26>
 8006e44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e48:	d029      	beq.n	8006e9e <_dtoa_r+0xa5e>
 8006e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd02      	ble.n	8006e56 <_dtoa_r+0xa16>
 8006e50:	9b08      	ldr	r3, [sp, #32]
 8006e52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	f883 8000 	strb.w	r8, [r3]
 8006e5c:	e63b      	b.n	8006ad6 <_dtoa_r+0x696>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	e7bb      	b.n	8006dda <_dtoa_r+0x99a>
 8006e62:	2201      	movs	r2, #1
 8006e64:	e7e1      	b.n	8006e2a <_dtoa_r+0x9ea>
 8006e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	db04      	blt.n	8006e76 <_dtoa_r+0xa36>
 8006e6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e72:	430b      	orrs	r3, r1
 8006e74:	d120      	bne.n	8006eb8 <_dtoa_r+0xa78>
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	dded      	ble.n	8006e56 <_dtoa_r+0xa16>
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f000 fbfa 	bl	8007678 <__lshift>
 8006e84:	4621      	mov	r1, r4
 8006e86:	4681      	mov	r9, r0
 8006e88:	f000 fc62 	bl	8007750 <__mcmp>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dc03      	bgt.n	8006e98 <_dtoa_r+0xa58>
 8006e90:	d1e1      	bne.n	8006e56 <_dtoa_r+0xa16>
 8006e92:	f018 0f01 	tst.w	r8, #1
 8006e96:	d0de      	beq.n	8006e56 <_dtoa_r+0xa16>
 8006e98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e9c:	d1d8      	bne.n	8006e50 <_dtoa_r+0xa10>
 8006e9e:	2339      	movs	r3, #57	@ 0x39
 8006ea0:	9a02      	ldr	r2, [sp, #8]
 8006ea2:	7013      	strb	r3, [r2, #0]
 8006ea4:	4633      	mov	r3, r6
 8006ea6:	461e      	mov	r6, r3
 8006ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	2a39      	cmp	r2, #57	@ 0x39
 8006eb0:	d052      	beq.n	8006f58 <_dtoa_r+0xb18>
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	e60e      	b.n	8006ad6 <_dtoa_r+0x696>
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	dd07      	ble.n	8006ecc <_dtoa_r+0xa8c>
 8006ebc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ec0:	d0ed      	beq.n	8006e9e <_dtoa_r+0xa5e>
 8006ec2:	9a02      	ldr	r2, [sp, #8]
 8006ec4:	f108 0301 	add.w	r3, r8, #1
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	e604      	b.n	8006ad6 <_dtoa_r+0x696>
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	9a07      	ldr	r2, [sp, #28]
 8006ed0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d028      	beq.n	8006f2c <_dtoa_r+0xaec>
 8006eda:	4649      	mov	r1, r9
 8006edc:	2300      	movs	r3, #0
 8006ede:	220a      	movs	r2, #10
 8006ee0:	4658      	mov	r0, fp
 8006ee2:	f000 f9d5 	bl	8007290 <__multadd>
 8006ee6:	42af      	cmp	r7, r5
 8006ee8:	4681      	mov	r9, r0
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	f04f 020a 	mov.w	r2, #10
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4658      	mov	r0, fp
 8006ef6:	d107      	bne.n	8006f08 <_dtoa_r+0xac8>
 8006ef8:	f000 f9ca 	bl	8007290 <__multadd>
 8006efc:	4607      	mov	r7, r0
 8006efe:	4605      	mov	r5, r0
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9307      	str	r3, [sp, #28]
 8006f06:	e774      	b.n	8006df2 <_dtoa_r+0x9b2>
 8006f08:	f000 f9c2 	bl	8007290 <__multadd>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4607      	mov	r7, r0
 8006f10:	2300      	movs	r3, #0
 8006f12:	220a      	movs	r2, #10
 8006f14:	4658      	mov	r0, fp
 8006f16:	f000 f9bb 	bl	8007290 <__multadd>
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	e7f0      	b.n	8006f00 <_dtoa_r+0xac0>
 8006f1e:	9b08      	ldr	r3, [sp, #32]
 8006f20:	2700      	movs	r7, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bfcc      	ite	gt
 8006f26:	461e      	movgt	r6, r3
 8006f28:	2601      	movle	r6, #1
 8006f2a:	4456      	add	r6, sl
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4658      	mov	r0, fp
 8006f32:	f000 fba1 	bl	8007678 <__lshift>
 8006f36:	4621      	mov	r1, r4
 8006f38:	4681      	mov	r9, r0
 8006f3a:	f000 fc09 	bl	8007750 <__mcmp>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	dcb0      	bgt.n	8006ea4 <_dtoa_r+0xa64>
 8006f42:	d102      	bne.n	8006f4a <_dtoa_r+0xb0a>
 8006f44:	f018 0f01 	tst.w	r8, #1
 8006f48:	d1ac      	bne.n	8006ea4 <_dtoa_r+0xa64>
 8006f4a:	4633      	mov	r3, r6
 8006f4c:	461e      	mov	r6, r3
 8006f4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f52:	2a30      	cmp	r2, #48	@ 0x30
 8006f54:	d0fa      	beq.n	8006f4c <_dtoa_r+0xb0c>
 8006f56:	e5be      	b.n	8006ad6 <_dtoa_r+0x696>
 8006f58:	459a      	cmp	sl, r3
 8006f5a:	d1a4      	bne.n	8006ea6 <_dtoa_r+0xa66>
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	2331      	movs	r3, #49	@ 0x31
 8006f64:	f88a 3000 	strb.w	r3, [sl]
 8006f68:	e5b5      	b.n	8006ad6 <_dtoa_r+0x696>
 8006f6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006f6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006fcc <_dtoa_r+0xb8c>
 8006f70:	b11b      	cbz	r3, 8006f7a <_dtoa_r+0xb3a>
 8006f72:	f10a 0308 	add.w	r3, sl, #8
 8006f76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	b017      	add	sp, #92	@ 0x5c
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	f77f ae3d 	ble.w	8006c04 <_dtoa_r+0x7c4>
 8006f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e65b      	b.n	8006c4a <_dtoa_r+0x80a>
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f77f aed6 	ble.w	8006d46 <_dtoa_r+0x906>
 8006f9a:	4656      	mov	r6, sl
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4648      	mov	r0, r9
 8006fa0:	f7ff f9c6 	bl	8006330 <quorem>
 8006fa4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fa8:	9b08      	ldr	r3, [sp, #32]
 8006faa:	f806 8b01 	strb.w	r8, [r6], #1
 8006fae:	eba6 020a 	sub.w	r2, r6, sl
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	ddb3      	ble.n	8006f1e <_dtoa_r+0xade>
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	2300      	movs	r3, #0
 8006fba:	220a      	movs	r2, #10
 8006fbc:	4658      	mov	r0, fp
 8006fbe:	f000 f967 	bl	8007290 <__multadd>
 8006fc2:	4681      	mov	r9, r0
 8006fc4:	e7ea      	b.n	8006f9c <_dtoa_r+0xb5c>
 8006fc6:	bf00      	nop
 8006fc8:	0800a421 	.word	0x0800a421
 8006fcc:	0800a3a5 	.word	0x0800a3a5

08006fd0 <_free_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d040      	beq.n	800705a <_free_r+0x8a>
 8006fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fdc:	1f0c      	subs	r4, r1, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bfb8      	it	lt
 8006fe2:	18e4      	addlt	r4, r4, r3
 8006fe4:	f000 f8e6 	bl	80071b4 <__malloc_lock>
 8006fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800705c <_free_r+0x8c>)
 8006fea:	6813      	ldr	r3, [r2, #0]
 8006fec:	b933      	cbnz	r3, 8006ffc <_free_r+0x2c>
 8006fee:	6063      	str	r3, [r4, #4]
 8006ff0:	6014      	str	r4, [r2, #0]
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ff8:	f000 b8e2 	b.w	80071c0 <__malloc_unlock>
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	d908      	bls.n	8007012 <_free_r+0x42>
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	1821      	adds	r1, r4, r0
 8007004:	428b      	cmp	r3, r1
 8007006:	bf01      	itttt	eq
 8007008:	6819      	ldreq	r1, [r3, #0]
 800700a:	685b      	ldreq	r3, [r3, #4]
 800700c:	1809      	addeq	r1, r1, r0
 800700e:	6021      	streq	r1, [r4, #0]
 8007010:	e7ed      	b.n	8006fee <_free_r+0x1e>
 8007012:	461a      	mov	r2, r3
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	b10b      	cbz	r3, 800701c <_free_r+0x4c>
 8007018:	42a3      	cmp	r3, r4
 800701a:	d9fa      	bls.n	8007012 <_free_r+0x42>
 800701c:	6811      	ldr	r1, [r2, #0]
 800701e:	1850      	adds	r0, r2, r1
 8007020:	42a0      	cmp	r0, r4
 8007022:	d10b      	bne.n	800703c <_free_r+0x6c>
 8007024:	6820      	ldr	r0, [r4, #0]
 8007026:	4401      	add	r1, r0
 8007028:	1850      	adds	r0, r2, r1
 800702a:	4283      	cmp	r3, r0
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	d1e0      	bne.n	8006ff2 <_free_r+0x22>
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	4408      	add	r0, r1
 8007036:	6010      	str	r0, [r2, #0]
 8007038:	6053      	str	r3, [r2, #4]
 800703a:	e7da      	b.n	8006ff2 <_free_r+0x22>
 800703c:	d902      	bls.n	8007044 <_free_r+0x74>
 800703e:	230c      	movs	r3, #12
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	e7d6      	b.n	8006ff2 <_free_r+0x22>
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	1821      	adds	r1, r4, r0
 8007048:	428b      	cmp	r3, r1
 800704a:	bf01      	itttt	eq
 800704c:	6819      	ldreq	r1, [r3, #0]
 800704e:	685b      	ldreq	r3, [r3, #4]
 8007050:	1809      	addeq	r1, r1, r0
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	6063      	str	r3, [r4, #4]
 8007056:	6054      	str	r4, [r2, #4]
 8007058:	e7cb      	b.n	8006ff2 <_free_r+0x22>
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000bac 	.word	0x20000bac

08007060 <malloc>:
 8007060:	4b02      	ldr	r3, [pc, #8]	@ (800706c <malloc+0xc>)
 8007062:	4601      	mov	r1, r0
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	f000 b825 	b.w	80070b4 <_malloc_r>
 800706a:	bf00      	nop
 800706c:	200000a8 	.word	0x200000a8

08007070 <sbrk_aligned>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4e0f      	ldr	r6, [pc, #60]	@ (80070b0 <sbrk_aligned+0x40>)
 8007074:	460c      	mov	r4, r1
 8007076:	6831      	ldr	r1, [r6, #0]
 8007078:	4605      	mov	r5, r0
 800707a:	b911      	cbnz	r1, 8007082 <sbrk_aligned+0x12>
 800707c:	f002 f97e 	bl	800937c <_sbrk_r>
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	4621      	mov	r1, r4
 8007084:	4628      	mov	r0, r5
 8007086:	f002 f979 	bl	800937c <_sbrk_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	d103      	bne.n	8007096 <sbrk_aligned+0x26>
 800708e:	f04f 34ff 	mov.w	r4, #4294967295
 8007092:	4620      	mov	r0, r4
 8007094:	bd70      	pop	{r4, r5, r6, pc}
 8007096:	1cc4      	adds	r4, r0, #3
 8007098:	f024 0403 	bic.w	r4, r4, #3
 800709c:	42a0      	cmp	r0, r4
 800709e:	d0f8      	beq.n	8007092 <sbrk_aligned+0x22>
 80070a0:	1a21      	subs	r1, r4, r0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f002 f96a 	bl	800937c <_sbrk_r>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d1f2      	bne.n	8007092 <sbrk_aligned+0x22>
 80070ac:	e7ef      	b.n	800708e <sbrk_aligned+0x1e>
 80070ae:	bf00      	nop
 80070b0:	20000ba8 	.word	0x20000ba8

080070b4 <_malloc_r>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	1ccd      	adds	r5, r1, #3
 80070ba:	f025 0503 	bic.w	r5, r5, #3
 80070be:	3508      	adds	r5, #8
 80070c0:	2d0c      	cmp	r5, #12
 80070c2:	bf38      	it	cc
 80070c4:	250c      	movcc	r5, #12
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	4606      	mov	r6, r0
 80070ca:	db01      	blt.n	80070d0 <_malloc_r+0x1c>
 80070cc:	42a9      	cmp	r1, r5
 80070ce:	d904      	bls.n	80070da <_malloc_r+0x26>
 80070d0:	230c      	movs	r3, #12
 80070d2:	6033      	str	r3, [r6, #0]
 80070d4:	2000      	movs	r0, #0
 80070d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071b0 <_malloc_r+0xfc>
 80070de:	f000 f869 	bl	80071b4 <__malloc_lock>
 80070e2:	f8d8 3000 	ldr.w	r3, [r8]
 80070e6:	461c      	mov	r4, r3
 80070e8:	bb44      	cbnz	r4, 800713c <_malloc_r+0x88>
 80070ea:	4629      	mov	r1, r5
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff ffbf 	bl	8007070 <sbrk_aligned>
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	4604      	mov	r4, r0
 80070f6:	d158      	bne.n	80071aa <_malloc_r+0xf6>
 80070f8:	f8d8 4000 	ldr.w	r4, [r8]
 80070fc:	4627      	mov	r7, r4
 80070fe:	2f00      	cmp	r7, #0
 8007100:	d143      	bne.n	800718a <_malloc_r+0xd6>
 8007102:	2c00      	cmp	r4, #0
 8007104:	d04b      	beq.n	800719e <_malloc_r+0xea>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	4639      	mov	r1, r7
 800710a:	4630      	mov	r0, r6
 800710c:	eb04 0903 	add.w	r9, r4, r3
 8007110:	f002 f934 	bl	800937c <_sbrk_r>
 8007114:	4581      	cmp	r9, r0
 8007116:	d142      	bne.n	800719e <_malloc_r+0xea>
 8007118:	6821      	ldr	r1, [r4, #0]
 800711a:	4630      	mov	r0, r6
 800711c:	1a6d      	subs	r5, r5, r1
 800711e:	4629      	mov	r1, r5
 8007120:	f7ff ffa6 	bl	8007070 <sbrk_aligned>
 8007124:	3001      	adds	r0, #1
 8007126:	d03a      	beq.n	800719e <_malloc_r+0xea>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	442b      	add	r3, r5
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	f8d8 3000 	ldr.w	r3, [r8]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	bb62      	cbnz	r2, 8007190 <_malloc_r+0xdc>
 8007136:	f8c8 7000 	str.w	r7, [r8]
 800713a:	e00f      	b.n	800715c <_malloc_r+0xa8>
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	1b52      	subs	r2, r2, r5
 8007140:	d420      	bmi.n	8007184 <_malloc_r+0xd0>
 8007142:	2a0b      	cmp	r2, #11
 8007144:	d917      	bls.n	8007176 <_malloc_r+0xc2>
 8007146:	1961      	adds	r1, r4, r5
 8007148:	42a3      	cmp	r3, r4
 800714a:	6025      	str	r5, [r4, #0]
 800714c:	bf18      	it	ne
 800714e:	6059      	strne	r1, [r3, #4]
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	bf08      	it	eq
 8007154:	f8c8 1000 	streq.w	r1, [r8]
 8007158:	5162      	str	r2, [r4, r5]
 800715a:	604b      	str	r3, [r1, #4]
 800715c:	4630      	mov	r0, r6
 800715e:	f000 f82f 	bl	80071c0 <__malloc_unlock>
 8007162:	f104 000b 	add.w	r0, r4, #11
 8007166:	1d23      	adds	r3, r4, #4
 8007168:	f020 0007 	bic.w	r0, r0, #7
 800716c:	1ac2      	subs	r2, r0, r3
 800716e:	bf1c      	itt	ne
 8007170:	1a1b      	subne	r3, r3, r0
 8007172:	50a3      	strne	r3, [r4, r2]
 8007174:	e7af      	b.n	80070d6 <_malloc_r+0x22>
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	42a3      	cmp	r3, r4
 800717a:	bf0c      	ite	eq
 800717c:	f8c8 2000 	streq.w	r2, [r8]
 8007180:	605a      	strne	r2, [r3, #4]
 8007182:	e7eb      	b.n	800715c <_malloc_r+0xa8>
 8007184:	4623      	mov	r3, r4
 8007186:	6864      	ldr	r4, [r4, #4]
 8007188:	e7ae      	b.n	80070e8 <_malloc_r+0x34>
 800718a:	463c      	mov	r4, r7
 800718c:	687f      	ldr	r7, [r7, #4]
 800718e:	e7b6      	b.n	80070fe <_malloc_r+0x4a>
 8007190:	461a      	mov	r2, r3
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	42a3      	cmp	r3, r4
 8007196:	d1fb      	bne.n	8007190 <_malloc_r+0xdc>
 8007198:	2300      	movs	r3, #0
 800719a:	6053      	str	r3, [r2, #4]
 800719c:	e7de      	b.n	800715c <_malloc_r+0xa8>
 800719e:	230c      	movs	r3, #12
 80071a0:	4630      	mov	r0, r6
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	f000 f80c 	bl	80071c0 <__malloc_unlock>
 80071a8:	e794      	b.n	80070d4 <_malloc_r+0x20>
 80071aa:	6005      	str	r5, [r0, #0]
 80071ac:	e7d6      	b.n	800715c <_malloc_r+0xa8>
 80071ae:	bf00      	nop
 80071b0:	20000bac 	.word	0x20000bac

080071b4 <__malloc_lock>:
 80071b4:	4801      	ldr	r0, [pc, #4]	@ (80071bc <__malloc_lock+0x8>)
 80071b6:	f7ff b898 	b.w	80062ea <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	20000ba4 	.word	0x20000ba4

080071c0 <__malloc_unlock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__malloc_unlock+0x8>)
 80071c2:	f7ff b893 	b.w	80062ec <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	20000ba4 	.word	0x20000ba4

080071cc <_Balloc>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	69c6      	ldr	r6, [r0, #28]
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	b976      	cbnz	r6, 80071f4 <_Balloc+0x28>
 80071d6:	2010      	movs	r0, #16
 80071d8:	f7ff ff42 	bl	8007060 <malloc>
 80071dc:	4602      	mov	r2, r0
 80071de:	61e0      	str	r0, [r4, #28]
 80071e0:	b920      	cbnz	r0, 80071ec <_Balloc+0x20>
 80071e2:	216b      	movs	r1, #107	@ 0x6b
 80071e4:	4b17      	ldr	r3, [pc, #92]	@ (8007244 <_Balloc+0x78>)
 80071e6:	4818      	ldr	r0, [pc, #96]	@ (8007248 <_Balloc+0x7c>)
 80071e8:	f002 f8de 	bl	80093a8 <__assert_func>
 80071ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f0:	6006      	str	r6, [r0, #0]
 80071f2:	60c6      	str	r6, [r0, #12]
 80071f4:	69e6      	ldr	r6, [r4, #28]
 80071f6:	68f3      	ldr	r3, [r6, #12]
 80071f8:	b183      	cbz	r3, 800721c <_Balloc+0x50>
 80071fa:	69e3      	ldr	r3, [r4, #28]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007202:	b9b8      	cbnz	r0, 8007234 <_Balloc+0x68>
 8007204:	2101      	movs	r1, #1
 8007206:	fa01 f605 	lsl.w	r6, r1, r5
 800720a:	1d72      	adds	r2, r6, #5
 800720c:	4620      	mov	r0, r4
 800720e:	0092      	lsls	r2, r2, #2
 8007210:	f002 f8e8 	bl	80093e4 <_calloc_r>
 8007214:	b160      	cbz	r0, 8007230 <_Balloc+0x64>
 8007216:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800721a:	e00e      	b.n	800723a <_Balloc+0x6e>
 800721c:	2221      	movs	r2, #33	@ 0x21
 800721e:	2104      	movs	r1, #4
 8007220:	4620      	mov	r0, r4
 8007222:	f002 f8df 	bl	80093e4 <_calloc_r>
 8007226:	69e3      	ldr	r3, [r4, #28]
 8007228:	60f0      	str	r0, [r6, #12]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e4      	bne.n	80071fa <_Balloc+0x2e>
 8007230:	2000      	movs	r0, #0
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	6802      	ldr	r2, [r0, #0]
 8007236:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800723a:	2300      	movs	r3, #0
 800723c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007240:	e7f7      	b.n	8007232 <_Balloc+0x66>
 8007242:	bf00      	nop
 8007244:	0800a3b2 	.word	0x0800a3b2
 8007248:	0800a432 	.word	0x0800a432

0800724c <_Bfree>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	69c6      	ldr	r6, [r0, #28]
 8007250:	4605      	mov	r5, r0
 8007252:	460c      	mov	r4, r1
 8007254:	b976      	cbnz	r6, 8007274 <_Bfree+0x28>
 8007256:	2010      	movs	r0, #16
 8007258:	f7ff ff02 	bl	8007060 <malloc>
 800725c:	4602      	mov	r2, r0
 800725e:	61e8      	str	r0, [r5, #28]
 8007260:	b920      	cbnz	r0, 800726c <_Bfree+0x20>
 8007262:	218f      	movs	r1, #143	@ 0x8f
 8007264:	4b08      	ldr	r3, [pc, #32]	@ (8007288 <_Bfree+0x3c>)
 8007266:	4809      	ldr	r0, [pc, #36]	@ (800728c <_Bfree+0x40>)
 8007268:	f002 f89e 	bl	80093a8 <__assert_func>
 800726c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007270:	6006      	str	r6, [r0, #0]
 8007272:	60c6      	str	r6, [r0, #12]
 8007274:	b13c      	cbz	r4, 8007286 <_Bfree+0x3a>
 8007276:	69eb      	ldr	r3, [r5, #28]
 8007278:	6862      	ldr	r2, [r4, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007280:	6021      	str	r1, [r4, #0]
 8007282:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	0800a3b2 	.word	0x0800a3b2
 800728c:	0800a432 	.word	0x0800a432

08007290 <__multadd>:
 8007290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007294:	4607      	mov	r7, r0
 8007296:	460c      	mov	r4, r1
 8007298:	461e      	mov	r6, r3
 800729a:	2000      	movs	r0, #0
 800729c:	690d      	ldr	r5, [r1, #16]
 800729e:	f101 0c14 	add.w	ip, r1, #20
 80072a2:	f8dc 3000 	ldr.w	r3, [ip]
 80072a6:	3001      	adds	r0, #1
 80072a8:	b299      	uxth	r1, r3
 80072aa:	fb02 6101 	mla	r1, r2, r1, r6
 80072ae:	0c1e      	lsrs	r6, r3, #16
 80072b0:	0c0b      	lsrs	r3, r1, #16
 80072b2:	fb02 3306 	mla	r3, r2, r6, r3
 80072b6:	b289      	uxth	r1, r1
 80072b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072bc:	4285      	cmp	r5, r0
 80072be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072c2:	f84c 1b04 	str.w	r1, [ip], #4
 80072c6:	dcec      	bgt.n	80072a2 <__multadd+0x12>
 80072c8:	b30e      	cbz	r6, 800730e <__multadd+0x7e>
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	42ab      	cmp	r3, r5
 80072ce:	dc19      	bgt.n	8007304 <__multadd+0x74>
 80072d0:	6861      	ldr	r1, [r4, #4]
 80072d2:	4638      	mov	r0, r7
 80072d4:	3101      	adds	r1, #1
 80072d6:	f7ff ff79 	bl	80071cc <_Balloc>
 80072da:	4680      	mov	r8, r0
 80072dc:	b928      	cbnz	r0, 80072ea <__multadd+0x5a>
 80072de:	4602      	mov	r2, r0
 80072e0:	21ba      	movs	r1, #186	@ 0xba
 80072e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007314 <__multadd+0x84>)
 80072e4:	480c      	ldr	r0, [pc, #48]	@ (8007318 <__multadd+0x88>)
 80072e6:	f002 f85f 	bl	80093a8 <__assert_func>
 80072ea:	6922      	ldr	r2, [r4, #16]
 80072ec:	f104 010c 	add.w	r1, r4, #12
 80072f0:	3202      	adds	r2, #2
 80072f2:	0092      	lsls	r2, r2, #2
 80072f4:	300c      	adds	r0, #12
 80072f6:	f7ff f808 	bl	800630a <memcpy>
 80072fa:	4621      	mov	r1, r4
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff ffa5 	bl	800724c <_Bfree>
 8007302:	4644      	mov	r4, r8
 8007304:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007308:	3501      	adds	r5, #1
 800730a:	615e      	str	r6, [r3, #20]
 800730c:	6125      	str	r5, [r4, #16]
 800730e:	4620      	mov	r0, r4
 8007310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007314:	0800a421 	.word	0x0800a421
 8007318:	0800a432 	.word	0x0800a432

0800731c <__s2b>:
 800731c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007320:	4615      	mov	r5, r2
 8007322:	2209      	movs	r2, #9
 8007324:	461f      	mov	r7, r3
 8007326:	3308      	adds	r3, #8
 8007328:	460c      	mov	r4, r1
 800732a:	fb93 f3f2 	sdiv	r3, r3, r2
 800732e:	4606      	mov	r6, r0
 8007330:	2201      	movs	r2, #1
 8007332:	2100      	movs	r1, #0
 8007334:	429a      	cmp	r2, r3
 8007336:	db09      	blt.n	800734c <__s2b+0x30>
 8007338:	4630      	mov	r0, r6
 800733a:	f7ff ff47 	bl	80071cc <_Balloc>
 800733e:	b940      	cbnz	r0, 8007352 <__s2b+0x36>
 8007340:	4602      	mov	r2, r0
 8007342:	21d3      	movs	r1, #211	@ 0xd3
 8007344:	4b18      	ldr	r3, [pc, #96]	@ (80073a8 <__s2b+0x8c>)
 8007346:	4819      	ldr	r0, [pc, #100]	@ (80073ac <__s2b+0x90>)
 8007348:	f002 f82e 	bl	80093a8 <__assert_func>
 800734c:	0052      	lsls	r2, r2, #1
 800734e:	3101      	adds	r1, #1
 8007350:	e7f0      	b.n	8007334 <__s2b+0x18>
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	2d09      	cmp	r5, #9
 8007356:	6143      	str	r3, [r0, #20]
 8007358:	f04f 0301 	mov.w	r3, #1
 800735c:	6103      	str	r3, [r0, #16]
 800735e:	dd16      	ble.n	800738e <__s2b+0x72>
 8007360:	f104 0909 	add.w	r9, r4, #9
 8007364:	46c8      	mov	r8, r9
 8007366:	442c      	add	r4, r5
 8007368:	f818 3b01 	ldrb.w	r3, [r8], #1
 800736c:	4601      	mov	r1, r0
 800736e:	220a      	movs	r2, #10
 8007370:	4630      	mov	r0, r6
 8007372:	3b30      	subs	r3, #48	@ 0x30
 8007374:	f7ff ff8c 	bl	8007290 <__multadd>
 8007378:	45a0      	cmp	r8, r4
 800737a:	d1f5      	bne.n	8007368 <__s2b+0x4c>
 800737c:	f1a5 0408 	sub.w	r4, r5, #8
 8007380:	444c      	add	r4, r9
 8007382:	1b2d      	subs	r5, r5, r4
 8007384:	1963      	adds	r3, r4, r5
 8007386:	42bb      	cmp	r3, r7
 8007388:	db04      	blt.n	8007394 <__s2b+0x78>
 800738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738e:	2509      	movs	r5, #9
 8007390:	340a      	adds	r4, #10
 8007392:	e7f6      	b.n	8007382 <__s2b+0x66>
 8007394:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007398:	4601      	mov	r1, r0
 800739a:	220a      	movs	r2, #10
 800739c:	4630      	mov	r0, r6
 800739e:	3b30      	subs	r3, #48	@ 0x30
 80073a0:	f7ff ff76 	bl	8007290 <__multadd>
 80073a4:	e7ee      	b.n	8007384 <__s2b+0x68>
 80073a6:	bf00      	nop
 80073a8:	0800a421 	.word	0x0800a421
 80073ac:	0800a432 	.word	0x0800a432

080073b0 <__hi0bits>:
 80073b0:	4603      	mov	r3, r0
 80073b2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073b6:	bf3a      	itte	cc
 80073b8:	0403      	lslcc	r3, r0, #16
 80073ba:	2010      	movcc	r0, #16
 80073bc:	2000      	movcs	r0, #0
 80073be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073c2:	bf3c      	itt	cc
 80073c4:	021b      	lslcc	r3, r3, #8
 80073c6:	3008      	addcc	r0, #8
 80073c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073cc:	bf3c      	itt	cc
 80073ce:	011b      	lslcc	r3, r3, #4
 80073d0:	3004      	addcc	r0, #4
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	bf3c      	itt	cc
 80073d8:	009b      	lslcc	r3, r3, #2
 80073da:	3002      	addcc	r0, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	db05      	blt.n	80073ec <__hi0bits+0x3c>
 80073e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80073e4:	f100 0001 	add.w	r0, r0, #1
 80073e8:	bf08      	it	eq
 80073ea:	2020      	moveq	r0, #32
 80073ec:	4770      	bx	lr

080073ee <__lo0bits>:
 80073ee:	6803      	ldr	r3, [r0, #0]
 80073f0:	4602      	mov	r2, r0
 80073f2:	f013 0007 	ands.w	r0, r3, #7
 80073f6:	d00b      	beq.n	8007410 <__lo0bits+0x22>
 80073f8:	07d9      	lsls	r1, r3, #31
 80073fa:	d421      	bmi.n	8007440 <__lo0bits+0x52>
 80073fc:	0798      	lsls	r0, r3, #30
 80073fe:	bf49      	itett	mi
 8007400:	085b      	lsrmi	r3, r3, #1
 8007402:	089b      	lsrpl	r3, r3, #2
 8007404:	2001      	movmi	r0, #1
 8007406:	6013      	strmi	r3, [r2, #0]
 8007408:	bf5c      	itt	pl
 800740a:	2002      	movpl	r0, #2
 800740c:	6013      	strpl	r3, [r2, #0]
 800740e:	4770      	bx	lr
 8007410:	b299      	uxth	r1, r3
 8007412:	b909      	cbnz	r1, 8007418 <__lo0bits+0x2a>
 8007414:	2010      	movs	r0, #16
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	b2d9      	uxtb	r1, r3
 800741a:	b909      	cbnz	r1, 8007420 <__lo0bits+0x32>
 800741c:	3008      	adds	r0, #8
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	0719      	lsls	r1, r3, #28
 8007422:	bf04      	itt	eq
 8007424:	091b      	lsreq	r3, r3, #4
 8007426:	3004      	addeq	r0, #4
 8007428:	0799      	lsls	r1, r3, #30
 800742a:	bf04      	itt	eq
 800742c:	089b      	lsreq	r3, r3, #2
 800742e:	3002      	addeq	r0, #2
 8007430:	07d9      	lsls	r1, r3, #31
 8007432:	d403      	bmi.n	800743c <__lo0bits+0x4e>
 8007434:	085b      	lsrs	r3, r3, #1
 8007436:	f100 0001 	add.w	r0, r0, #1
 800743a:	d003      	beq.n	8007444 <__lo0bits+0x56>
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	4770      	bx	lr
 8007440:	2000      	movs	r0, #0
 8007442:	4770      	bx	lr
 8007444:	2020      	movs	r0, #32
 8007446:	4770      	bx	lr

08007448 <__i2b>:
 8007448:	b510      	push	{r4, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	2101      	movs	r1, #1
 800744e:	f7ff febd 	bl	80071cc <_Balloc>
 8007452:	4602      	mov	r2, r0
 8007454:	b928      	cbnz	r0, 8007462 <__i2b+0x1a>
 8007456:	f240 1145 	movw	r1, #325	@ 0x145
 800745a:	4b04      	ldr	r3, [pc, #16]	@ (800746c <__i2b+0x24>)
 800745c:	4804      	ldr	r0, [pc, #16]	@ (8007470 <__i2b+0x28>)
 800745e:	f001 ffa3 	bl	80093a8 <__assert_func>
 8007462:	2301      	movs	r3, #1
 8007464:	6144      	str	r4, [r0, #20]
 8007466:	6103      	str	r3, [r0, #16]
 8007468:	bd10      	pop	{r4, pc}
 800746a:	bf00      	nop
 800746c:	0800a421 	.word	0x0800a421
 8007470:	0800a432 	.word	0x0800a432

08007474 <__multiply>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	4614      	mov	r4, r2
 800747a:	690a      	ldr	r2, [r1, #16]
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	460f      	mov	r7, r1
 8007480:	429a      	cmp	r2, r3
 8007482:	bfa2      	ittt	ge
 8007484:	4623      	movge	r3, r4
 8007486:	460c      	movge	r4, r1
 8007488:	461f      	movge	r7, r3
 800748a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800748e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	6861      	ldr	r1, [r4, #4]
 8007496:	eb0a 0609 	add.w	r6, sl, r9
 800749a:	42b3      	cmp	r3, r6
 800749c:	b085      	sub	sp, #20
 800749e:	bfb8      	it	lt
 80074a0:	3101      	addlt	r1, #1
 80074a2:	f7ff fe93 	bl	80071cc <_Balloc>
 80074a6:	b930      	cbnz	r0, 80074b6 <__multiply+0x42>
 80074a8:	4602      	mov	r2, r0
 80074aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074ae:	4b43      	ldr	r3, [pc, #268]	@ (80075bc <__multiply+0x148>)
 80074b0:	4843      	ldr	r0, [pc, #268]	@ (80075c0 <__multiply+0x14c>)
 80074b2:	f001 ff79 	bl	80093a8 <__assert_func>
 80074b6:	f100 0514 	add.w	r5, r0, #20
 80074ba:	462b      	mov	r3, r5
 80074bc:	2200      	movs	r2, #0
 80074be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074c2:	4543      	cmp	r3, r8
 80074c4:	d321      	bcc.n	800750a <__multiply+0x96>
 80074c6:	f107 0114 	add.w	r1, r7, #20
 80074ca:	f104 0214 	add.w	r2, r4, #20
 80074ce:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80074d2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	1b13      	subs	r3, r2, r4
 80074da:	3b15      	subs	r3, #21
 80074dc:	f023 0303 	bic.w	r3, r3, #3
 80074e0:	3304      	adds	r3, #4
 80074e2:	f104 0715 	add.w	r7, r4, #21
 80074e6:	42ba      	cmp	r2, r7
 80074e8:	bf38      	it	cc
 80074ea:	2304      	movcc	r3, #4
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	9b02      	ldr	r3, [sp, #8]
 80074f0:	9103      	str	r1, [sp, #12]
 80074f2:	428b      	cmp	r3, r1
 80074f4:	d80c      	bhi.n	8007510 <__multiply+0x9c>
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	dd03      	ble.n	8007502 <__multiply+0x8e>
 80074fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d05a      	beq.n	80075b8 <__multiply+0x144>
 8007502:	6106      	str	r6, [r0, #16]
 8007504:	b005      	add	sp, #20
 8007506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750a:	f843 2b04 	str.w	r2, [r3], #4
 800750e:	e7d8      	b.n	80074c2 <__multiply+0x4e>
 8007510:	f8b1 a000 	ldrh.w	sl, [r1]
 8007514:	f1ba 0f00 	cmp.w	sl, #0
 8007518:	d023      	beq.n	8007562 <__multiply+0xee>
 800751a:	46a9      	mov	r9, r5
 800751c:	f04f 0c00 	mov.w	ip, #0
 8007520:	f104 0e14 	add.w	lr, r4, #20
 8007524:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007528:	f8d9 3000 	ldr.w	r3, [r9]
 800752c:	fa1f fb87 	uxth.w	fp, r7
 8007530:	b29b      	uxth	r3, r3
 8007532:	fb0a 330b 	mla	r3, sl, fp, r3
 8007536:	4463      	add	r3, ip
 8007538:	f8d9 c000 	ldr.w	ip, [r9]
 800753c:	0c3f      	lsrs	r7, r7, #16
 800753e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007542:	fb0a c707 	mla	r7, sl, r7, ip
 8007546:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800754a:	b29b      	uxth	r3, r3
 800754c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007550:	4572      	cmp	r2, lr
 8007552:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007556:	f849 3b04 	str.w	r3, [r9], #4
 800755a:	d8e3      	bhi.n	8007524 <__multiply+0xb0>
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	f845 c003 	str.w	ip, [r5, r3]
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	3104      	adds	r1, #4
 8007566:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800756a:	f1b9 0f00 	cmp.w	r9, #0
 800756e:	d021      	beq.n	80075b4 <__multiply+0x140>
 8007570:	46ae      	mov	lr, r5
 8007572:	f04f 0a00 	mov.w	sl, #0
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	f104 0c14 	add.w	ip, r4, #20
 800757c:	f8bc b000 	ldrh.w	fp, [ip]
 8007580:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007584:	b29b      	uxth	r3, r3
 8007586:	fb09 770b 	mla	r7, r9, fp, r7
 800758a:	4457      	add	r7, sl
 800758c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007590:	f84e 3b04 	str.w	r3, [lr], #4
 8007594:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800759c:	f8be 3000 	ldrh.w	r3, [lr]
 80075a0:	4562      	cmp	r2, ip
 80075a2:	fb09 330a 	mla	r3, r9, sl, r3
 80075a6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ae:	d8e5      	bhi.n	800757c <__multiply+0x108>
 80075b0:	9f01      	ldr	r7, [sp, #4]
 80075b2:	51eb      	str	r3, [r5, r7]
 80075b4:	3504      	adds	r5, #4
 80075b6:	e79a      	b.n	80074ee <__multiply+0x7a>
 80075b8:	3e01      	subs	r6, #1
 80075ba:	e79c      	b.n	80074f6 <__multiply+0x82>
 80075bc:	0800a421 	.word	0x0800a421
 80075c0:	0800a432 	.word	0x0800a432

080075c4 <__pow5mult>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	4615      	mov	r5, r2
 80075ca:	f012 0203 	ands.w	r2, r2, #3
 80075ce:	4607      	mov	r7, r0
 80075d0:	460e      	mov	r6, r1
 80075d2:	d007      	beq.n	80075e4 <__pow5mult+0x20>
 80075d4:	4c25      	ldr	r4, [pc, #148]	@ (800766c <__pow5mult+0xa8>)
 80075d6:	3a01      	subs	r2, #1
 80075d8:	2300      	movs	r3, #0
 80075da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075de:	f7ff fe57 	bl	8007290 <__multadd>
 80075e2:	4606      	mov	r6, r0
 80075e4:	10ad      	asrs	r5, r5, #2
 80075e6:	d03d      	beq.n	8007664 <__pow5mult+0xa0>
 80075e8:	69fc      	ldr	r4, [r7, #28]
 80075ea:	b97c      	cbnz	r4, 800760c <__pow5mult+0x48>
 80075ec:	2010      	movs	r0, #16
 80075ee:	f7ff fd37 	bl	8007060 <malloc>
 80075f2:	4602      	mov	r2, r0
 80075f4:	61f8      	str	r0, [r7, #28]
 80075f6:	b928      	cbnz	r0, 8007604 <__pow5mult+0x40>
 80075f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <__pow5mult+0xac>)
 80075fe:	481d      	ldr	r0, [pc, #116]	@ (8007674 <__pow5mult+0xb0>)
 8007600:	f001 fed2 	bl	80093a8 <__assert_func>
 8007604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007608:	6004      	str	r4, [r0, #0]
 800760a:	60c4      	str	r4, [r0, #12]
 800760c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007614:	b94c      	cbnz	r4, 800762a <__pow5mult+0x66>
 8007616:	f240 2171 	movw	r1, #625	@ 0x271
 800761a:	4638      	mov	r0, r7
 800761c:	f7ff ff14 	bl	8007448 <__i2b>
 8007620:	2300      	movs	r3, #0
 8007622:	4604      	mov	r4, r0
 8007624:	f8c8 0008 	str.w	r0, [r8, #8]
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	f04f 0900 	mov.w	r9, #0
 800762e:	07eb      	lsls	r3, r5, #31
 8007630:	d50a      	bpl.n	8007648 <__pow5mult+0x84>
 8007632:	4631      	mov	r1, r6
 8007634:	4622      	mov	r2, r4
 8007636:	4638      	mov	r0, r7
 8007638:	f7ff ff1c 	bl	8007474 <__multiply>
 800763c:	4680      	mov	r8, r0
 800763e:	4631      	mov	r1, r6
 8007640:	4638      	mov	r0, r7
 8007642:	f7ff fe03 	bl	800724c <_Bfree>
 8007646:	4646      	mov	r6, r8
 8007648:	106d      	asrs	r5, r5, #1
 800764a:	d00b      	beq.n	8007664 <__pow5mult+0xa0>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	b938      	cbnz	r0, 8007660 <__pow5mult+0x9c>
 8007650:	4622      	mov	r2, r4
 8007652:	4621      	mov	r1, r4
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ff0d 	bl	8007474 <__multiply>
 800765a:	6020      	str	r0, [r4, #0]
 800765c:	f8c0 9000 	str.w	r9, [r0]
 8007660:	4604      	mov	r4, r0
 8007662:	e7e4      	b.n	800762e <__pow5mult+0x6a>
 8007664:	4630      	mov	r0, r6
 8007666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800766a:	bf00      	nop
 800766c:	0800a48c 	.word	0x0800a48c
 8007670:	0800a3b2 	.word	0x0800a3b2
 8007674:	0800a432 	.word	0x0800a432

08007678 <__lshift>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	460c      	mov	r4, r1
 800767e:	4607      	mov	r7, r0
 8007680:	4691      	mov	r9, r2
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	6849      	ldr	r1, [r1, #4]
 8007686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007690:	f108 0601 	add.w	r6, r8, #1
 8007694:	42b3      	cmp	r3, r6
 8007696:	db0b      	blt.n	80076b0 <__lshift+0x38>
 8007698:	4638      	mov	r0, r7
 800769a:	f7ff fd97 	bl	80071cc <_Balloc>
 800769e:	4605      	mov	r5, r0
 80076a0:	b948      	cbnz	r0, 80076b6 <__lshift+0x3e>
 80076a2:	4602      	mov	r2, r0
 80076a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076a8:	4b27      	ldr	r3, [pc, #156]	@ (8007748 <__lshift+0xd0>)
 80076aa:	4828      	ldr	r0, [pc, #160]	@ (800774c <__lshift+0xd4>)
 80076ac:	f001 fe7c 	bl	80093a8 <__assert_func>
 80076b0:	3101      	adds	r1, #1
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	e7ee      	b.n	8007694 <__lshift+0x1c>
 80076b6:	2300      	movs	r3, #0
 80076b8:	f100 0114 	add.w	r1, r0, #20
 80076bc:	f100 0210 	add.w	r2, r0, #16
 80076c0:	4618      	mov	r0, r3
 80076c2:	4553      	cmp	r3, sl
 80076c4:	db33      	blt.n	800772e <__lshift+0xb6>
 80076c6:	6920      	ldr	r0, [r4, #16]
 80076c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076cc:	f104 0314 	add.w	r3, r4, #20
 80076d0:	f019 091f 	ands.w	r9, r9, #31
 80076d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076dc:	d02b      	beq.n	8007736 <__lshift+0xbe>
 80076de:	468a      	mov	sl, r1
 80076e0:	2200      	movs	r2, #0
 80076e2:	f1c9 0e20 	rsb	lr, r9, #32
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	fa00 f009 	lsl.w	r0, r0, r9
 80076ec:	4310      	orrs	r0, r2
 80076ee:	f84a 0b04 	str.w	r0, [sl], #4
 80076f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f6:	459c      	cmp	ip, r3
 80076f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80076fc:	d8f3      	bhi.n	80076e6 <__lshift+0x6e>
 80076fe:	ebac 0304 	sub.w	r3, ip, r4
 8007702:	3b15      	subs	r3, #21
 8007704:	f023 0303 	bic.w	r3, r3, #3
 8007708:	3304      	adds	r3, #4
 800770a:	f104 0015 	add.w	r0, r4, #21
 800770e:	4584      	cmp	ip, r0
 8007710:	bf38      	it	cc
 8007712:	2304      	movcc	r3, #4
 8007714:	50ca      	str	r2, [r1, r3]
 8007716:	b10a      	cbz	r2, 800771c <__lshift+0xa4>
 8007718:	f108 0602 	add.w	r6, r8, #2
 800771c:	3e01      	subs	r6, #1
 800771e:	4638      	mov	r0, r7
 8007720:	4621      	mov	r1, r4
 8007722:	612e      	str	r6, [r5, #16]
 8007724:	f7ff fd92 	bl	800724c <_Bfree>
 8007728:	4628      	mov	r0, r5
 800772a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007732:	3301      	adds	r3, #1
 8007734:	e7c5      	b.n	80076c2 <__lshift+0x4a>
 8007736:	3904      	subs	r1, #4
 8007738:	f853 2b04 	ldr.w	r2, [r3], #4
 800773c:	459c      	cmp	ip, r3
 800773e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007742:	d8f9      	bhi.n	8007738 <__lshift+0xc0>
 8007744:	e7ea      	b.n	800771c <__lshift+0xa4>
 8007746:	bf00      	nop
 8007748:	0800a421 	.word	0x0800a421
 800774c:	0800a432 	.word	0x0800a432

08007750 <__mcmp>:
 8007750:	4603      	mov	r3, r0
 8007752:	690a      	ldr	r2, [r1, #16]
 8007754:	6900      	ldr	r0, [r0, #16]
 8007756:	b530      	push	{r4, r5, lr}
 8007758:	1a80      	subs	r0, r0, r2
 800775a:	d10e      	bne.n	800777a <__mcmp+0x2a>
 800775c:	3314      	adds	r3, #20
 800775e:	3114      	adds	r1, #20
 8007760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800776c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007770:	4295      	cmp	r5, r2
 8007772:	d003      	beq.n	800777c <__mcmp+0x2c>
 8007774:	d205      	bcs.n	8007782 <__mcmp+0x32>
 8007776:	f04f 30ff 	mov.w	r0, #4294967295
 800777a:	bd30      	pop	{r4, r5, pc}
 800777c:	42a3      	cmp	r3, r4
 800777e:	d3f3      	bcc.n	8007768 <__mcmp+0x18>
 8007780:	e7fb      	b.n	800777a <__mcmp+0x2a>
 8007782:	2001      	movs	r0, #1
 8007784:	e7f9      	b.n	800777a <__mcmp+0x2a>
	...

08007788 <__mdiff>:
 8007788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4689      	mov	r9, r1
 800778e:	4606      	mov	r6, r0
 8007790:	4611      	mov	r1, r2
 8007792:	4648      	mov	r0, r9
 8007794:	4614      	mov	r4, r2
 8007796:	f7ff ffdb 	bl	8007750 <__mcmp>
 800779a:	1e05      	subs	r5, r0, #0
 800779c:	d112      	bne.n	80077c4 <__mdiff+0x3c>
 800779e:	4629      	mov	r1, r5
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff fd13 	bl	80071cc <_Balloc>
 80077a6:	4602      	mov	r2, r0
 80077a8:	b928      	cbnz	r0, 80077b6 <__mdiff+0x2e>
 80077aa:	f240 2137 	movw	r1, #567	@ 0x237
 80077ae:	4b3e      	ldr	r3, [pc, #248]	@ (80078a8 <__mdiff+0x120>)
 80077b0:	483e      	ldr	r0, [pc, #248]	@ (80078ac <__mdiff+0x124>)
 80077b2:	f001 fdf9 	bl	80093a8 <__assert_func>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077bc:	4610      	mov	r0, r2
 80077be:	b003      	add	sp, #12
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c4:	bfbc      	itt	lt
 80077c6:	464b      	movlt	r3, r9
 80077c8:	46a1      	movlt	r9, r4
 80077ca:	4630      	mov	r0, r6
 80077cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077d0:	bfba      	itte	lt
 80077d2:	461c      	movlt	r4, r3
 80077d4:	2501      	movlt	r5, #1
 80077d6:	2500      	movge	r5, #0
 80077d8:	f7ff fcf8 	bl	80071cc <_Balloc>
 80077dc:	4602      	mov	r2, r0
 80077de:	b918      	cbnz	r0, 80077e8 <__mdiff+0x60>
 80077e0:	f240 2145 	movw	r1, #581	@ 0x245
 80077e4:	4b30      	ldr	r3, [pc, #192]	@ (80078a8 <__mdiff+0x120>)
 80077e6:	e7e3      	b.n	80077b0 <__mdiff+0x28>
 80077e8:	f100 0b14 	add.w	fp, r0, #20
 80077ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077f0:	f109 0310 	add.w	r3, r9, #16
 80077f4:	60c5      	str	r5, [r0, #12]
 80077f6:	f04f 0c00 	mov.w	ip, #0
 80077fa:	f109 0514 	add.w	r5, r9, #20
 80077fe:	46d9      	mov	r9, fp
 8007800:	6926      	ldr	r6, [r4, #16]
 8007802:	f104 0e14 	add.w	lr, r4, #20
 8007806:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800780a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	9b01      	ldr	r3, [sp, #4]
 8007812:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007816:	f853 af04 	ldr.w	sl, [r3, #4]!
 800781a:	b281      	uxth	r1, r0
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	fa1f f38a 	uxth.w	r3, sl
 8007822:	1a5b      	subs	r3, r3, r1
 8007824:	0c00      	lsrs	r0, r0, #16
 8007826:	4463      	add	r3, ip
 8007828:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800782c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007830:	b29b      	uxth	r3, r3
 8007832:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007836:	4576      	cmp	r6, lr
 8007838:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800783c:	f849 3b04 	str.w	r3, [r9], #4
 8007840:	d8e6      	bhi.n	8007810 <__mdiff+0x88>
 8007842:	1b33      	subs	r3, r6, r4
 8007844:	3b15      	subs	r3, #21
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	3415      	adds	r4, #21
 800784c:	3304      	adds	r3, #4
 800784e:	42a6      	cmp	r6, r4
 8007850:	bf38      	it	cc
 8007852:	2304      	movcc	r3, #4
 8007854:	441d      	add	r5, r3
 8007856:	445b      	add	r3, fp
 8007858:	461e      	mov	r6, r3
 800785a:	462c      	mov	r4, r5
 800785c:	4544      	cmp	r4, r8
 800785e:	d30e      	bcc.n	800787e <__mdiff+0xf6>
 8007860:	f108 0103 	add.w	r1, r8, #3
 8007864:	1b49      	subs	r1, r1, r5
 8007866:	f021 0103 	bic.w	r1, r1, #3
 800786a:	3d03      	subs	r5, #3
 800786c:	45a8      	cmp	r8, r5
 800786e:	bf38      	it	cc
 8007870:	2100      	movcc	r1, #0
 8007872:	440b      	add	r3, r1
 8007874:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007878:	b199      	cbz	r1, 80078a2 <__mdiff+0x11a>
 800787a:	6117      	str	r7, [r2, #16]
 800787c:	e79e      	b.n	80077bc <__mdiff+0x34>
 800787e:	46e6      	mov	lr, ip
 8007880:	f854 1b04 	ldr.w	r1, [r4], #4
 8007884:	fa1f fc81 	uxth.w	ip, r1
 8007888:	44f4      	add	ip, lr
 800788a:	0c08      	lsrs	r0, r1, #16
 800788c:	4471      	add	r1, lr
 800788e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007892:	b289      	uxth	r1, r1
 8007894:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800789c:	f846 1b04 	str.w	r1, [r6], #4
 80078a0:	e7dc      	b.n	800785c <__mdiff+0xd4>
 80078a2:	3f01      	subs	r7, #1
 80078a4:	e7e6      	b.n	8007874 <__mdiff+0xec>
 80078a6:	bf00      	nop
 80078a8:	0800a421 	.word	0x0800a421
 80078ac:	0800a432 	.word	0x0800a432

080078b0 <__ulp>:
 80078b0:	4b0e      	ldr	r3, [pc, #56]	@ (80078ec <__ulp+0x3c>)
 80078b2:	400b      	ands	r3, r1
 80078b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dc08      	bgt.n	80078ce <__ulp+0x1e>
 80078bc:	425b      	negs	r3, r3
 80078be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80078c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80078c6:	da04      	bge.n	80078d2 <__ulp+0x22>
 80078c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80078cc:	4113      	asrs	r3, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	e008      	b.n	80078e4 <__ulp+0x34>
 80078d2:	f1a2 0314 	sub.w	r3, r2, #20
 80078d6:	2b1e      	cmp	r3, #30
 80078d8:	bfd6      	itet	le
 80078da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80078de:	2201      	movgt	r2, #1
 80078e0:	40da      	lsrle	r2, r3
 80078e2:	2300      	movs	r3, #0
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	7ff00000 	.word	0x7ff00000

080078f0 <__b2d>:
 80078f0:	6902      	ldr	r2, [r0, #16]
 80078f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f4:	f100 0614 	add.w	r6, r0, #20
 80078f8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80078fc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007900:	4f1e      	ldr	r7, [pc, #120]	@ (800797c <__b2d+0x8c>)
 8007902:	4620      	mov	r0, r4
 8007904:	f7ff fd54 	bl	80073b0 <__hi0bits>
 8007908:	4603      	mov	r3, r0
 800790a:	f1c0 0020 	rsb	r0, r0, #32
 800790e:	2b0a      	cmp	r3, #10
 8007910:	f1a2 0504 	sub.w	r5, r2, #4
 8007914:	6008      	str	r0, [r1, #0]
 8007916:	dc12      	bgt.n	800793e <__b2d+0x4e>
 8007918:	42ae      	cmp	r6, r5
 800791a:	bf2c      	ite	cs
 800791c:	2200      	movcs	r2, #0
 800791e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007922:	f1c3 0c0b 	rsb	ip, r3, #11
 8007926:	3315      	adds	r3, #21
 8007928:	fa24 fe0c 	lsr.w	lr, r4, ip
 800792c:	fa04 f303 	lsl.w	r3, r4, r3
 8007930:	fa22 f20c 	lsr.w	r2, r2, ip
 8007934:	ea4e 0107 	orr.w	r1, lr, r7
 8007938:	431a      	orrs	r2, r3
 800793a:	4610      	mov	r0, r2
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793e:	42ae      	cmp	r6, r5
 8007940:	bf36      	itet	cc
 8007942:	f1a2 0508 	subcc.w	r5, r2, #8
 8007946:	2200      	movcs	r2, #0
 8007948:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800794c:	3b0b      	subs	r3, #11
 800794e:	d012      	beq.n	8007976 <__b2d+0x86>
 8007950:	f1c3 0720 	rsb	r7, r3, #32
 8007954:	fa22 f107 	lsr.w	r1, r2, r7
 8007958:	409c      	lsls	r4, r3
 800795a:	430c      	orrs	r4, r1
 800795c:	42b5      	cmp	r5, r6
 800795e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007962:	bf94      	ite	ls
 8007964:	2400      	movls	r4, #0
 8007966:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800796a:	409a      	lsls	r2, r3
 800796c:	40fc      	lsrs	r4, r7
 800796e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007972:	4322      	orrs	r2, r4
 8007974:	e7e1      	b.n	800793a <__b2d+0x4a>
 8007976:	ea44 0107 	orr.w	r1, r4, r7
 800797a:	e7de      	b.n	800793a <__b2d+0x4a>
 800797c:	3ff00000 	.word	0x3ff00000

08007980 <__d2b>:
 8007980:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007984:	2101      	movs	r1, #1
 8007986:	4690      	mov	r8, r2
 8007988:	4699      	mov	r9, r3
 800798a:	9e08      	ldr	r6, [sp, #32]
 800798c:	f7ff fc1e 	bl	80071cc <_Balloc>
 8007990:	4604      	mov	r4, r0
 8007992:	b930      	cbnz	r0, 80079a2 <__d2b+0x22>
 8007994:	4602      	mov	r2, r0
 8007996:	f240 310f 	movw	r1, #783	@ 0x30f
 800799a:	4b23      	ldr	r3, [pc, #140]	@ (8007a28 <__d2b+0xa8>)
 800799c:	4823      	ldr	r0, [pc, #140]	@ (8007a2c <__d2b+0xac>)
 800799e:	f001 fd03 	bl	80093a8 <__assert_func>
 80079a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079aa:	b10d      	cbz	r5, 80079b0 <__d2b+0x30>
 80079ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	f1b8 0300 	subs.w	r3, r8, #0
 80079b6:	d024      	beq.n	8007a02 <__d2b+0x82>
 80079b8:	4668      	mov	r0, sp
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	f7ff fd17 	bl	80073ee <__lo0bits>
 80079c0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079c4:	b1d8      	cbz	r0, 80079fe <__d2b+0x7e>
 80079c6:	f1c0 0320 	rsb	r3, r0, #32
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	430b      	orrs	r3, r1
 80079d0:	40c2      	lsrs	r2, r0
 80079d2:	6163      	str	r3, [r4, #20]
 80079d4:	9201      	str	r2, [sp, #4]
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bf0c      	ite	eq
 80079dc:	2201      	moveq	r2, #1
 80079de:	2202      	movne	r2, #2
 80079e0:	61a3      	str	r3, [r4, #24]
 80079e2:	6122      	str	r2, [r4, #16]
 80079e4:	b1ad      	cbz	r5, 8007a12 <__d2b+0x92>
 80079e6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80079ea:	4405      	add	r5, r0
 80079ec:	6035      	str	r5, [r6, #0]
 80079ee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80079f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f4:	6018      	str	r0, [r3, #0]
 80079f6:	4620      	mov	r0, r4
 80079f8:	b002      	add	sp, #8
 80079fa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80079fe:	6161      	str	r1, [r4, #20]
 8007a00:	e7e9      	b.n	80079d6 <__d2b+0x56>
 8007a02:	a801      	add	r0, sp, #4
 8007a04:	f7ff fcf3 	bl	80073ee <__lo0bits>
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	6163      	str	r3, [r4, #20]
 8007a0e:	3020      	adds	r0, #32
 8007a10:	e7e7      	b.n	80079e2 <__d2b+0x62>
 8007a12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a1a:	6030      	str	r0, [r6, #0]
 8007a1c:	6918      	ldr	r0, [r3, #16]
 8007a1e:	f7ff fcc7 	bl	80073b0 <__hi0bits>
 8007a22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a26:	e7e4      	b.n	80079f2 <__d2b+0x72>
 8007a28:	0800a421 	.word	0x0800a421
 8007a2c:	0800a432 	.word	0x0800a432

08007a30 <__ratio>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	b085      	sub	sp, #20
 8007a36:	e9cd 1000 	strd	r1, r0, [sp]
 8007a3a:	a902      	add	r1, sp, #8
 8007a3c:	f7ff ff58 	bl	80078f0 <__b2d>
 8007a40:	468b      	mov	fp, r1
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	9800      	ldr	r0, [sp, #0]
 8007a48:	a903      	add	r1, sp, #12
 8007a4a:	f7ff ff51 	bl	80078f0 <__b2d>
 8007a4e:	460d      	mov	r5, r1
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	4689      	mov	r9, r1
 8007a54:	6919      	ldr	r1, [r3, #16]
 8007a56:	9b00      	ldr	r3, [sp, #0]
 8007a58:	4604      	mov	r4, r0
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	1ac9      	subs	r1, r1, r3
 8007a60:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfcd      	iteet	gt
 8007a6e:	463a      	movgt	r2, r7
 8007a70:	462a      	movle	r2, r5
 8007a72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007a76:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007a7a:	bfd8      	it	le
 8007a7c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007a80:	464b      	mov	r3, r9
 8007a82:	4622      	mov	r2, r4
 8007a84:	4659      	mov	r1, fp
 8007a86:	f7f8 fe51 	bl	800072c <__aeabi_ddiv>
 8007a8a:	b005      	add	sp, #20
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a90 <__copybits>:
 8007a90:	3901      	subs	r1, #1
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	1149      	asrs	r1, r1, #5
 8007a96:	6914      	ldr	r4, [r2, #16]
 8007a98:	3101      	adds	r1, #1
 8007a9a:	f102 0314 	add.w	r3, r2, #20
 8007a9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007aa2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007aa6:	1f05      	subs	r5, r0, #4
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d30c      	bcc.n	8007ac6 <__copybits+0x36>
 8007aac:	1aa3      	subs	r3, r4, r2
 8007aae:	3b11      	subs	r3, #17
 8007ab0:	f023 0303 	bic.w	r3, r3, #3
 8007ab4:	3211      	adds	r2, #17
 8007ab6:	42a2      	cmp	r2, r4
 8007ab8:	bf88      	it	hi
 8007aba:	2300      	movhi	r3, #0
 8007abc:	4418      	add	r0, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4288      	cmp	r0, r1
 8007ac2:	d305      	bcc.n	8007ad0 <__copybits+0x40>
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	f853 6b04 	ldr.w	r6, [r3], #4
 8007aca:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ace:	e7eb      	b.n	8007aa8 <__copybits+0x18>
 8007ad0:	f840 3b04 	str.w	r3, [r0], #4
 8007ad4:	e7f4      	b.n	8007ac0 <__copybits+0x30>

08007ad6 <__any_on>:
 8007ad6:	f100 0214 	add.w	r2, r0, #20
 8007ada:	6900      	ldr	r0, [r0, #16]
 8007adc:	114b      	asrs	r3, r1, #5
 8007ade:	4298      	cmp	r0, r3
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	db11      	blt.n	8007b08 <__any_on+0x32>
 8007ae4:	dd0a      	ble.n	8007afc <__any_on+0x26>
 8007ae6:	f011 011f 	ands.w	r1, r1, #31
 8007aea:	d007      	beq.n	8007afc <__any_on+0x26>
 8007aec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007af0:	fa24 f001 	lsr.w	r0, r4, r1
 8007af4:	fa00 f101 	lsl.w	r1, r0, r1
 8007af8:	428c      	cmp	r4, r1
 8007afa:	d10b      	bne.n	8007b14 <__any_on+0x3e>
 8007afc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d803      	bhi.n	8007b0c <__any_on+0x36>
 8007b04:	2000      	movs	r0, #0
 8007b06:	bd10      	pop	{r4, pc}
 8007b08:	4603      	mov	r3, r0
 8007b0a:	e7f7      	b.n	8007afc <__any_on+0x26>
 8007b0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b10:	2900      	cmp	r1, #0
 8007b12:	d0f5      	beq.n	8007b00 <__any_on+0x2a>
 8007b14:	2001      	movs	r0, #1
 8007b16:	e7f6      	b.n	8007b06 <__any_on+0x30>

08007b18 <sulp>:
 8007b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1c:	460f      	mov	r7, r1
 8007b1e:	4690      	mov	r8, r2
 8007b20:	f7ff fec6 	bl	80078b0 <__ulp>
 8007b24:	4604      	mov	r4, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	f1b8 0f00 	cmp.w	r8, #0
 8007b2c:	d011      	beq.n	8007b52 <sulp+0x3a>
 8007b2e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007b32:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dd0b      	ble.n	8007b52 <sulp+0x3a>
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	051b      	lsls	r3, r3, #20
 8007b3e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007b42:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007b46:	4622      	mov	r2, r4
 8007b48:	462b      	mov	r3, r5
 8007b4a:	f7f8 fcc5 	bl	80004d8 <__aeabi_dmul>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	460d      	mov	r5, r1
 8007b52:	4620      	mov	r0, r4
 8007b54:	4629      	mov	r1, r5
 8007b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b5a:	0000      	movs	r0, r0
 8007b5c:	0000      	movs	r0, r0
	...

08007b60 <_strtod_l>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	b09f      	sub	sp, #124	@ 0x7c
 8007b66:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b68:	2200      	movs	r2, #0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	f04f 0b00 	mov.w	fp, #0
 8007b76:	460a      	mov	r2, r1
 8007b78:	9005      	str	r0, [sp, #20]
 8007b7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b7c:	7811      	ldrb	r1, [r2, #0]
 8007b7e:	292b      	cmp	r1, #43	@ 0x2b
 8007b80:	d048      	beq.n	8007c14 <_strtod_l+0xb4>
 8007b82:	d836      	bhi.n	8007bf2 <_strtod_l+0x92>
 8007b84:	290d      	cmp	r1, #13
 8007b86:	d830      	bhi.n	8007bea <_strtod_l+0x8a>
 8007b88:	2908      	cmp	r1, #8
 8007b8a:	d830      	bhi.n	8007bee <_strtod_l+0x8e>
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d039      	beq.n	8007c04 <_strtod_l+0xa4>
 8007b90:	2200      	movs	r2, #0
 8007b92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007b96:	782a      	ldrb	r2, [r5, #0]
 8007b98:	2a30      	cmp	r2, #48	@ 0x30
 8007b9a:	f040 80b1 	bne.w	8007d00 <_strtod_l+0x1a0>
 8007b9e:	786a      	ldrb	r2, [r5, #1]
 8007ba0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ba4:	2a58      	cmp	r2, #88	@ 0x58
 8007ba6:	d16c      	bne.n	8007c82 <_strtod_l+0x122>
 8007ba8:	9302      	str	r3, [sp, #8]
 8007baa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bac:	4a8e      	ldr	r2, [pc, #568]	@ (8007de8 <_strtod_l+0x288>)
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	ab1a      	add	r3, sp, #104	@ 0x68
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	9805      	ldr	r0, [sp, #20]
 8007bb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007bb8:	a919      	add	r1, sp, #100	@ 0x64
 8007bba:	f001 fc8f 	bl	80094dc <__gethex>
 8007bbe:	f010 060f 	ands.w	r6, r0, #15
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	d005      	beq.n	8007bd2 <_strtod_l+0x72>
 8007bc6:	2e06      	cmp	r6, #6
 8007bc8:	d126      	bne.n	8007c18 <_strtod_l+0xb8>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	3501      	adds	r5, #1
 8007bce:	9519      	str	r5, [sp, #100]	@ 0x64
 8007bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f040 8584 	bne.w	80086e2 <_strtod_l+0xb82>
 8007bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bdc:	b1bb      	cbz	r3, 8007c0e <_strtod_l+0xae>
 8007bde:	4650      	mov	r0, sl
 8007be0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007be4:	b01f      	add	sp, #124	@ 0x7c
 8007be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bea:	2920      	cmp	r1, #32
 8007bec:	d1d0      	bne.n	8007b90 <_strtod_l+0x30>
 8007bee:	3201      	adds	r2, #1
 8007bf0:	e7c3      	b.n	8007b7a <_strtod_l+0x1a>
 8007bf2:	292d      	cmp	r1, #45	@ 0x2d
 8007bf4:	d1cc      	bne.n	8007b90 <_strtod_l+0x30>
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007bfa:	1c51      	adds	r1, r2, #1
 8007bfc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007bfe:	7852      	ldrb	r2, [r2, #1]
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	d1c7      	bne.n	8007b94 <_strtod_l+0x34>
 8007c04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c06:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f040 8568 	bne.w	80086de <_strtod_l+0xb7e>
 8007c0e:	4650      	mov	r0, sl
 8007c10:	4659      	mov	r1, fp
 8007c12:	e7e7      	b.n	8007be4 <_strtod_l+0x84>
 8007c14:	2100      	movs	r1, #0
 8007c16:	e7ef      	b.n	8007bf8 <_strtod_l+0x98>
 8007c18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c1a:	b13a      	cbz	r2, 8007c2c <_strtod_l+0xcc>
 8007c1c:	2135      	movs	r1, #53	@ 0x35
 8007c1e:	a81c      	add	r0, sp, #112	@ 0x70
 8007c20:	f7ff ff36 	bl	8007a90 <__copybits>
 8007c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c26:	9805      	ldr	r0, [sp, #20]
 8007c28:	f7ff fb10 	bl	800724c <_Bfree>
 8007c2c:	3e01      	subs	r6, #1
 8007c2e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c30:	2e04      	cmp	r6, #4
 8007c32:	d806      	bhi.n	8007c42 <_strtod_l+0xe2>
 8007c34:	e8df f006 	tbb	[pc, r6]
 8007c38:	201d0314 	.word	0x201d0314
 8007c3c:	14          	.byte	0x14
 8007c3d:	00          	.byte	0x00
 8007c3e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007c42:	05e1      	lsls	r1, r4, #23
 8007c44:	bf48      	it	mi
 8007c46:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007c4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c4e:	0d1b      	lsrs	r3, r3, #20
 8007c50:	051b      	lsls	r3, r3, #20
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1bd      	bne.n	8007bd2 <_strtod_l+0x72>
 8007c56:	f7fe fb1d 	bl	8006294 <__errno>
 8007c5a:	2322      	movs	r3, #34	@ 0x22
 8007c5c:	6003      	str	r3, [r0, #0]
 8007c5e:	e7b8      	b.n	8007bd2 <_strtod_l+0x72>
 8007c60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c6c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c70:	e7e7      	b.n	8007c42 <_strtod_l+0xe2>
 8007c72:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007dec <_strtod_l+0x28c>
 8007c76:	e7e4      	b.n	8007c42 <_strtod_l+0xe2>
 8007c78:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c80:	e7df      	b.n	8007c42 <_strtod_l+0xe2>
 8007c82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b30      	cmp	r3, #48	@ 0x30
 8007c8c:	d0f9      	beq.n	8007c82 <_strtod_l+0x122>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d09f      	beq.n	8007bd2 <_strtod_l+0x72>
 8007c92:	2301      	movs	r3, #1
 8007c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c98:	220a      	movs	r2, #10
 8007c9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007ca6:	7805      	ldrb	r5, [r0, #0]
 8007ca8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007cac:	b2d9      	uxtb	r1, r3
 8007cae:	2909      	cmp	r1, #9
 8007cb0:	d928      	bls.n	8007d04 <_strtod_l+0x1a4>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	494e      	ldr	r1, [pc, #312]	@ (8007df0 <_strtod_l+0x290>)
 8007cb6:	f001 fb4e 	bl	8009356 <strncmp>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d032      	beq.n	8007d24 <_strtod_l+0x1c4>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4681      	mov	r9, r0
 8007cc4:	463d      	mov	r5, r7
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2a65      	cmp	r2, #101	@ 0x65
 8007cca:	d001      	beq.n	8007cd0 <_strtod_l+0x170>
 8007ccc:	2a45      	cmp	r2, #69	@ 0x45
 8007cce:	d114      	bne.n	8007cfa <_strtod_l+0x19a>
 8007cd0:	b91d      	cbnz	r5, 8007cda <_strtod_l+0x17a>
 8007cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cd4:	4302      	orrs	r2, r0
 8007cd6:	d095      	beq.n	8007c04 <_strtod_l+0xa4>
 8007cd8:	2500      	movs	r5, #0
 8007cda:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007cdc:	1c62      	adds	r2, r4, #1
 8007cde:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ce0:	7862      	ldrb	r2, [r4, #1]
 8007ce2:	2a2b      	cmp	r2, #43	@ 0x2b
 8007ce4:	d077      	beq.n	8007dd6 <_strtod_l+0x276>
 8007ce6:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ce8:	d07b      	beq.n	8007de2 <_strtod_l+0x282>
 8007cea:	f04f 0c00 	mov.w	ip, #0
 8007cee:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007cf2:	2909      	cmp	r1, #9
 8007cf4:	f240 8082 	bls.w	8007dfc <_strtod_l+0x29c>
 8007cf8:	9419      	str	r4, [sp, #100]	@ 0x64
 8007cfa:	f04f 0800 	mov.w	r8, #0
 8007cfe:	e0a2      	b.n	8007e46 <_strtod_l+0x2e6>
 8007d00:	2300      	movs	r3, #0
 8007d02:	e7c7      	b.n	8007c94 <_strtod_l+0x134>
 8007d04:	2f08      	cmp	r7, #8
 8007d06:	bfd5      	itete	le
 8007d08:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007d0a:	9908      	ldrgt	r1, [sp, #32]
 8007d0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d10:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d14:	f100 0001 	add.w	r0, r0, #1
 8007d18:	bfd4      	ite	le
 8007d1a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d1c:	9308      	strgt	r3, [sp, #32]
 8007d1e:	3701      	adds	r7, #1
 8007d20:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d22:	e7bf      	b.n	8007ca4 <_strtod_l+0x144>
 8007d24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d2a:	785a      	ldrb	r2, [r3, #1]
 8007d2c:	b37f      	cbz	r7, 8007d8e <_strtod_l+0x22e>
 8007d2e:	4681      	mov	r9, r0
 8007d30:	463d      	mov	r5, r7
 8007d32:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d36:	2b09      	cmp	r3, #9
 8007d38:	d912      	bls.n	8007d60 <_strtod_l+0x200>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e7c4      	b.n	8007cc8 <_strtod_l+0x168>
 8007d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d40:	3001      	adds	r0, #1
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d46:	785a      	ldrb	r2, [r3, #1]
 8007d48:	2a30      	cmp	r2, #48	@ 0x30
 8007d4a:	d0f8      	beq.n	8007d3e <_strtod_l+0x1de>
 8007d4c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	f200 84cb 	bhi.w	80086ec <_strtod_l+0xb8c>
 8007d56:	4681      	mov	r9, r0
 8007d58:	2000      	movs	r0, #0
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d60:	3a30      	subs	r2, #48	@ 0x30
 8007d62:	f100 0301 	add.w	r3, r0, #1
 8007d66:	d02a      	beq.n	8007dbe <_strtod_l+0x25e>
 8007d68:	4499      	add	r9, r3
 8007d6a:	210a      	movs	r1, #10
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	eb00 0c05 	add.w	ip, r0, r5
 8007d72:	4563      	cmp	r3, ip
 8007d74:	d10d      	bne.n	8007d92 <_strtod_l+0x232>
 8007d76:	1c69      	adds	r1, r5, #1
 8007d78:	4401      	add	r1, r0
 8007d7a:	4428      	add	r0, r5
 8007d7c:	2808      	cmp	r0, #8
 8007d7e:	dc16      	bgt.n	8007dae <_strtod_l+0x24e>
 8007d80:	230a      	movs	r3, #10
 8007d82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d84:	fb03 2300 	mla	r3, r3, r0, r2
 8007d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e018      	b.n	8007dc0 <_strtod_l+0x260>
 8007d8e:	4638      	mov	r0, r7
 8007d90:	e7da      	b.n	8007d48 <_strtod_l+0x1e8>
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	f103 0301 	add.w	r3, r3, #1
 8007d98:	dc03      	bgt.n	8007da2 <_strtod_l+0x242>
 8007d9a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d9c:	434e      	muls	r6, r1
 8007d9e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007da0:	e7e7      	b.n	8007d72 <_strtod_l+0x212>
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	bfde      	ittt	le
 8007da6:	9e08      	ldrle	r6, [sp, #32]
 8007da8:	434e      	mulle	r6, r1
 8007daa:	9608      	strle	r6, [sp, #32]
 8007dac:	e7e1      	b.n	8007d72 <_strtod_l+0x212>
 8007dae:	280f      	cmp	r0, #15
 8007db0:	dceb      	bgt.n	8007d8a <_strtod_l+0x22a>
 8007db2:	230a      	movs	r3, #10
 8007db4:	9808      	ldr	r0, [sp, #32]
 8007db6:	fb03 2300 	mla	r3, r3, r0, r2
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	e7e5      	b.n	8007d8a <_strtod_l+0x22a>
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	1c50      	adds	r0, r2, #1
 8007dc6:	9019      	str	r0, [sp, #100]	@ 0x64
 8007dc8:	7852      	ldrb	r2, [r2, #1]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	e7b1      	b.n	8007d32 <_strtod_l+0x1d2>
 8007dce:	f04f 0900 	mov.w	r9, #0
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e77d      	b.n	8007cd2 <_strtod_l+0x172>
 8007dd6:	f04f 0c00 	mov.w	ip, #0
 8007dda:	1ca2      	adds	r2, r4, #2
 8007ddc:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dde:	78a2      	ldrb	r2, [r4, #2]
 8007de0:	e785      	b.n	8007cee <_strtod_l+0x18e>
 8007de2:	f04f 0c01 	mov.w	ip, #1
 8007de6:	e7f8      	b.n	8007dda <_strtod_l+0x27a>
 8007de8:	0800a5a0 	.word	0x0800a5a0
 8007dec:	7ff00000 	.word	0x7ff00000
 8007df0:	0800a588 	.word	0x0800a588
 8007df4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007df6:	1c51      	adds	r1, r2, #1
 8007df8:	9119      	str	r1, [sp, #100]	@ 0x64
 8007dfa:	7852      	ldrb	r2, [r2, #1]
 8007dfc:	2a30      	cmp	r2, #48	@ 0x30
 8007dfe:	d0f9      	beq.n	8007df4 <_strtod_l+0x294>
 8007e00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e04:	2908      	cmp	r1, #8
 8007e06:	f63f af78 	bhi.w	8007cfa <_strtod_l+0x19a>
 8007e0a:	f04f 080a 	mov.w	r8, #10
 8007e0e:	3a30      	subs	r2, #48	@ 0x30
 8007e10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e18:	1c56      	adds	r6, r2, #1
 8007e1a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e1c:	7852      	ldrb	r2, [r2, #1]
 8007e1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e22:	f1be 0f09 	cmp.w	lr, #9
 8007e26:	d939      	bls.n	8007e9c <_strtod_l+0x33c>
 8007e28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e2e:	1a76      	subs	r6, r6, r1
 8007e30:	2e08      	cmp	r6, #8
 8007e32:	dc03      	bgt.n	8007e3c <_strtod_l+0x2dc>
 8007e34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e36:	4588      	cmp	r8, r1
 8007e38:	bfa8      	it	ge
 8007e3a:	4688      	movge	r8, r1
 8007e3c:	f1bc 0f00 	cmp.w	ip, #0
 8007e40:	d001      	beq.n	8007e46 <_strtod_l+0x2e6>
 8007e42:	f1c8 0800 	rsb	r8, r8, #0
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	d14e      	bne.n	8007ee8 <_strtod_l+0x388>
 8007e4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e4c:	4308      	orrs	r0, r1
 8007e4e:	f47f aec0 	bne.w	8007bd2 <_strtod_l+0x72>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f47f aed6 	bne.w	8007c04 <_strtod_l+0xa4>
 8007e58:	2a69      	cmp	r2, #105	@ 0x69
 8007e5a:	d028      	beq.n	8007eae <_strtod_l+0x34e>
 8007e5c:	dc25      	bgt.n	8007eaa <_strtod_l+0x34a>
 8007e5e:	2a49      	cmp	r2, #73	@ 0x49
 8007e60:	d025      	beq.n	8007eae <_strtod_l+0x34e>
 8007e62:	2a4e      	cmp	r2, #78	@ 0x4e
 8007e64:	f47f aece 	bne.w	8007c04 <_strtod_l+0xa4>
 8007e68:	499a      	ldr	r1, [pc, #616]	@ (80080d4 <_strtod_l+0x574>)
 8007e6a:	a819      	add	r0, sp, #100	@ 0x64
 8007e6c:	f001 fd58 	bl	8009920 <__match>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f43f aec7 	beq.w	8007c04 <_strtod_l+0xa4>
 8007e76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b28      	cmp	r3, #40	@ 0x28
 8007e7c:	d12e      	bne.n	8007edc <_strtod_l+0x37c>
 8007e7e:	4996      	ldr	r1, [pc, #600]	@ (80080d8 <_strtod_l+0x578>)
 8007e80:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e82:	a819      	add	r0, sp, #100	@ 0x64
 8007e84:	f001 fd60 	bl	8009948 <__hexnan>
 8007e88:	2805      	cmp	r0, #5
 8007e8a:	d127      	bne.n	8007edc <_strtod_l+0x37c>
 8007e8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007e92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007e96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e9a:	e69a      	b.n	8007bd2 <_strtod_l+0x72>
 8007e9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e9e:	fb08 2101 	mla	r1, r8, r1, r2
 8007ea2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007ea6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ea8:	e7b5      	b.n	8007e16 <_strtod_l+0x2b6>
 8007eaa:	2a6e      	cmp	r2, #110	@ 0x6e
 8007eac:	e7da      	b.n	8007e64 <_strtod_l+0x304>
 8007eae:	498b      	ldr	r1, [pc, #556]	@ (80080dc <_strtod_l+0x57c>)
 8007eb0:	a819      	add	r0, sp, #100	@ 0x64
 8007eb2:	f001 fd35 	bl	8009920 <__match>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f43f aea4 	beq.w	8007c04 <_strtod_l+0xa4>
 8007ebc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ebe:	4988      	ldr	r1, [pc, #544]	@ (80080e0 <_strtod_l+0x580>)
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	a819      	add	r0, sp, #100	@ 0x64
 8007ec4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ec6:	f001 fd2b 	bl	8009920 <__match>
 8007eca:	b910      	cbnz	r0, 8007ed2 <_strtod_l+0x372>
 8007ecc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ece:	3301      	adds	r3, #1
 8007ed0:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ed2:	f04f 0a00 	mov.w	sl, #0
 8007ed6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80080e4 <_strtod_l+0x584>
 8007eda:	e67a      	b.n	8007bd2 <_strtod_l+0x72>
 8007edc:	4882      	ldr	r0, [pc, #520]	@ (80080e8 <_strtod_l+0x588>)
 8007ede:	f001 fa5d 	bl	800939c <nan>
 8007ee2:	4682      	mov	sl, r0
 8007ee4:	468b      	mov	fp, r1
 8007ee6:	e674      	b.n	8007bd2 <_strtod_l+0x72>
 8007ee8:	eba8 0309 	sub.w	r3, r8, r9
 8007eec:	2f00      	cmp	r7, #0
 8007eee:	bf08      	it	eq
 8007ef0:	462f      	moveq	r7, r5
 8007ef2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ef4:	2d10      	cmp	r5, #16
 8007ef6:	462c      	mov	r4, r5
 8007ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007efa:	bfa8      	it	ge
 8007efc:	2410      	movge	r4, #16
 8007efe:	f7f8 fa71 	bl	80003e4 <__aeabi_ui2d>
 8007f02:	2d09      	cmp	r5, #9
 8007f04:	4682      	mov	sl, r0
 8007f06:	468b      	mov	fp, r1
 8007f08:	dc11      	bgt.n	8007f2e <_strtod_l+0x3ce>
 8007f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f43f ae60 	beq.w	8007bd2 <_strtod_l+0x72>
 8007f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f14:	dd76      	ble.n	8008004 <_strtod_l+0x4a4>
 8007f16:	2b16      	cmp	r3, #22
 8007f18:	dc5d      	bgt.n	8007fd6 <_strtod_l+0x476>
 8007f1a:	4974      	ldr	r1, [pc, #464]	@ (80080ec <_strtod_l+0x58c>)
 8007f1c:	4652      	mov	r2, sl
 8007f1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f22:	465b      	mov	r3, fp
 8007f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f28:	f7f8 fad6 	bl	80004d8 <__aeabi_dmul>
 8007f2c:	e7d9      	b.n	8007ee2 <_strtod_l+0x382>
 8007f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80080ec <_strtod_l+0x58c>)
 8007f30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007f38:	f7f8 face 	bl	80004d8 <__aeabi_dmul>
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	9808      	ldr	r0, [sp, #32]
 8007f40:	468b      	mov	fp, r1
 8007f42:	f7f8 fa4f 	bl	80003e4 <__aeabi_ui2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	f7f8 f90d 	bl	800016c <__adddf3>
 8007f52:	2d0f      	cmp	r5, #15
 8007f54:	4682      	mov	sl, r0
 8007f56:	468b      	mov	fp, r1
 8007f58:	ddd7      	ble.n	8007f0a <_strtod_l+0x3aa>
 8007f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5c:	1b2c      	subs	r4, r5, r4
 8007f5e:	441c      	add	r4, r3
 8007f60:	2c00      	cmp	r4, #0
 8007f62:	f340 8096 	ble.w	8008092 <_strtod_l+0x532>
 8007f66:	f014 030f 	ands.w	r3, r4, #15
 8007f6a:	d00a      	beq.n	8007f82 <_strtod_l+0x422>
 8007f6c:	495f      	ldr	r1, [pc, #380]	@ (80080ec <_strtod_l+0x58c>)
 8007f6e:	4652      	mov	r2, sl
 8007f70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f78:	465b      	mov	r3, fp
 8007f7a:	f7f8 faad 	bl	80004d8 <__aeabi_dmul>
 8007f7e:	4682      	mov	sl, r0
 8007f80:	468b      	mov	fp, r1
 8007f82:	f034 040f 	bics.w	r4, r4, #15
 8007f86:	d073      	beq.n	8008070 <_strtod_l+0x510>
 8007f88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007f8c:	dd48      	ble.n	8008020 <_strtod_l+0x4c0>
 8007f8e:	2400      	movs	r4, #0
 8007f90:	46a0      	mov	r8, r4
 8007f92:	46a1      	mov	r9, r4
 8007f94:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f96:	2322      	movs	r3, #34	@ 0x22
 8007f98:	f04f 0a00 	mov.w	sl, #0
 8007f9c:	9a05      	ldr	r2, [sp, #20]
 8007f9e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80080e4 <_strtod_l+0x584>
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f43f ae13 	beq.w	8007bd2 <_strtod_l+0x72>
 8007fac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fae:	9805      	ldr	r0, [sp, #20]
 8007fb0:	f7ff f94c 	bl	800724c <_Bfree>
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	9805      	ldr	r0, [sp, #20]
 8007fb8:	f7ff f948 	bl	800724c <_Bfree>
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	9805      	ldr	r0, [sp, #20]
 8007fc0:	f7ff f944 	bl	800724c <_Bfree>
 8007fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fc6:	9805      	ldr	r0, [sp, #20]
 8007fc8:	f7ff f940 	bl	800724c <_Bfree>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	9805      	ldr	r0, [sp, #20]
 8007fd0:	f7ff f93c 	bl	800724c <_Bfree>
 8007fd4:	e5fd      	b.n	8007bd2 <_strtod_l+0x72>
 8007fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	dbbc      	blt.n	8007f5a <_strtod_l+0x3fa>
 8007fe0:	4c42      	ldr	r4, [pc, #264]	@ (80080ec <_strtod_l+0x58c>)
 8007fe2:	f1c5 050f 	rsb	r5, r5, #15
 8007fe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007fea:	4652      	mov	r2, sl
 8007fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ff0:	465b      	mov	r3, fp
 8007ff2:	f7f8 fa71 	bl	80004d8 <__aeabi_dmul>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff8:	1b5d      	subs	r5, r3, r5
 8007ffa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ffe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008002:	e791      	b.n	8007f28 <_strtod_l+0x3c8>
 8008004:	3316      	adds	r3, #22
 8008006:	dba8      	blt.n	8007f5a <_strtod_l+0x3fa>
 8008008:	4b38      	ldr	r3, [pc, #224]	@ (80080ec <_strtod_l+0x58c>)
 800800a:	eba9 0808 	sub.w	r8, r9, r8
 800800e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008012:	4650      	mov	r0, sl
 8008014:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008018:	4659      	mov	r1, fp
 800801a:	f7f8 fb87 	bl	800072c <__aeabi_ddiv>
 800801e:	e760      	b.n	8007ee2 <_strtod_l+0x382>
 8008020:	4b33      	ldr	r3, [pc, #204]	@ (80080f0 <_strtod_l+0x590>)
 8008022:	4650      	mov	r0, sl
 8008024:	9308      	str	r3, [sp, #32]
 8008026:	2300      	movs	r3, #0
 8008028:	4659      	mov	r1, fp
 800802a:	461e      	mov	r6, r3
 800802c:	1124      	asrs	r4, r4, #4
 800802e:	2c01      	cmp	r4, #1
 8008030:	dc21      	bgt.n	8008076 <_strtod_l+0x516>
 8008032:	b10b      	cbz	r3, 8008038 <_strtod_l+0x4d8>
 8008034:	4682      	mov	sl, r0
 8008036:	468b      	mov	fp, r1
 8008038:	492d      	ldr	r1, [pc, #180]	@ (80080f0 <_strtod_l+0x590>)
 800803a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800803e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008042:	4652      	mov	r2, sl
 8008044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008048:	465b      	mov	r3, fp
 800804a:	f7f8 fa45 	bl	80004d8 <__aeabi_dmul>
 800804e:	4b25      	ldr	r3, [pc, #148]	@ (80080e4 <_strtod_l+0x584>)
 8008050:	460a      	mov	r2, r1
 8008052:	400b      	ands	r3, r1
 8008054:	4927      	ldr	r1, [pc, #156]	@ (80080f4 <_strtod_l+0x594>)
 8008056:	4682      	mov	sl, r0
 8008058:	428b      	cmp	r3, r1
 800805a:	d898      	bhi.n	8007f8e <_strtod_l+0x42e>
 800805c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008060:	428b      	cmp	r3, r1
 8008062:	bf86      	itte	hi
 8008064:	f04f 3aff 	movhi.w	sl, #4294967295
 8008068:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80080f8 <_strtod_l+0x598>
 800806c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008070:	2300      	movs	r3, #0
 8008072:	9308      	str	r3, [sp, #32]
 8008074:	e07a      	b.n	800816c <_strtod_l+0x60c>
 8008076:	07e2      	lsls	r2, r4, #31
 8008078:	d505      	bpl.n	8008086 <_strtod_l+0x526>
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 fa2a 	bl	80004d8 <__aeabi_dmul>
 8008084:	2301      	movs	r3, #1
 8008086:	9a08      	ldr	r2, [sp, #32]
 8008088:	3601      	adds	r6, #1
 800808a:	3208      	adds	r2, #8
 800808c:	1064      	asrs	r4, r4, #1
 800808e:	9208      	str	r2, [sp, #32]
 8008090:	e7cd      	b.n	800802e <_strtod_l+0x4ce>
 8008092:	d0ed      	beq.n	8008070 <_strtod_l+0x510>
 8008094:	4264      	negs	r4, r4
 8008096:	f014 020f 	ands.w	r2, r4, #15
 800809a:	d00a      	beq.n	80080b2 <_strtod_l+0x552>
 800809c:	4b13      	ldr	r3, [pc, #76]	@ (80080ec <_strtod_l+0x58c>)
 800809e:	4650      	mov	r0, sl
 80080a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a4:	4659      	mov	r1, fp
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 fb3f 	bl	800072c <__aeabi_ddiv>
 80080ae:	4682      	mov	sl, r0
 80080b0:	468b      	mov	fp, r1
 80080b2:	1124      	asrs	r4, r4, #4
 80080b4:	d0dc      	beq.n	8008070 <_strtod_l+0x510>
 80080b6:	2c1f      	cmp	r4, #31
 80080b8:	dd20      	ble.n	80080fc <_strtod_l+0x59c>
 80080ba:	2400      	movs	r4, #0
 80080bc:	46a0      	mov	r8, r4
 80080be:	46a1      	mov	r9, r4
 80080c0:	940a      	str	r4, [sp, #40]	@ 0x28
 80080c2:	2322      	movs	r3, #34	@ 0x22
 80080c4:	9a05      	ldr	r2, [sp, #20]
 80080c6:	f04f 0a00 	mov.w	sl, #0
 80080ca:	f04f 0b00 	mov.w	fp, #0
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e768      	b.n	8007fa4 <_strtod_l+0x444>
 80080d2:	bf00      	nop
 80080d4:	0800a37b 	.word	0x0800a37b
 80080d8:	0800a58c 	.word	0x0800a58c
 80080dc:	0800a373 	.word	0x0800a373
 80080e0:	0800a3a8 	.word	0x0800a3a8
 80080e4:	7ff00000 	.word	0x7ff00000
 80080e8:	0800a750 	.word	0x0800a750
 80080ec:	0800a4c0 	.word	0x0800a4c0
 80080f0:	0800a498 	.word	0x0800a498
 80080f4:	7ca00000 	.word	0x7ca00000
 80080f8:	7fefffff 	.word	0x7fefffff
 80080fc:	f014 0310 	ands.w	r3, r4, #16
 8008100:	bf18      	it	ne
 8008102:	236a      	movne	r3, #106	@ 0x6a
 8008104:	4650      	mov	r0, sl
 8008106:	9308      	str	r3, [sp, #32]
 8008108:	4659      	mov	r1, fp
 800810a:	2300      	movs	r3, #0
 800810c:	4ea9      	ldr	r6, [pc, #676]	@ (80083b4 <_strtod_l+0x854>)
 800810e:	07e2      	lsls	r2, r4, #31
 8008110:	d504      	bpl.n	800811c <_strtod_l+0x5bc>
 8008112:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008116:	f7f8 f9df 	bl	80004d8 <__aeabi_dmul>
 800811a:	2301      	movs	r3, #1
 800811c:	1064      	asrs	r4, r4, #1
 800811e:	f106 0608 	add.w	r6, r6, #8
 8008122:	d1f4      	bne.n	800810e <_strtod_l+0x5ae>
 8008124:	b10b      	cbz	r3, 800812a <_strtod_l+0x5ca>
 8008126:	4682      	mov	sl, r0
 8008128:	468b      	mov	fp, r1
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	b1b3      	cbz	r3, 800815c <_strtod_l+0x5fc>
 800812e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008132:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008136:	2b00      	cmp	r3, #0
 8008138:	4659      	mov	r1, fp
 800813a:	dd0f      	ble.n	800815c <_strtod_l+0x5fc>
 800813c:	2b1f      	cmp	r3, #31
 800813e:	dd57      	ble.n	80081f0 <_strtod_l+0x690>
 8008140:	2b34      	cmp	r3, #52	@ 0x34
 8008142:	bfd8      	it	le
 8008144:	f04f 33ff 	movle.w	r3, #4294967295
 8008148:	f04f 0a00 	mov.w	sl, #0
 800814c:	bfcf      	iteee	gt
 800814e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008152:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008156:	4093      	lslle	r3, r2
 8008158:	ea03 0b01 	andle.w	fp, r3, r1
 800815c:	2200      	movs	r2, #0
 800815e:	2300      	movs	r3, #0
 8008160:	4650      	mov	r0, sl
 8008162:	4659      	mov	r1, fp
 8008164:	f7f8 fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8008168:	2800      	cmp	r0, #0
 800816a:	d1a6      	bne.n	80080ba <_strtod_l+0x55a>
 800816c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800816e:	463a      	mov	r2, r7
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008174:	462b      	mov	r3, r5
 8008176:	9805      	ldr	r0, [sp, #20]
 8008178:	f7ff f8d0 	bl	800731c <__s2b>
 800817c:	900a      	str	r0, [sp, #40]	@ 0x28
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f af05 	beq.w	8007f8e <_strtod_l+0x42e>
 8008184:	2400      	movs	r4, #0
 8008186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008188:	eba9 0308 	sub.w	r3, r9, r8
 800818c:	2a00      	cmp	r2, #0
 800818e:	bfa8      	it	ge
 8008190:	2300      	movge	r3, #0
 8008192:	46a0      	mov	r8, r4
 8008194:	9312      	str	r3, [sp, #72]	@ 0x48
 8008196:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800819a:	9316      	str	r3, [sp, #88]	@ 0x58
 800819c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800819e:	9805      	ldr	r0, [sp, #20]
 80081a0:	6859      	ldr	r1, [r3, #4]
 80081a2:	f7ff f813 	bl	80071cc <_Balloc>
 80081a6:	4681      	mov	r9, r0
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f43f aef4 	beq.w	8007f96 <_strtod_l+0x436>
 80081ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b0:	300c      	adds	r0, #12
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	f103 010c 	add.w	r1, r3, #12
 80081b8:	3202      	adds	r2, #2
 80081ba:	0092      	lsls	r2, r2, #2
 80081bc:	f7fe f8a5 	bl	800630a <memcpy>
 80081c0:	ab1c      	add	r3, sp, #112	@ 0x70
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4652      	mov	r2, sl
 80081ca:	465b      	mov	r3, fp
 80081cc:	9805      	ldr	r0, [sp, #20]
 80081ce:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80081d2:	f7ff fbd5 	bl	8007980 <__d2b>
 80081d6:	901a      	str	r0, [sp, #104]	@ 0x68
 80081d8:	2800      	cmp	r0, #0
 80081da:	f43f aedc 	beq.w	8007f96 <_strtod_l+0x436>
 80081de:	2101      	movs	r1, #1
 80081e0:	9805      	ldr	r0, [sp, #20]
 80081e2:	f7ff f931 	bl	8007448 <__i2b>
 80081e6:	4680      	mov	r8, r0
 80081e8:	b948      	cbnz	r0, 80081fe <_strtod_l+0x69e>
 80081ea:	f04f 0800 	mov.w	r8, #0
 80081ee:	e6d2      	b.n	8007f96 <_strtod_l+0x436>
 80081f0:	f04f 32ff 	mov.w	r2, #4294967295
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	ea03 0a0a 	and.w	sl, r3, sl
 80081fc:	e7ae      	b.n	800815c <_strtod_l+0x5fc>
 80081fe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008200:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008202:	2d00      	cmp	r5, #0
 8008204:	bfab      	itete	ge
 8008206:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008208:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800820a:	18ef      	addge	r7, r5, r3
 800820c:	1b5e      	sublt	r6, r3, r5
 800820e:	9b08      	ldr	r3, [sp, #32]
 8008210:	bfa8      	it	ge
 8008212:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008214:	eba5 0503 	sub.w	r5, r5, r3
 8008218:	4415      	add	r5, r2
 800821a:	4b67      	ldr	r3, [pc, #412]	@ (80083b8 <_strtod_l+0x858>)
 800821c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008220:	bfb8      	it	lt
 8008222:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008224:	429d      	cmp	r5, r3
 8008226:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800822a:	da50      	bge.n	80082ce <_strtod_l+0x76e>
 800822c:	1b5b      	subs	r3, r3, r5
 800822e:	2b1f      	cmp	r3, #31
 8008230:	f04f 0101 	mov.w	r1, #1
 8008234:	eba2 0203 	sub.w	r2, r2, r3
 8008238:	dc3d      	bgt.n	80082b6 <_strtod_l+0x756>
 800823a:	fa01 f303 	lsl.w	r3, r1, r3
 800823e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008240:	2300      	movs	r3, #0
 8008242:	9310      	str	r3, [sp, #64]	@ 0x40
 8008244:	18bd      	adds	r5, r7, r2
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	42af      	cmp	r7, r5
 800824a:	4416      	add	r6, r2
 800824c:	441e      	add	r6, r3
 800824e:	463b      	mov	r3, r7
 8008250:	bfa8      	it	ge
 8008252:	462b      	movge	r3, r5
 8008254:	42b3      	cmp	r3, r6
 8008256:	bfa8      	it	ge
 8008258:	4633      	movge	r3, r6
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfc2      	ittt	gt
 800825e:	1aed      	subgt	r5, r5, r3
 8008260:	1af6      	subgt	r6, r6, r3
 8008262:	1aff      	subgt	r7, r7, r3
 8008264:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd16      	ble.n	8008298 <_strtod_l+0x738>
 800826a:	4641      	mov	r1, r8
 800826c:	461a      	mov	r2, r3
 800826e:	9805      	ldr	r0, [sp, #20]
 8008270:	f7ff f9a8 	bl	80075c4 <__pow5mult>
 8008274:	4680      	mov	r8, r0
 8008276:	2800      	cmp	r0, #0
 8008278:	d0b7      	beq.n	80081ea <_strtod_l+0x68a>
 800827a:	4601      	mov	r1, r0
 800827c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800827e:	9805      	ldr	r0, [sp, #20]
 8008280:	f7ff f8f8 	bl	8007474 <__multiply>
 8008284:	900e      	str	r0, [sp, #56]	@ 0x38
 8008286:	2800      	cmp	r0, #0
 8008288:	f43f ae85 	beq.w	8007f96 <_strtod_l+0x436>
 800828c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800828e:	9805      	ldr	r0, [sp, #20]
 8008290:	f7fe ffdc 	bl	800724c <_Bfree>
 8008294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008296:	931a      	str	r3, [sp, #104]	@ 0x68
 8008298:	2d00      	cmp	r5, #0
 800829a:	dc1d      	bgt.n	80082d8 <_strtod_l+0x778>
 800829c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dd23      	ble.n	80082ea <_strtod_l+0x78a>
 80082a2:	4649      	mov	r1, r9
 80082a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80082a6:	9805      	ldr	r0, [sp, #20]
 80082a8:	f7ff f98c 	bl	80075c4 <__pow5mult>
 80082ac:	4681      	mov	r9, r0
 80082ae:	b9e0      	cbnz	r0, 80082ea <_strtod_l+0x78a>
 80082b0:	f04f 0900 	mov.w	r9, #0
 80082b4:	e66f      	b.n	8007f96 <_strtod_l+0x436>
 80082b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80082ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80082be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80082c2:	35e2      	adds	r5, #226	@ 0xe2
 80082c4:	fa01 f305 	lsl.w	r3, r1, r5
 80082c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80082ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80082cc:	e7ba      	b.n	8008244 <_strtod_l+0x6e4>
 80082ce:	2300      	movs	r3, #0
 80082d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80082d2:	2301      	movs	r3, #1
 80082d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082d6:	e7b5      	b.n	8008244 <_strtod_l+0x6e4>
 80082d8:	462a      	mov	r2, r5
 80082da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082dc:	9805      	ldr	r0, [sp, #20]
 80082de:	f7ff f9cb 	bl	8007678 <__lshift>
 80082e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1d9      	bne.n	800829c <_strtod_l+0x73c>
 80082e8:	e655      	b.n	8007f96 <_strtod_l+0x436>
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	dd07      	ble.n	80082fe <_strtod_l+0x79e>
 80082ee:	4649      	mov	r1, r9
 80082f0:	4632      	mov	r2, r6
 80082f2:	9805      	ldr	r0, [sp, #20]
 80082f4:	f7ff f9c0 	bl	8007678 <__lshift>
 80082f8:	4681      	mov	r9, r0
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0d8      	beq.n	80082b0 <_strtod_l+0x750>
 80082fe:	2f00      	cmp	r7, #0
 8008300:	dd08      	ble.n	8008314 <_strtod_l+0x7b4>
 8008302:	4641      	mov	r1, r8
 8008304:	463a      	mov	r2, r7
 8008306:	9805      	ldr	r0, [sp, #20]
 8008308:	f7ff f9b6 	bl	8007678 <__lshift>
 800830c:	4680      	mov	r8, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	f43f ae41 	beq.w	8007f96 <_strtod_l+0x436>
 8008314:	464a      	mov	r2, r9
 8008316:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008318:	9805      	ldr	r0, [sp, #20]
 800831a:	f7ff fa35 	bl	8007788 <__mdiff>
 800831e:	4604      	mov	r4, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	f43f ae38 	beq.w	8007f96 <_strtod_l+0x436>
 8008326:	68c3      	ldr	r3, [r0, #12]
 8008328:	4641      	mov	r1, r8
 800832a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800832c:	2300      	movs	r3, #0
 800832e:	60c3      	str	r3, [r0, #12]
 8008330:	f7ff fa0e 	bl	8007750 <__mcmp>
 8008334:	2800      	cmp	r0, #0
 8008336:	da45      	bge.n	80083c4 <_strtod_l+0x864>
 8008338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800833a:	ea53 030a 	orrs.w	r3, r3, sl
 800833e:	d16b      	bne.n	8008418 <_strtod_l+0x8b8>
 8008340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008344:	2b00      	cmp	r3, #0
 8008346:	d167      	bne.n	8008418 <_strtod_l+0x8b8>
 8008348:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800834c:	0d1b      	lsrs	r3, r3, #20
 800834e:	051b      	lsls	r3, r3, #20
 8008350:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008354:	d960      	bls.n	8008418 <_strtod_l+0x8b8>
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	b913      	cbnz	r3, 8008360 <_strtod_l+0x800>
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	2b01      	cmp	r3, #1
 800835e:	dd5b      	ble.n	8008418 <_strtod_l+0x8b8>
 8008360:	4621      	mov	r1, r4
 8008362:	2201      	movs	r2, #1
 8008364:	9805      	ldr	r0, [sp, #20]
 8008366:	f7ff f987 	bl	8007678 <__lshift>
 800836a:	4641      	mov	r1, r8
 800836c:	4604      	mov	r4, r0
 800836e:	f7ff f9ef 	bl	8007750 <__mcmp>
 8008372:	2800      	cmp	r0, #0
 8008374:	dd50      	ble.n	8008418 <_strtod_l+0x8b8>
 8008376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800837a:	9a08      	ldr	r2, [sp, #32]
 800837c:	0d1b      	lsrs	r3, r3, #20
 800837e:	051b      	lsls	r3, r3, #20
 8008380:	2a00      	cmp	r2, #0
 8008382:	d06a      	beq.n	800845a <_strtod_l+0x8fa>
 8008384:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008388:	d867      	bhi.n	800845a <_strtod_l+0x8fa>
 800838a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800838e:	f67f ae98 	bls.w	80080c2 <_strtod_l+0x562>
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <_strtod_l+0x85c>)
 8008398:	2200      	movs	r2, #0
 800839a:	f7f8 f89d 	bl	80004d8 <__aeabi_dmul>
 800839e:	4b08      	ldr	r3, [pc, #32]	@ (80083c0 <_strtod_l+0x860>)
 80083a0:	4682      	mov	sl, r0
 80083a2:	400b      	ands	r3, r1
 80083a4:	468b      	mov	fp, r1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f47f ae00 	bne.w	8007fac <_strtod_l+0x44c>
 80083ac:	2322      	movs	r3, #34	@ 0x22
 80083ae:	9a05      	ldr	r2, [sp, #20]
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e5fb      	b.n	8007fac <_strtod_l+0x44c>
 80083b4:	0800a5b8 	.word	0x0800a5b8
 80083b8:	fffffc02 	.word	0xfffffc02
 80083bc:	39500000 	.word	0x39500000
 80083c0:	7ff00000 	.word	0x7ff00000
 80083c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80083c8:	d165      	bne.n	8008496 <_strtod_l+0x936>
 80083ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80083cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d0:	b35a      	cbz	r2, 800842a <_strtod_l+0x8ca>
 80083d2:	4a99      	ldr	r2, [pc, #612]	@ (8008638 <_strtod_l+0xad8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d12b      	bne.n	8008430 <_strtod_l+0x8d0>
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	4651      	mov	r1, sl
 80083dc:	b303      	cbz	r3, 8008420 <_strtod_l+0x8c0>
 80083de:	465a      	mov	r2, fp
 80083e0:	4b96      	ldr	r3, [pc, #600]	@ (800863c <_strtod_l+0xadc>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	d81b      	bhi.n	8008426 <_strtod_l+0x8c6>
 80083ee:	0d1b      	lsrs	r3, r3, #20
 80083f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d119      	bne.n	8008430 <_strtod_l+0x8d0>
 80083fc:	4b90      	ldr	r3, [pc, #576]	@ (8008640 <_strtod_l+0xae0>)
 80083fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008400:	429a      	cmp	r2, r3
 8008402:	d102      	bne.n	800840a <_strtod_l+0x8aa>
 8008404:	3101      	adds	r1, #1
 8008406:	f43f adc6 	beq.w	8007f96 <_strtod_l+0x436>
 800840a:	f04f 0a00 	mov.w	sl, #0
 800840e:	4b8b      	ldr	r3, [pc, #556]	@ (800863c <_strtod_l+0xadc>)
 8008410:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008412:	401a      	ands	r2, r3
 8008414:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008418:	9b08      	ldr	r3, [sp, #32]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1b9      	bne.n	8008392 <_strtod_l+0x832>
 800841e:	e5c5      	b.n	8007fac <_strtod_l+0x44c>
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	e7e8      	b.n	80083f8 <_strtod_l+0x898>
 8008426:	4613      	mov	r3, r2
 8008428:	e7e6      	b.n	80083f8 <_strtod_l+0x898>
 800842a:	ea53 030a 	orrs.w	r3, r3, sl
 800842e:	d0a2      	beq.n	8008376 <_strtod_l+0x816>
 8008430:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008432:	b1db      	cbz	r3, 800846c <_strtod_l+0x90c>
 8008434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008436:	4213      	tst	r3, r2
 8008438:	d0ee      	beq.n	8008418 <_strtod_l+0x8b8>
 800843a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800843c:	4650      	mov	r0, sl
 800843e:	4659      	mov	r1, fp
 8008440:	9a08      	ldr	r2, [sp, #32]
 8008442:	b1bb      	cbz	r3, 8008474 <_strtod_l+0x914>
 8008444:	f7ff fb68 	bl	8007b18 <sulp>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008450:	f7f7 fe8c 	bl	800016c <__adddf3>
 8008454:	4682      	mov	sl, r0
 8008456:	468b      	mov	fp, r1
 8008458:	e7de      	b.n	8008418 <_strtod_l+0x8b8>
 800845a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800845e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008462:	f04f 3aff 	mov.w	sl, #4294967295
 8008466:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800846a:	e7d5      	b.n	8008418 <_strtod_l+0x8b8>
 800846c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800846e:	ea13 0f0a 	tst.w	r3, sl
 8008472:	e7e1      	b.n	8008438 <_strtod_l+0x8d8>
 8008474:	f7ff fb50 	bl	8007b18 <sulp>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008480:	f7f7 fe72 	bl	8000168 <__aeabi_dsub>
 8008484:	2200      	movs	r2, #0
 8008486:	2300      	movs	r3, #0
 8008488:	4682      	mov	sl, r0
 800848a:	468b      	mov	fp, r1
 800848c:	f7f8 fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8008490:	2800      	cmp	r0, #0
 8008492:	d0c1      	beq.n	8008418 <_strtod_l+0x8b8>
 8008494:	e615      	b.n	80080c2 <_strtod_l+0x562>
 8008496:	4641      	mov	r1, r8
 8008498:	4620      	mov	r0, r4
 800849a:	f7ff fac9 	bl	8007a30 <__ratio>
 800849e:	2200      	movs	r2, #0
 80084a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80084a4:	4606      	mov	r6, r0
 80084a6:	460f      	mov	r7, r1
 80084a8:	f7f8 fa92 	bl	80009d0 <__aeabi_dcmple>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d06d      	beq.n	800858c <_strtod_l+0xa2c>
 80084b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d178      	bne.n	80085a8 <_strtod_l+0xa48>
 80084b6:	f1ba 0f00 	cmp.w	sl, #0
 80084ba:	d156      	bne.n	800856a <_strtod_l+0xa0a>
 80084bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d158      	bne.n	8008578 <_strtod_l+0xa18>
 80084c6:	2200      	movs	r2, #0
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008644 <_strtod_l+0xae4>)
 80084ce:	f7f8 fa75 	bl	80009bc <__aeabi_dcmplt>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d157      	bne.n	8008586 <_strtod_l+0xa26>
 80084d6:	4630      	mov	r0, r6
 80084d8:	4639      	mov	r1, r7
 80084da:	2200      	movs	r2, #0
 80084dc:	4b5a      	ldr	r3, [pc, #360]	@ (8008648 <_strtod_l+0xae8>)
 80084de:	f7f7 fffb 	bl	80004d8 <__aeabi_dmul>
 80084e2:	4606      	mov	r6, r0
 80084e4:	460f      	mov	r7, r1
 80084e6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80084ea:	9606      	str	r6, [sp, #24]
 80084ec:	9307      	str	r3, [sp, #28]
 80084ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084f2:	4d52      	ldr	r5, [pc, #328]	@ (800863c <_strtod_l+0xadc>)
 80084f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80084f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084fa:	401d      	ands	r5, r3
 80084fc:	4b53      	ldr	r3, [pc, #332]	@ (800864c <_strtod_l+0xaec>)
 80084fe:	429d      	cmp	r5, r3
 8008500:	f040 80aa 	bne.w	8008658 <_strtod_l+0xaf8>
 8008504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008506:	4650      	mov	r0, sl
 8008508:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800850c:	4659      	mov	r1, fp
 800850e:	f7ff f9cf 	bl	80078b0 <__ulp>
 8008512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008516:	f7f7 ffdf 	bl	80004d8 <__aeabi_dmul>
 800851a:	4652      	mov	r2, sl
 800851c:	465b      	mov	r3, fp
 800851e:	f7f7 fe25 	bl	800016c <__adddf3>
 8008522:	460b      	mov	r3, r1
 8008524:	4945      	ldr	r1, [pc, #276]	@ (800863c <_strtod_l+0xadc>)
 8008526:	4a4a      	ldr	r2, [pc, #296]	@ (8008650 <_strtod_l+0xaf0>)
 8008528:	4019      	ands	r1, r3
 800852a:	4291      	cmp	r1, r2
 800852c:	4682      	mov	sl, r0
 800852e:	d942      	bls.n	80085b6 <_strtod_l+0xa56>
 8008530:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008532:	4b43      	ldr	r3, [pc, #268]	@ (8008640 <_strtod_l+0xae0>)
 8008534:	429a      	cmp	r2, r3
 8008536:	d103      	bne.n	8008540 <_strtod_l+0x9e0>
 8008538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800853a:	3301      	adds	r3, #1
 800853c:	f43f ad2b 	beq.w	8007f96 <_strtod_l+0x436>
 8008540:	f04f 3aff 	mov.w	sl, #4294967295
 8008544:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008640 <_strtod_l+0xae0>
 8008548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800854a:	9805      	ldr	r0, [sp, #20]
 800854c:	f7fe fe7e 	bl	800724c <_Bfree>
 8008550:	4649      	mov	r1, r9
 8008552:	9805      	ldr	r0, [sp, #20]
 8008554:	f7fe fe7a 	bl	800724c <_Bfree>
 8008558:	4641      	mov	r1, r8
 800855a:	9805      	ldr	r0, [sp, #20]
 800855c:	f7fe fe76 	bl	800724c <_Bfree>
 8008560:	4621      	mov	r1, r4
 8008562:	9805      	ldr	r0, [sp, #20]
 8008564:	f7fe fe72 	bl	800724c <_Bfree>
 8008568:	e618      	b.n	800819c <_strtod_l+0x63c>
 800856a:	f1ba 0f01 	cmp.w	sl, #1
 800856e:	d103      	bne.n	8008578 <_strtod_l+0xa18>
 8008570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008572:	2b00      	cmp	r3, #0
 8008574:	f43f ada5 	beq.w	80080c2 <_strtod_l+0x562>
 8008578:	2200      	movs	r2, #0
 800857a:	4b36      	ldr	r3, [pc, #216]	@ (8008654 <_strtod_l+0xaf4>)
 800857c:	2600      	movs	r6, #0
 800857e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008582:	4f30      	ldr	r7, [pc, #192]	@ (8008644 <_strtod_l+0xae4>)
 8008584:	e7b3      	b.n	80084ee <_strtod_l+0x98e>
 8008586:	2600      	movs	r6, #0
 8008588:	4f2f      	ldr	r7, [pc, #188]	@ (8008648 <_strtod_l+0xae8>)
 800858a:	e7ac      	b.n	80084e6 <_strtod_l+0x986>
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	4b2d      	ldr	r3, [pc, #180]	@ (8008648 <_strtod_l+0xae8>)
 8008592:	2200      	movs	r2, #0
 8008594:	f7f7 ffa0 	bl	80004d8 <__aeabi_dmul>
 8008598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0a1      	beq.n	80084e6 <_strtod_l+0x986>
 80085a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80085a6:	e7a2      	b.n	80084ee <_strtod_l+0x98e>
 80085a8:	2200      	movs	r2, #0
 80085aa:	4b26      	ldr	r3, [pc, #152]	@ (8008644 <_strtod_l+0xae4>)
 80085ac:	4616      	mov	r6, r2
 80085ae:	461f      	mov	r7, r3
 80085b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80085b4:	e79b      	b.n	80084ee <_strtod_l+0x98e>
 80085b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1c1      	bne.n	8008548 <_strtod_l+0x9e8>
 80085c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085c8:	0d1b      	lsrs	r3, r3, #20
 80085ca:	051b      	lsls	r3, r3, #20
 80085cc:	429d      	cmp	r5, r3
 80085ce:	d1bb      	bne.n	8008548 <_strtod_l+0x9e8>
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f8 fac8 	bl	8000b68 <__aeabi_d2lz>
 80085d8:	f7f7 ff50 	bl	800047c <__aeabi_l2d>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f7 fdc0 	bl	8000168 <__aeabi_dsub>
 80085e8:	460b      	mov	r3, r1
 80085ea:	4602      	mov	r2, r0
 80085ec:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80085f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f6:	ea46 060a 	orr.w	r6, r6, sl
 80085fa:	431e      	orrs	r6, r3
 80085fc:	d069      	beq.n	80086d2 <_strtod_l+0xb72>
 80085fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8008628 <_strtod_l+0xac8>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f8 f9da 	bl	80009bc <__aeabi_dcmplt>
 8008608:	2800      	cmp	r0, #0
 800860a:	f47f accf 	bne.w	8007fac <_strtod_l+0x44c>
 800860e:	a308      	add	r3, pc, #32	@ (adr r3, 8008630 <_strtod_l+0xad0>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008618:	f7f8 f9ee 	bl	80009f8 <__aeabi_dcmpgt>
 800861c:	2800      	cmp	r0, #0
 800861e:	d093      	beq.n	8008548 <_strtod_l+0x9e8>
 8008620:	e4c4      	b.n	8007fac <_strtod_l+0x44c>
 8008622:	bf00      	nop
 8008624:	f3af 8000 	nop.w
 8008628:	94a03595 	.word	0x94a03595
 800862c:	3fdfffff 	.word	0x3fdfffff
 8008630:	35afe535 	.word	0x35afe535
 8008634:	3fe00000 	.word	0x3fe00000
 8008638:	000fffff 	.word	0x000fffff
 800863c:	7ff00000 	.word	0x7ff00000
 8008640:	7fefffff 	.word	0x7fefffff
 8008644:	3ff00000 	.word	0x3ff00000
 8008648:	3fe00000 	.word	0x3fe00000
 800864c:	7fe00000 	.word	0x7fe00000
 8008650:	7c9fffff 	.word	0x7c9fffff
 8008654:	bff00000 	.word	0xbff00000
 8008658:	9b08      	ldr	r3, [sp, #32]
 800865a:	b323      	cbz	r3, 80086a6 <_strtod_l+0xb46>
 800865c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008660:	d821      	bhi.n	80086a6 <_strtod_l+0xb46>
 8008662:	a327      	add	r3, pc, #156	@ (adr r3, 8008700 <_strtod_l+0xba0>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f8 f9b0 	bl	80009d0 <__aeabi_dcmple>
 8008670:	b1a0      	cbz	r0, 800869c <_strtod_l+0xb3c>
 8008672:	4639      	mov	r1, r7
 8008674:	4630      	mov	r0, r6
 8008676:	f7f8 fa07 	bl	8000a88 <__aeabi_d2uiz>
 800867a:	2801      	cmp	r0, #1
 800867c:	bf38      	it	cc
 800867e:	2001      	movcc	r0, #1
 8008680:	f7f7 feb0 	bl	80003e4 <__aeabi_ui2d>
 8008684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	b9fb      	cbnz	r3, 80086cc <_strtod_l+0xb6c>
 800868c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008690:	9014      	str	r0, [sp, #80]	@ 0x50
 8008692:	9315      	str	r3, [sp, #84]	@ 0x54
 8008694:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800869c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800869e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80086a2:	1b5b      	subs	r3, r3, r5
 80086a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80086a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086aa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80086ae:	f7ff f8ff 	bl	80078b0 <__ulp>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4650      	mov	r0, sl
 80086b8:	4659      	mov	r1, fp
 80086ba:	f7f7 ff0d 	bl	80004d8 <__aeabi_dmul>
 80086be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80086c2:	f7f7 fd53 	bl	800016c <__adddf3>
 80086c6:	4682      	mov	sl, r0
 80086c8:	468b      	mov	fp, r1
 80086ca:	e776      	b.n	80085ba <_strtod_l+0xa5a>
 80086cc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80086d0:	e7e0      	b.n	8008694 <_strtod_l+0xb34>
 80086d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8008708 <_strtod_l+0xba8>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f8 f970 	bl	80009bc <__aeabi_dcmplt>
 80086dc:	e79e      	b.n	800861c <_strtod_l+0xabc>
 80086de:	2300      	movs	r3, #0
 80086e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	f7ff ba77 	b.w	8007bda <_strtod_l+0x7a>
 80086ec:	2a65      	cmp	r2, #101	@ 0x65
 80086ee:	f43f ab6e 	beq.w	8007dce <_strtod_l+0x26e>
 80086f2:	2a45      	cmp	r2, #69	@ 0x45
 80086f4:	f43f ab6b 	beq.w	8007dce <_strtod_l+0x26e>
 80086f8:	2301      	movs	r3, #1
 80086fa:	f7ff bba6 	b.w	8007e4a <_strtod_l+0x2ea>
 80086fe:	bf00      	nop
 8008700:	ffc00000 	.word	0xffc00000
 8008704:	41dfffff 	.word	0x41dfffff
 8008708:	94a03595 	.word	0x94a03595
 800870c:	3fcfffff 	.word	0x3fcfffff

08008710 <_strtod_r>:
 8008710:	4b01      	ldr	r3, [pc, #4]	@ (8008718 <_strtod_r+0x8>)
 8008712:	f7ff ba25 	b.w	8007b60 <_strtod_l>
 8008716:	bf00      	nop
 8008718:	200000f8 	.word	0x200000f8

0800871c <_strtol_l.constprop.0>:
 800871c:	2b24      	cmp	r3, #36	@ 0x24
 800871e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008722:	4686      	mov	lr, r0
 8008724:	4690      	mov	r8, r2
 8008726:	d801      	bhi.n	800872c <_strtol_l.constprop.0+0x10>
 8008728:	2b01      	cmp	r3, #1
 800872a:	d106      	bne.n	800873a <_strtol_l.constprop.0+0x1e>
 800872c:	f7fd fdb2 	bl	8006294 <__errno>
 8008730:	2316      	movs	r3, #22
 8008732:	6003      	str	r3, [r0, #0]
 8008734:	2000      	movs	r0, #0
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	460d      	mov	r5, r1
 800873c:	4833      	ldr	r0, [pc, #204]	@ (800880c <_strtol_l.constprop.0+0xf0>)
 800873e:	462a      	mov	r2, r5
 8008740:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008744:	5d06      	ldrb	r6, [r0, r4]
 8008746:	f016 0608 	ands.w	r6, r6, #8
 800874a:	d1f8      	bne.n	800873e <_strtol_l.constprop.0+0x22>
 800874c:	2c2d      	cmp	r4, #45	@ 0x2d
 800874e:	d12d      	bne.n	80087ac <_strtol_l.constprop.0+0x90>
 8008750:	2601      	movs	r6, #1
 8008752:	782c      	ldrb	r4, [r5, #0]
 8008754:	1c95      	adds	r5, r2, #2
 8008756:	f033 0210 	bics.w	r2, r3, #16
 800875a:	d109      	bne.n	8008770 <_strtol_l.constprop.0+0x54>
 800875c:	2c30      	cmp	r4, #48	@ 0x30
 800875e:	d12a      	bne.n	80087b6 <_strtol_l.constprop.0+0x9a>
 8008760:	782a      	ldrb	r2, [r5, #0]
 8008762:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008766:	2a58      	cmp	r2, #88	@ 0x58
 8008768:	d125      	bne.n	80087b6 <_strtol_l.constprop.0+0x9a>
 800876a:	2310      	movs	r3, #16
 800876c:	786c      	ldrb	r4, [r5, #1]
 800876e:	3502      	adds	r5, #2
 8008770:	2200      	movs	r2, #0
 8008772:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008776:	f10c 3cff 	add.w	ip, ip, #4294967295
 800877a:	fbbc f9f3 	udiv	r9, ip, r3
 800877e:	4610      	mov	r0, r2
 8008780:	fb03 ca19 	mls	sl, r3, r9, ip
 8008784:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008788:	2f09      	cmp	r7, #9
 800878a:	d81b      	bhi.n	80087c4 <_strtol_l.constprop.0+0xa8>
 800878c:	463c      	mov	r4, r7
 800878e:	42a3      	cmp	r3, r4
 8008790:	dd27      	ble.n	80087e2 <_strtol_l.constprop.0+0xc6>
 8008792:	1c57      	adds	r7, r2, #1
 8008794:	d007      	beq.n	80087a6 <_strtol_l.constprop.0+0x8a>
 8008796:	4581      	cmp	r9, r0
 8008798:	d320      	bcc.n	80087dc <_strtol_l.constprop.0+0xc0>
 800879a:	d101      	bne.n	80087a0 <_strtol_l.constprop.0+0x84>
 800879c:	45a2      	cmp	sl, r4
 800879e:	db1d      	blt.n	80087dc <_strtol_l.constprop.0+0xc0>
 80087a0:	2201      	movs	r2, #1
 80087a2:	fb00 4003 	mla	r0, r0, r3, r4
 80087a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087aa:	e7eb      	b.n	8008784 <_strtol_l.constprop.0+0x68>
 80087ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80087ae:	bf04      	itt	eq
 80087b0:	782c      	ldrbeq	r4, [r5, #0]
 80087b2:	1c95      	addeq	r5, r2, #2
 80087b4:	e7cf      	b.n	8008756 <_strtol_l.constprop.0+0x3a>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1da      	bne.n	8008770 <_strtol_l.constprop.0+0x54>
 80087ba:	2c30      	cmp	r4, #48	@ 0x30
 80087bc:	bf0c      	ite	eq
 80087be:	2308      	moveq	r3, #8
 80087c0:	230a      	movne	r3, #10
 80087c2:	e7d5      	b.n	8008770 <_strtol_l.constprop.0+0x54>
 80087c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80087c8:	2f19      	cmp	r7, #25
 80087ca:	d801      	bhi.n	80087d0 <_strtol_l.constprop.0+0xb4>
 80087cc:	3c37      	subs	r4, #55	@ 0x37
 80087ce:	e7de      	b.n	800878e <_strtol_l.constprop.0+0x72>
 80087d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80087d4:	2f19      	cmp	r7, #25
 80087d6:	d804      	bhi.n	80087e2 <_strtol_l.constprop.0+0xc6>
 80087d8:	3c57      	subs	r4, #87	@ 0x57
 80087da:	e7d8      	b.n	800878e <_strtol_l.constprop.0+0x72>
 80087dc:	f04f 32ff 	mov.w	r2, #4294967295
 80087e0:	e7e1      	b.n	80087a6 <_strtol_l.constprop.0+0x8a>
 80087e2:	1c53      	adds	r3, r2, #1
 80087e4:	d108      	bne.n	80087f8 <_strtol_l.constprop.0+0xdc>
 80087e6:	2322      	movs	r3, #34	@ 0x22
 80087e8:	4660      	mov	r0, ip
 80087ea:	f8ce 3000 	str.w	r3, [lr]
 80087ee:	f1b8 0f00 	cmp.w	r8, #0
 80087f2:	d0a0      	beq.n	8008736 <_strtol_l.constprop.0+0x1a>
 80087f4:	1e69      	subs	r1, r5, #1
 80087f6:	e006      	b.n	8008806 <_strtol_l.constprop.0+0xea>
 80087f8:	b106      	cbz	r6, 80087fc <_strtol_l.constprop.0+0xe0>
 80087fa:	4240      	negs	r0, r0
 80087fc:	f1b8 0f00 	cmp.w	r8, #0
 8008800:	d099      	beq.n	8008736 <_strtol_l.constprop.0+0x1a>
 8008802:	2a00      	cmp	r2, #0
 8008804:	d1f6      	bne.n	80087f4 <_strtol_l.constprop.0+0xd8>
 8008806:	f8c8 1000 	str.w	r1, [r8]
 800880a:	e794      	b.n	8008736 <_strtol_l.constprop.0+0x1a>
 800880c:	0800a5e1 	.word	0x0800a5e1

08008810 <_strtol_r>:
 8008810:	f7ff bf84 	b.w	800871c <_strtol_l.constprop.0>

08008814 <__ssputs_r>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	461f      	mov	r7, r3
 800881a:	688e      	ldr	r6, [r1, #8]
 800881c:	4682      	mov	sl, r0
 800881e:	42be      	cmp	r6, r7
 8008820:	460c      	mov	r4, r1
 8008822:	4690      	mov	r8, r2
 8008824:	680b      	ldr	r3, [r1, #0]
 8008826:	d82d      	bhi.n	8008884 <__ssputs_r+0x70>
 8008828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800882c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008830:	d026      	beq.n	8008880 <__ssputs_r+0x6c>
 8008832:	6965      	ldr	r5, [r4, #20]
 8008834:	6909      	ldr	r1, [r1, #16]
 8008836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800883a:	eba3 0901 	sub.w	r9, r3, r1
 800883e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008842:	1c7b      	adds	r3, r7, #1
 8008844:	444b      	add	r3, r9
 8008846:	106d      	asrs	r5, r5, #1
 8008848:	429d      	cmp	r5, r3
 800884a:	bf38      	it	cc
 800884c:	461d      	movcc	r5, r3
 800884e:	0553      	lsls	r3, r2, #21
 8008850:	d527      	bpl.n	80088a2 <__ssputs_r+0x8e>
 8008852:	4629      	mov	r1, r5
 8008854:	f7fe fc2e 	bl	80070b4 <_malloc_r>
 8008858:	4606      	mov	r6, r0
 800885a:	b360      	cbz	r0, 80088b6 <__ssputs_r+0xa2>
 800885c:	464a      	mov	r2, r9
 800885e:	6921      	ldr	r1, [r4, #16]
 8008860:	f7fd fd53 	bl	800630a <memcpy>
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800886a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	6126      	str	r6, [r4, #16]
 8008872:	444e      	add	r6, r9
 8008874:	6026      	str	r6, [r4, #0]
 8008876:	463e      	mov	r6, r7
 8008878:	6165      	str	r5, [r4, #20]
 800887a:	eba5 0509 	sub.w	r5, r5, r9
 800887e:	60a5      	str	r5, [r4, #8]
 8008880:	42be      	cmp	r6, r7
 8008882:	d900      	bls.n	8008886 <__ssputs_r+0x72>
 8008884:	463e      	mov	r6, r7
 8008886:	4632      	mov	r2, r6
 8008888:	4641      	mov	r1, r8
 800888a:	6820      	ldr	r0, [r4, #0]
 800888c:	f000 fd49 	bl	8009322 <memmove>
 8008890:	2000      	movs	r0, #0
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	1b9b      	subs	r3, r3, r6
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	4433      	add	r3, r6
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a2:	462a      	mov	r2, r5
 80088a4:	f001 f8fd 	bl	8009aa2 <_realloc_r>
 80088a8:	4606      	mov	r6, r0
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d1e0      	bne.n	8008870 <__ssputs_r+0x5c>
 80088ae:	4650      	mov	r0, sl
 80088b0:	6921      	ldr	r1, [r4, #16]
 80088b2:	f7fe fb8d 	bl	8006fd0 <_free_r>
 80088b6:	230c      	movs	r3, #12
 80088b8:	f8ca 3000 	str.w	r3, [sl]
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	e7e9      	b.n	800889e <__ssputs_r+0x8a>
	...

080088cc <_svfiprintf_r>:
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	4698      	mov	r8, r3
 80088d2:	898b      	ldrh	r3, [r1, #12]
 80088d4:	4607      	mov	r7, r0
 80088d6:	061b      	lsls	r3, r3, #24
 80088d8:	460d      	mov	r5, r1
 80088da:	4614      	mov	r4, r2
 80088dc:	b09d      	sub	sp, #116	@ 0x74
 80088de:	d510      	bpl.n	8008902 <_svfiprintf_r+0x36>
 80088e0:	690b      	ldr	r3, [r1, #16]
 80088e2:	b973      	cbnz	r3, 8008902 <_svfiprintf_r+0x36>
 80088e4:	2140      	movs	r1, #64	@ 0x40
 80088e6:	f7fe fbe5 	bl	80070b4 <_malloc_r>
 80088ea:	6028      	str	r0, [r5, #0]
 80088ec:	6128      	str	r0, [r5, #16]
 80088ee:	b930      	cbnz	r0, 80088fe <_svfiprintf_r+0x32>
 80088f0:	230c      	movs	r3, #12
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	b01d      	add	sp, #116	@ 0x74
 80088fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fe:	2340      	movs	r3, #64	@ 0x40
 8008900:	616b      	str	r3, [r5, #20]
 8008902:	2300      	movs	r3, #0
 8008904:	9309      	str	r3, [sp, #36]	@ 0x24
 8008906:	2320      	movs	r3, #32
 8008908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800890c:	2330      	movs	r3, #48	@ 0x30
 800890e:	f04f 0901 	mov.w	r9, #1
 8008912:	f8cd 800c 	str.w	r8, [sp, #12]
 8008916:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008ab0 <_svfiprintf_r+0x1e4>
 800891a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800891e:	4623      	mov	r3, r4
 8008920:	469a      	mov	sl, r3
 8008922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008926:	b10a      	cbz	r2, 800892c <_svfiprintf_r+0x60>
 8008928:	2a25      	cmp	r2, #37	@ 0x25
 800892a:	d1f9      	bne.n	8008920 <_svfiprintf_r+0x54>
 800892c:	ebba 0b04 	subs.w	fp, sl, r4
 8008930:	d00b      	beq.n	800894a <_svfiprintf_r+0x7e>
 8008932:	465b      	mov	r3, fp
 8008934:	4622      	mov	r2, r4
 8008936:	4629      	mov	r1, r5
 8008938:	4638      	mov	r0, r7
 800893a:	f7ff ff6b 	bl	8008814 <__ssputs_r>
 800893e:	3001      	adds	r0, #1
 8008940:	f000 80a7 	beq.w	8008a92 <_svfiprintf_r+0x1c6>
 8008944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008946:	445a      	add	r2, fp
 8008948:	9209      	str	r2, [sp, #36]	@ 0x24
 800894a:	f89a 3000 	ldrb.w	r3, [sl]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 809f 	beq.w	8008a92 <_svfiprintf_r+0x1c6>
 8008954:	2300      	movs	r3, #0
 8008956:	f04f 32ff 	mov.w	r2, #4294967295
 800895a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800895e:	f10a 0a01 	add.w	sl, sl, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	9307      	str	r3, [sp, #28]
 8008966:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800896a:	931a      	str	r3, [sp, #104]	@ 0x68
 800896c:	4654      	mov	r4, sl
 800896e:	2205      	movs	r2, #5
 8008970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008974:	484e      	ldr	r0, [pc, #312]	@ (8008ab0 <_svfiprintf_r+0x1e4>)
 8008976:	f7fd fcba 	bl	80062ee <memchr>
 800897a:	9a04      	ldr	r2, [sp, #16]
 800897c:	b9d8      	cbnz	r0, 80089b6 <_svfiprintf_r+0xea>
 800897e:	06d0      	lsls	r0, r2, #27
 8008980:	bf44      	itt	mi
 8008982:	2320      	movmi	r3, #32
 8008984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008988:	0711      	lsls	r1, r2, #28
 800898a:	bf44      	itt	mi
 800898c:	232b      	movmi	r3, #43	@ 0x2b
 800898e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008992:	f89a 3000 	ldrb.w	r3, [sl]
 8008996:	2b2a      	cmp	r3, #42	@ 0x2a
 8008998:	d015      	beq.n	80089c6 <_svfiprintf_r+0xfa>
 800899a:	4654      	mov	r4, sl
 800899c:	2000      	movs	r0, #0
 800899e:	f04f 0c0a 	mov.w	ip, #10
 80089a2:	9a07      	ldr	r2, [sp, #28]
 80089a4:	4621      	mov	r1, r4
 80089a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089aa:	3b30      	subs	r3, #48	@ 0x30
 80089ac:	2b09      	cmp	r3, #9
 80089ae:	d94b      	bls.n	8008a48 <_svfiprintf_r+0x17c>
 80089b0:	b1b0      	cbz	r0, 80089e0 <_svfiprintf_r+0x114>
 80089b2:	9207      	str	r2, [sp, #28]
 80089b4:	e014      	b.n	80089e0 <_svfiprintf_r+0x114>
 80089b6:	eba0 0308 	sub.w	r3, r0, r8
 80089ba:	fa09 f303 	lsl.w	r3, r9, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	46a2      	mov	sl, r4
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	e7d2      	b.n	800896c <_svfiprintf_r+0xa0>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	1d19      	adds	r1, r3, #4
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	9103      	str	r1, [sp, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bfbb      	ittet	lt
 80089d2:	425b      	neglt	r3, r3
 80089d4:	f042 0202 	orrlt.w	r2, r2, #2
 80089d8:	9307      	strge	r3, [sp, #28]
 80089da:	9307      	strlt	r3, [sp, #28]
 80089dc:	bfb8      	it	lt
 80089de:	9204      	strlt	r2, [sp, #16]
 80089e0:	7823      	ldrb	r3, [r4, #0]
 80089e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e4:	d10a      	bne.n	80089fc <_svfiprintf_r+0x130>
 80089e6:	7863      	ldrb	r3, [r4, #1]
 80089e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ea:	d132      	bne.n	8008a52 <_svfiprintf_r+0x186>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	3402      	adds	r4, #2
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008ab4 <_svfiprintf_r+0x1e8>
 8008a00:	2203      	movs	r2, #3
 8008a02:	4650      	mov	r0, sl
 8008a04:	7821      	ldrb	r1, [r4, #0]
 8008a06:	f7fd fc72 	bl	80062ee <memchr>
 8008a0a:	b138      	cbz	r0, 8008a1c <_svfiprintf_r+0x150>
 8008a0c:	2240      	movs	r2, #64	@ 0x40
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	eba0 000a 	sub.w	r0, r0, sl
 8008a14:	4082      	lsls	r2, r0
 8008a16:	4313      	orrs	r3, r2
 8008a18:	3401      	adds	r4, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a20:	2206      	movs	r2, #6
 8008a22:	4825      	ldr	r0, [pc, #148]	@ (8008ab8 <_svfiprintf_r+0x1ec>)
 8008a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a28:	f7fd fc61 	bl	80062ee <memchr>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d036      	beq.n	8008a9e <_svfiprintf_r+0x1d2>
 8008a30:	4b22      	ldr	r3, [pc, #136]	@ (8008abc <_svfiprintf_r+0x1f0>)
 8008a32:	bb1b      	cbnz	r3, 8008a7c <_svfiprintf_r+0x1b0>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	3307      	adds	r3, #7
 8008a38:	f023 0307 	bic.w	r3, r3, #7
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a42:	4433      	add	r3, r6
 8008a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a46:	e76a      	b.n	800891e <_svfiprintf_r+0x52>
 8008a48:	460c      	mov	r4, r1
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a50:	e7a8      	b.n	80089a4 <_svfiprintf_r+0xd8>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f04f 0c0a 	mov.w	ip, #10
 8008a58:	4619      	mov	r1, r3
 8008a5a:	3401      	adds	r4, #1
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a64:	3a30      	subs	r2, #48	@ 0x30
 8008a66:	2a09      	cmp	r2, #9
 8008a68:	d903      	bls.n	8008a72 <_svfiprintf_r+0x1a6>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d0c6      	beq.n	80089fc <_svfiprintf_r+0x130>
 8008a6e:	9105      	str	r1, [sp, #20]
 8008a70:	e7c4      	b.n	80089fc <_svfiprintf_r+0x130>
 8008a72:	4604      	mov	r4, r0
 8008a74:	2301      	movs	r3, #1
 8008a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a7a:	e7f0      	b.n	8008a5e <_svfiprintf_r+0x192>
 8008a7c:	ab03      	add	r3, sp, #12
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	462a      	mov	r2, r5
 8008a82:	4638      	mov	r0, r7
 8008a84:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac0 <_svfiprintf_r+0x1f4>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	f7fc fc92 	bl	80053b0 <_printf_float>
 8008a8c:	1c42      	adds	r2, r0, #1
 8008a8e:	4606      	mov	r6, r0
 8008a90:	d1d6      	bne.n	8008a40 <_svfiprintf_r+0x174>
 8008a92:	89ab      	ldrh	r3, [r5, #12]
 8008a94:	065b      	lsls	r3, r3, #25
 8008a96:	f53f af2d 	bmi.w	80088f4 <_svfiprintf_r+0x28>
 8008a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a9c:	e72c      	b.n	80088f8 <_svfiprintf_r+0x2c>
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	4b06      	ldr	r3, [pc, #24]	@ (8008ac0 <_svfiprintf_r+0x1f4>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	f7fc ff1f 	bl	80058ec <_printf_i>
 8008aae:	e7ed      	b.n	8008a8c <_svfiprintf_r+0x1c0>
 8008ab0:	0800a6e1 	.word	0x0800a6e1
 8008ab4:	0800a6e7 	.word	0x0800a6e7
 8008ab8:	0800a6eb 	.word	0x0800a6eb
 8008abc:	080053b1 	.word	0x080053b1
 8008ac0:	08008815 	.word	0x08008815

08008ac4 <_sungetc_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	1c4b      	adds	r3, r1, #1
 8008ac8:	4614      	mov	r4, r2
 8008aca:	d103      	bne.n	8008ad4 <_sungetc_r+0x10>
 8008acc:	f04f 35ff 	mov.w	r5, #4294967295
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	8993      	ldrh	r3, [r2, #12]
 8008ad6:	b2cd      	uxtb	r5, r1
 8008ad8:	f023 0320 	bic.w	r3, r3, #32
 8008adc:	8193      	strh	r3, [r2, #12]
 8008ade:	6853      	ldr	r3, [r2, #4]
 8008ae0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008ae2:	b18a      	cbz	r2, 8008b08 <_sungetc_r+0x44>
 8008ae4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	dd08      	ble.n	8008afc <_sungetc_r+0x38>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	1e5a      	subs	r2, r3, #1
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008af4:	6863      	ldr	r3, [r4, #4]
 8008af6:	3301      	adds	r3, #1
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	e7e9      	b.n	8008ad0 <_sungetc_r+0xc>
 8008afc:	4621      	mov	r1, r4
 8008afe:	f000 fbd8 	bl	80092b2 <__submore>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d0f1      	beq.n	8008aea <_sungetc_r+0x26>
 8008b06:	e7e1      	b.n	8008acc <_sungetc_r+0x8>
 8008b08:	6921      	ldr	r1, [r4, #16]
 8008b0a:	6822      	ldr	r2, [r4, #0]
 8008b0c:	b141      	cbz	r1, 8008b20 <_sungetc_r+0x5c>
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	d206      	bcs.n	8008b20 <_sungetc_r+0x5c>
 8008b12:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008b16:	42a9      	cmp	r1, r5
 8008b18:	d102      	bne.n	8008b20 <_sungetc_r+0x5c>
 8008b1a:	3a01      	subs	r2, #1
 8008b1c:	6022      	str	r2, [r4, #0]
 8008b1e:	e7ea      	b.n	8008af6 <_sungetc_r+0x32>
 8008b20:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008b2e:	4623      	mov	r3, r4
 8008b30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	2301      	movs	r3, #1
 8008b38:	e7de      	b.n	8008af8 <_sungetc_r+0x34>

08008b3a <__ssrefill_r>:
 8008b3a:	b510      	push	{r4, lr}
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008b40:	b169      	cbz	r1, 8008b5e <__ssrefill_r+0x24>
 8008b42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b46:	4299      	cmp	r1, r3
 8008b48:	d001      	beq.n	8008b4e <__ssrefill_r+0x14>
 8008b4a:	f7fe fa41 	bl	8006fd0 <_free_r>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b52:	6360      	str	r0, [r4, #52]	@ 0x34
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	b113      	cbz	r3, 8008b5e <__ssrefill_r+0x24>
 8008b58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	2300      	movs	r3, #0
 8008b68:	6063      	str	r3, [r4, #4]
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	f043 0320 	orr.w	r3, r3, #32
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	e7f3      	b.n	8008b5c <__ssrefill_r+0x22>

08008b74 <__ssvfiscanf_r>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	460c      	mov	r4, r1
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008b82:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008b86:	49aa      	ldr	r1, [pc, #680]	@ (8008e30 <__ssvfiscanf_r+0x2bc>)
 8008b88:	f10d 0804 	add.w	r8, sp, #4
 8008b8c:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008b8e:	49a9      	ldr	r1, [pc, #676]	@ (8008e34 <__ssvfiscanf_r+0x2c0>)
 8008b90:	4fa9      	ldr	r7, [pc, #676]	@ (8008e38 <__ssvfiscanf_r+0x2c4>)
 8008b92:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008b96:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	7813      	ldrb	r3, [r2, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8159 	beq.w	8008e54 <__ssvfiscanf_r+0x2e0>
 8008ba2:	5cf9      	ldrb	r1, [r7, r3]
 8008ba4:	1c55      	adds	r5, r2, #1
 8008ba6:	f011 0108 	ands.w	r1, r1, #8
 8008baa:	d019      	beq.n	8008be0 <__ssvfiscanf_r+0x6c>
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd0f      	ble.n	8008bd2 <__ssvfiscanf_r+0x5e>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	5cba      	ldrb	r2, [r7, r2]
 8008bb8:	0712      	lsls	r2, r2, #28
 8008bba:	d401      	bmi.n	8008bc0 <__ssvfiscanf_r+0x4c>
 8008bbc:	462a      	mov	r2, r5
 8008bbe:	e7ec      	b.n	8008b9a <__ssvfiscanf_r+0x26>
 8008bc0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	3201      	adds	r2, #1
 8008bc6:	9245      	str	r2, [sp, #276]	@ 0x114
 8008bc8:	6862      	ldr	r2, [r4, #4]
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	3a01      	subs	r2, #1
 8008bce:	6062      	str	r2, [r4, #4]
 8008bd0:	e7ec      	b.n	8008bac <__ssvfiscanf_r+0x38>
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008bd8:	4798      	blx	r3
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d0e9      	beq.n	8008bb2 <__ssvfiscanf_r+0x3e>
 8008bde:	e7ed      	b.n	8008bbc <__ssvfiscanf_r+0x48>
 8008be0:	2b25      	cmp	r3, #37	@ 0x25
 8008be2:	d012      	beq.n	8008c0a <__ssvfiscanf_r+0x96>
 8008be4:	4699      	mov	r9, r3
 8008be6:	6863      	ldr	r3, [r4, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f340 8094 	ble.w	8008d16 <__ssvfiscanf_r+0x1a2>
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	7813      	ldrb	r3, [r2, #0]
 8008bf2:	454b      	cmp	r3, r9
 8008bf4:	f040 812e 	bne.w	8008e54 <__ssvfiscanf_r+0x2e0>
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	3201      	adds	r2, #1
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	9345      	str	r3, [sp, #276]	@ 0x114
 8008c08:	e7d8      	b.n	8008bbc <__ssvfiscanf_r+0x48>
 8008c0a:	9141      	str	r1, [sp, #260]	@ 0x104
 8008c0c:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008c0e:	7853      	ldrb	r3, [r2, #1]
 8008c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c12:	bf04      	itt	eq
 8008c14:	2310      	moveq	r3, #16
 8008c16:	1c95      	addeq	r5, r2, #2
 8008c18:	f04f 020a 	mov.w	r2, #10
 8008c1c:	bf08      	it	eq
 8008c1e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008c20:	46a9      	mov	r9, r5
 8008c22:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008c26:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d91e      	bls.n	8008c6c <__ssvfiscanf_r+0xf8>
 8008c2e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8008e3c <__ssvfiscanf_r+0x2c8>
 8008c32:	2203      	movs	r2, #3
 8008c34:	4650      	mov	r0, sl
 8008c36:	f7fd fb5a 	bl	80062ee <memchr>
 8008c3a:	b138      	cbz	r0, 8008c4c <__ssvfiscanf_r+0xd8>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	464d      	mov	r5, r9
 8008c40:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008c42:	eba0 000a 	sub.w	r0, r0, sl
 8008c46:	4083      	lsls	r3, r0
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	9341      	str	r3, [sp, #260]	@ 0x104
 8008c4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c50:	2b78      	cmp	r3, #120	@ 0x78
 8008c52:	d806      	bhi.n	8008c62 <__ssvfiscanf_r+0xee>
 8008c54:	2b57      	cmp	r3, #87	@ 0x57
 8008c56:	d810      	bhi.n	8008c7a <__ssvfiscanf_r+0x106>
 8008c58:	2b25      	cmp	r3, #37	@ 0x25
 8008c5a:	d0c3      	beq.n	8008be4 <__ssvfiscanf_r+0x70>
 8008c5c:	d856      	bhi.n	8008d0c <__ssvfiscanf_r+0x198>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d064      	beq.n	8008d2c <__ssvfiscanf_r+0x1b8>
 8008c62:	2303      	movs	r3, #3
 8008c64:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008c66:	230a      	movs	r3, #10
 8008c68:	9342      	str	r3, [sp, #264]	@ 0x108
 8008c6a:	e077      	b.n	8008d5c <__ssvfiscanf_r+0x1e8>
 8008c6c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008c6e:	464d      	mov	r5, r9
 8008c70:	fb02 1103 	mla	r1, r2, r3, r1
 8008c74:	3930      	subs	r1, #48	@ 0x30
 8008c76:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008c78:	e7d2      	b.n	8008c20 <__ssvfiscanf_r+0xac>
 8008c7a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008c7e:	2a20      	cmp	r2, #32
 8008c80:	d8ef      	bhi.n	8008c62 <__ssvfiscanf_r+0xee>
 8008c82:	a101      	add	r1, pc, #4	@ (adr r1, 8008c88 <__ssvfiscanf_r+0x114>)
 8008c84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c88:	08008d3b 	.word	0x08008d3b
 8008c8c:	08008c63 	.word	0x08008c63
 8008c90:	08008c63 	.word	0x08008c63
 8008c94:	08008d95 	.word	0x08008d95
 8008c98:	08008c63 	.word	0x08008c63
 8008c9c:	08008c63 	.word	0x08008c63
 8008ca0:	08008c63 	.word	0x08008c63
 8008ca4:	08008c63 	.word	0x08008c63
 8008ca8:	08008c63 	.word	0x08008c63
 8008cac:	08008c63 	.word	0x08008c63
 8008cb0:	08008c63 	.word	0x08008c63
 8008cb4:	08008dab 	.word	0x08008dab
 8008cb8:	08008d91 	.word	0x08008d91
 8008cbc:	08008d13 	.word	0x08008d13
 8008cc0:	08008d13 	.word	0x08008d13
 8008cc4:	08008d13 	.word	0x08008d13
 8008cc8:	08008c63 	.word	0x08008c63
 8008ccc:	08008d4d 	.word	0x08008d4d
 8008cd0:	08008c63 	.word	0x08008c63
 8008cd4:	08008c63 	.word	0x08008c63
 8008cd8:	08008c63 	.word	0x08008c63
 8008cdc:	08008c63 	.word	0x08008c63
 8008ce0:	08008dbb 	.word	0x08008dbb
 8008ce4:	08008d55 	.word	0x08008d55
 8008ce8:	08008d33 	.word	0x08008d33
 8008cec:	08008c63 	.word	0x08008c63
 8008cf0:	08008c63 	.word	0x08008c63
 8008cf4:	08008db7 	.word	0x08008db7
 8008cf8:	08008c63 	.word	0x08008c63
 8008cfc:	08008d91 	.word	0x08008d91
 8008d00:	08008c63 	.word	0x08008c63
 8008d04:	08008c63 	.word	0x08008c63
 8008d08:	08008d3b 	.word	0x08008d3b
 8008d0c:	3b45      	subs	r3, #69	@ 0x45
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d8a7      	bhi.n	8008c62 <__ssvfiscanf_r+0xee>
 8008d12:	2305      	movs	r3, #5
 8008d14:	e021      	b.n	8008d5a <__ssvfiscanf_r+0x1e6>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4630      	mov	r0, r6
 8008d1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d1c:	4798      	blx	r3
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	f43f af65 	beq.w	8008bee <__ssvfiscanf_r+0x7a>
 8008d24:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f040 808c 	bne.w	8008e44 <__ssvfiscanf_r+0x2d0>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e08c      	b.n	8008e4c <__ssvfiscanf_r+0x2d8>
 8008d32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d34:	f042 0220 	orr.w	r2, r2, #32
 8008d38:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d40:	9241      	str	r2, [sp, #260]	@ 0x104
 8008d42:	2210      	movs	r2, #16
 8008d44:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d46:	9242      	str	r2, [sp, #264]	@ 0x108
 8008d48:	d902      	bls.n	8008d50 <__ssvfiscanf_r+0x1dc>
 8008d4a:	e005      	b.n	8008d58 <__ssvfiscanf_r+0x1e4>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008d50:	2303      	movs	r3, #3
 8008d52:	e002      	b.n	8008d5a <__ssvfiscanf_r+0x1e6>
 8008d54:	2308      	movs	r3, #8
 8008d56:	9342      	str	r3, [sp, #264]	@ 0x108
 8008d58:	2304      	movs	r3, #4
 8008d5a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	dd39      	ble.n	8008dd6 <__ssvfiscanf_r+0x262>
 8008d62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d64:	0659      	lsls	r1, r3, #25
 8008d66:	d404      	bmi.n	8008d72 <__ssvfiscanf_r+0x1fe>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	5cba      	ldrb	r2, [r7, r2]
 8008d6e:	0712      	lsls	r2, r2, #28
 8008d70:	d438      	bmi.n	8008de4 <__ssvfiscanf_r+0x270>
 8008d72:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	dc47      	bgt.n	8008e08 <__ssvfiscanf_r+0x294>
 8008d78:	466b      	mov	r3, sp
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	a941      	add	r1, sp, #260	@ 0x104
 8008d80:	f000 f86a 	bl	8008e58 <_scanf_chars>
 8008d84:	2801      	cmp	r0, #1
 8008d86:	d065      	beq.n	8008e54 <__ssvfiscanf_r+0x2e0>
 8008d88:	2802      	cmp	r0, #2
 8008d8a:	f47f af17 	bne.w	8008bbc <__ssvfiscanf_r+0x48>
 8008d8e:	e7c9      	b.n	8008d24 <__ssvfiscanf_r+0x1b0>
 8008d90:	220a      	movs	r2, #10
 8008d92:	e7d7      	b.n	8008d44 <__ssvfiscanf_r+0x1d0>
 8008d94:	4629      	mov	r1, r5
 8008d96:	4640      	mov	r0, r8
 8008d98:	f000 fa52 	bl	8009240 <__sccl>
 8008d9c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008d9e:	4605      	mov	r5, r0
 8008da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da4:	9341      	str	r3, [sp, #260]	@ 0x104
 8008da6:	2301      	movs	r3, #1
 8008da8:	e7d7      	b.n	8008d5a <__ssvfiscanf_r+0x1e6>
 8008daa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db0:	9341      	str	r3, [sp, #260]	@ 0x104
 8008db2:	2300      	movs	r3, #0
 8008db4:	e7d1      	b.n	8008d5a <__ssvfiscanf_r+0x1e6>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e7cf      	b.n	8008d5a <__ssvfiscanf_r+0x1e6>
 8008dba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008dbc:	06c3      	lsls	r3, r0, #27
 8008dbe:	f53f aefd 	bmi.w	8008bbc <__ssvfiscanf_r+0x48>
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008dc6:	1d19      	adds	r1, r3, #4
 8008dc8:	9100      	str	r1, [sp, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	07c0      	lsls	r0, r0, #31
 8008dce:	bf4c      	ite	mi
 8008dd0:	801a      	strhmi	r2, [r3, #0]
 8008dd2:	601a      	strpl	r2, [r3, #0]
 8008dd4:	e6f2      	b.n	8008bbc <__ssvfiscanf_r+0x48>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4630      	mov	r0, r6
 8008dda:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008ddc:	4798      	blx	r3
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d0bf      	beq.n	8008d62 <__ssvfiscanf_r+0x1ee>
 8008de2:	e79f      	b.n	8008d24 <__ssvfiscanf_r+0x1b0>
 8008de4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008de6:	3201      	adds	r2, #1
 8008de8:	9245      	str	r2, [sp, #276]	@ 0x114
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	3a01      	subs	r2, #1
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	6062      	str	r2, [r4, #4]
 8008df2:	dd02      	ble.n	8008dfa <__ssvfiscanf_r+0x286>
 8008df4:	3301      	adds	r3, #1
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	e7b6      	b.n	8008d68 <__ssvfiscanf_r+0x1f4>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008e00:	4798      	blx	r3
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d0b0      	beq.n	8008d68 <__ssvfiscanf_r+0x1f4>
 8008e06:	e78d      	b.n	8008d24 <__ssvfiscanf_r+0x1b0>
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	dc06      	bgt.n	8008e1a <__ssvfiscanf_r+0x2a6>
 8008e0c:	466b      	mov	r3, sp
 8008e0e:	4622      	mov	r2, r4
 8008e10:	4630      	mov	r0, r6
 8008e12:	a941      	add	r1, sp, #260	@ 0x104
 8008e14:	f000 f87a 	bl	8008f0c <_scanf_i>
 8008e18:	e7b4      	b.n	8008d84 <__ssvfiscanf_r+0x210>
 8008e1a:	4b09      	ldr	r3, [pc, #36]	@ (8008e40 <__ssvfiscanf_r+0x2cc>)
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f43f aecd 	beq.w	8008bbc <__ssvfiscanf_r+0x48>
 8008e22:	466b      	mov	r3, sp
 8008e24:	4622      	mov	r2, r4
 8008e26:	4630      	mov	r0, r6
 8008e28:	a941      	add	r1, sp, #260	@ 0x104
 8008e2a:	f7fc fe7f 	bl	8005b2c <_scanf_float>
 8008e2e:	e7a9      	b.n	8008d84 <__ssvfiscanf_r+0x210>
 8008e30:	08008ac5 	.word	0x08008ac5
 8008e34:	08008b3b 	.word	0x08008b3b
 8008e38:	0800a5e1 	.word	0x0800a5e1
 8008e3c:	0800a6e7 	.word	0x0800a6e7
 8008e40:	08005b2d 	.word	0x08005b2d
 8008e44:	89a3      	ldrh	r3, [r4, #12]
 8008e46:	065b      	lsls	r3, r3, #25
 8008e48:	f53f af70 	bmi.w	8008d2c <__ssvfiscanf_r+0x1b8>
 8008e4c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008e56:	e7f9      	b.n	8008e4c <__ssvfiscanf_r+0x2d8>

08008e58 <_scanf_chars>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	688a      	ldr	r2, [r1, #8]
 8008e60:	4680      	mov	r8, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	b932      	cbnz	r2, 8008e74 <_scanf_chars+0x1c>
 8008e66:	698a      	ldr	r2, [r1, #24]
 8008e68:	2a00      	cmp	r2, #0
 8008e6a:	bf14      	ite	ne
 8008e6c:	f04f 32ff 	movne.w	r2, #4294967295
 8008e70:	2201      	moveq	r2, #1
 8008e72:	608a      	str	r2, [r1, #8]
 8008e74:	2700      	movs	r7, #0
 8008e76:	6822      	ldr	r2, [r4, #0]
 8008e78:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8008f08 <_scanf_chars+0xb0>
 8008e7c:	06d1      	lsls	r1, r2, #27
 8008e7e:	bf5f      	itttt	pl
 8008e80:	681a      	ldrpl	r2, [r3, #0]
 8008e82:	1d11      	addpl	r1, r2, #4
 8008e84:	6019      	strpl	r1, [r3, #0]
 8008e86:	6816      	ldrpl	r6, [r2, #0]
 8008e88:	69a0      	ldr	r0, [r4, #24]
 8008e8a:	b188      	cbz	r0, 8008eb0 <_scanf_chars+0x58>
 8008e8c:	2801      	cmp	r0, #1
 8008e8e:	d107      	bne.n	8008ea0 <_scanf_chars+0x48>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	6963      	ldr	r3, [r4, #20]
 8008e96:	5c9b      	ldrb	r3, [r3, r2]
 8008e98:	b953      	cbnz	r3, 8008eb0 <_scanf_chars+0x58>
 8008e9a:	2f00      	cmp	r7, #0
 8008e9c:	d031      	beq.n	8008f02 <_scanf_chars+0xaa>
 8008e9e:	e022      	b.n	8008ee6 <_scanf_chars+0x8e>
 8008ea0:	2802      	cmp	r0, #2
 8008ea2:	d120      	bne.n	8008ee6 <_scanf_chars+0x8e>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008eac:	071b      	lsls	r3, r3, #28
 8008eae:	d41a      	bmi.n	8008ee6 <_scanf_chars+0x8e>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	3701      	adds	r7, #1
 8008eb4:	06da      	lsls	r2, r3, #27
 8008eb6:	bf5e      	ittt	pl
 8008eb8:	682b      	ldrpl	r3, [r5, #0]
 8008eba:	781b      	ldrbpl	r3, [r3, #0]
 8008ebc:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ec0:	682a      	ldr	r2, [r5, #0]
 8008ec2:	686b      	ldr	r3, [r5, #4]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	602a      	str	r2, [r5, #0]
 8008ec8:	68a2      	ldr	r2, [r4, #8]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	3a01      	subs	r2, #1
 8008ece:	606b      	str	r3, [r5, #4]
 8008ed0:	60a2      	str	r2, [r4, #8]
 8008ed2:	b142      	cbz	r2, 8008ee6 <_scanf_chars+0x8e>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dcd7      	bgt.n	8008e88 <_scanf_chars+0x30>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4640      	mov	r0, r8
 8008edc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ee0:	4798      	blx	r3
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d0d0      	beq.n	8008e88 <_scanf_chars+0x30>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f013 0310 	ands.w	r3, r3, #16
 8008eec:	d105      	bne.n	8008efa <_scanf_chars+0xa2>
 8008eee:	68e2      	ldr	r2, [r4, #12]
 8008ef0:	3201      	adds	r2, #1
 8008ef2:	60e2      	str	r2, [r4, #12]
 8008ef4:	69a2      	ldr	r2, [r4, #24]
 8008ef6:	b102      	cbz	r2, 8008efa <_scanf_chars+0xa2>
 8008ef8:	7033      	strb	r3, [r6, #0]
 8008efa:	2000      	movs	r0, #0
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	443b      	add	r3, r7
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f06:	bf00      	nop
 8008f08:	0800a5e1 	.word	0x0800a5e1

08008f0c <_scanf_i>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	460c      	mov	r4, r1
 8008f12:	4698      	mov	r8, r3
 8008f14:	4b72      	ldr	r3, [pc, #456]	@ (80090e0 <_scanf_i+0x1d4>)
 8008f16:	b087      	sub	sp, #28
 8008f18:	4682      	mov	sl, r0
 8008f1a:	4616      	mov	r6, r2
 8008f1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008f26:	4b6f      	ldr	r3, [pc, #444]	@ (80090e4 <_scanf_i+0x1d8>)
 8008f28:	69a1      	ldr	r1, [r4, #24]
 8008f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80090e8 <_scanf_i+0x1dc>)
 8008f2c:	4627      	mov	r7, r4
 8008f2e:	2903      	cmp	r1, #3
 8008f30:	bf08      	it	eq
 8008f32:	461a      	moveq	r2, r3
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	9201      	str	r2, [sp, #4]
 8008f38:	1e5a      	subs	r2, r3, #1
 8008f3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008f3e:	bf81      	itttt	hi
 8008f40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008f44:	eb03 0905 	addhi.w	r9, r3, r5
 8008f48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008f4c:	60a3      	strhi	r3, [r4, #8]
 8008f4e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f52:	bf98      	it	ls
 8008f54:	f04f 0900 	movls.w	r9, #0
 8008f58:	463d      	mov	r5, r7
 8008f5a:	f04f 0b00 	mov.w	fp, #0
 8008f5e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	6831      	ldr	r1, [r6, #0]
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	2202      	movs	r2, #2
 8008f6a:	7809      	ldrb	r1, [r1, #0]
 8008f6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008f70:	f7fd f9bd 	bl	80062ee <memchr>
 8008f74:	b328      	cbz	r0, 8008fc2 <_scanf_i+0xb6>
 8008f76:	f1bb 0f01 	cmp.w	fp, #1
 8008f7a:	d159      	bne.n	8009030 <_scanf_i+0x124>
 8008f7c:	6862      	ldr	r2, [r4, #4]
 8008f7e:	b92a      	cbnz	r2, 8008f8c <_scanf_i+0x80>
 8008f80:	2108      	movs	r1, #8
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	6061      	str	r1, [r4, #4]
 8008f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f8a:	6022      	str	r2, [r4, #0]
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	68a2      	ldr	r2, [r4, #8]
 8008f96:	1e51      	subs	r1, r2, #1
 8008f98:	60a1      	str	r1, [r4, #8]
 8008f9a:	b192      	cbz	r2, 8008fc2 <_scanf_i+0xb6>
 8008f9c:	6832      	ldr	r2, [r6, #0]
 8008f9e:	1c51      	adds	r1, r2, #1
 8008fa0:	6031      	str	r1, [r6, #0]
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	f805 2b01 	strb.w	r2, [r5], #1
 8008fa8:	6872      	ldr	r2, [r6, #4]
 8008faa:	3a01      	subs	r2, #1
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	6072      	str	r2, [r6, #4]
 8008fb0:	dc07      	bgt.n	8008fc2 <_scanf_i+0xb6>
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008fba:	4790      	blx	r2
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f040 8085 	bne.w	80090cc <_scanf_i+0x1c0>
 8008fc2:	f10b 0b01 	add.w	fp, fp, #1
 8008fc6:	f1bb 0f03 	cmp.w	fp, #3
 8008fca:	d1cb      	bne.n	8008f64 <_scanf_i+0x58>
 8008fcc:	6863      	ldr	r3, [r4, #4]
 8008fce:	b90b      	cbnz	r3, 8008fd4 <_scanf_i+0xc8>
 8008fd0:	230a      	movs	r3, #10
 8008fd2:	6063      	str	r3, [r4, #4]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	4945      	ldr	r1, [pc, #276]	@ (80090ec <_scanf_i+0x1e0>)
 8008fd8:	6960      	ldr	r0, [r4, #20]
 8008fda:	1ac9      	subs	r1, r1, r3
 8008fdc:	f000 f930 	bl	8009240 <__sccl>
 8008fe0:	f04f 0b00 	mov.w	fp, #0
 8008fe4:	68a3      	ldr	r3, [r4, #8]
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d03d      	beq.n	8009068 <_scanf_i+0x15c>
 8008fec:	6831      	ldr	r1, [r6, #0]
 8008fee:	6960      	ldr	r0, [r4, #20]
 8008ff0:	f891 c000 	ldrb.w	ip, [r1]
 8008ff4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d035      	beq.n	8009068 <_scanf_i+0x15c>
 8008ffc:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009000:	d124      	bne.n	800904c <_scanf_i+0x140>
 8009002:	0510      	lsls	r0, r2, #20
 8009004:	d522      	bpl.n	800904c <_scanf_i+0x140>
 8009006:	f10b 0b01 	add.w	fp, fp, #1
 800900a:	f1b9 0f00 	cmp.w	r9, #0
 800900e:	d003      	beq.n	8009018 <_scanf_i+0x10c>
 8009010:	3301      	adds	r3, #1
 8009012:	f109 39ff 	add.w	r9, r9, #4294967295
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	6873      	ldr	r3, [r6, #4]
 800901a:	3b01      	subs	r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	6073      	str	r3, [r6, #4]
 8009020:	dd1b      	ble.n	800905a <_scanf_i+0x14e>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	68a3      	ldr	r3, [r4, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	60a3      	str	r3, [r4, #8]
 800902e:	e7d9      	b.n	8008fe4 <_scanf_i+0xd8>
 8009030:	f1bb 0f02 	cmp.w	fp, #2
 8009034:	d1ae      	bne.n	8008f94 <_scanf_i+0x88>
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800903c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009040:	d1bf      	bne.n	8008fc2 <_scanf_i+0xb6>
 8009042:	2110      	movs	r1, #16
 8009044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009048:	6061      	str	r1, [r4, #4]
 800904a:	e7a2      	b.n	8008f92 <_scanf_i+0x86>
 800904c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009050:	6022      	str	r2, [r4, #0]
 8009052:	780b      	ldrb	r3, [r1, #0]
 8009054:	f805 3b01 	strb.w	r3, [r5], #1
 8009058:	e7de      	b.n	8009018 <_scanf_i+0x10c>
 800905a:	4631      	mov	r1, r6
 800905c:	4650      	mov	r0, sl
 800905e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009062:	4798      	blx	r3
 8009064:	2800      	cmp	r0, #0
 8009066:	d0df      	beq.n	8009028 <_scanf_i+0x11c>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	05d9      	lsls	r1, r3, #23
 800906c:	d50d      	bpl.n	800908a <_scanf_i+0x17e>
 800906e:	42bd      	cmp	r5, r7
 8009070:	d909      	bls.n	8009086 <_scanf_i+0x17a>
 8009072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009076:	4632      	mov	r2, r6
 8009078:	4650      	mov	r0, sl
 800907a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800907e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009082:	4798      	blx	r3
 8009084:	464d      	mov	r5, r9
 8009086:	42bd      	cmp	r5, r7
 8009088:	d028      	beq.n	80090dc <_scanf_i+0x1d0>
 800908a:	6822      	ldr	r2, [r4, #0]
 800908c:	f012 0210 	ands.w	r2, r2, #16
 8009090:	d113      	bne.n	80090ba <_scanf_i+0x1ae>
 8009092:	702a      	strb	r2, [r5, #0]
 8009094:	4639      	mov	r1, r7
 8009096:	6863      	ldr	r3, [r4, #4]
 8009098:	4650      	mov	r0, sl
 800909a:	9e01      	ldr	r6, [sp, #4]
 800909c:	47b0      	blx	r6
 800909e:	f8d8 3000 	ldr.w	r3, [r8]
 80090a2:	6821      	ldr	r1, [r4, #0]
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	f8c8 2000 	str.w	r2, [r8]
 80090aa:	f011 0f20 	tst.w	r1, #32
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	d00f      	beq.n	80090d2 <_scanf_i+0x1c6>
 80090b2:	6018      	str	r0, [r3, #0]
 80090b4:	68e3      	ldr	r3, [r4, #12]
 80090b6:	3301      	adds	r3, #1
 80090b8:	60e3      	str	r3, [r4, #12]
 80090ba:	2000      	movs	r0, #0
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	1bed      	subs	r5, r5, r7
 80090c0:	445d      	add	r5, fp
 80090c2:	442b      	add	r3, r5
 80090c4:	6123      	str	r3, [r4, #16]
 80090c6:	b007      	add	sp, #28
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	f04f 0b00 	mov.w	fp, #0
 80090d0:	e7ca      	b.n	8009068 <_scanf_i+0x15c>
 80090d2:	07ca      	lsls	r2, r1, #31
 80090d4:	bf4c      	ite	mi
 80090d6:	8018      	strhmi	r0, [r3, #0]
 80090d8:	6018      	strpl	r0, [r3, #0]
 80090da:	e7eb      	b.n	80090b4 <_scanf_i+0x1a8>
 80090dc:	2001      	movs	r0, #1
 80090de:	e7f2      	b.n	80090c6 <_scanf_i+0x1ba>
 80090e0:	0800a338 	.word	0x0800a338
 80090e4:	08008811 	.word	0x08008811
 80090e8:	08009bdd 	.word	0x08009bdd
 80090ec:	0800a702 	.word	0x0800a702

080090f0 <__sflush_r>:
 80090f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	0716      	lsls	r6, r2, #28
 80090f8:	4605      	mov	r5, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	d454      	bmi.n	80091a8 <__sflush_r+0xb8>
 80090fe:	684b      	ldr	r3, [r1, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc02      	bgt.n	800910a <__sflush_r+0x1a>
 8009104:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd48      	ble.n	800919c <__sflush_r+0xac>
 800910a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800910c:	2e00      	cmp	r6, #0
 800910e:	d045      	beq.n	800919c <__sflush_r+0xac>
 8009110:	2300      	movs	r3, #0
 8009112:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009116:	682f      	ldr	r7, [r5, #0]
 8009118:	6a21      	ldr	r1, [r4, #32]
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	d030      	beq.n	8009180 <__sflush_r+0x90>
 800911e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	0759      	lsls	r1, r3, #29
 8009124:	d505      	bpl.n	8009132 <__sflush_r+0x42>
 8009126:	6863      	ldr	r3, [r4, #4]
 8009128:	1ad2      	subs	r2, r2, r3
 800912a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800912c:	b10b      	cbz	r3, 8009132 <__sflush_r+0x42>
 800912e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	2300      	movs	r3, #0
 8009134:	4628      	mov	r0, r5
 8009136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009138:	6a21      	ldr	r1, [r4, #32]
 800913a:	47b0      	blx	r6
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	d106      	bne.n	8009150 <__sflush_r+0x60>
 8009142:	6829      	ldr	r1, [r5, #0]
 8009144:	291d      	cmp	r1, #29
 8009146:	d82b      	bhi.n	80091a0 <__sflush_r+0xb0>
 8009148:	4a28      	ldr	r2, [pc, #160]	@ (80091ec <__sflush_r+0xfc>)
 800914a:	410a      	asrs	r2, r1
 800914c:	07d6      	lsls	r6, r2, #31
 800914e:	d427      	bmi.n	80091a0 <__sflush_r+0xb0>
 8009150:	2200      	movs	r2, #0
 8009152:	6062      	str	r2, [r4, #4]
 8009154:	6922      	ldr	r2, [r4, #16]
 8009156:	04d9      	lsls	r1, r3, #19
 8009158:	6022      	str	r2, [r4, #0]
 800915a:	d504      	bpl.n	8009166 <__sflush_r+0x76>
 800915c:	1c42      	adds	r2, r0, #1
 800915e:	d101      	bne.n	8009164 <__sflush_r+0x74>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b903      	cbnz	r3, 8009166 <__sflush_r+0x76>
 8009164:	6560      	str	r0, [r4, #84]	@ 0x54
 8009166:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009168:	602f      	str	r7, [r5, #0]
 800916a:	b1b9      	cbz	r1, 800919c <__sflush_r+0xac>
 800916c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009170:	4299      	cmp	r1, r3
 8009172:	d002      	beq.n	800917a <__sflush_r+0x8a>
 8009174:	4628      	mov	r0, r5
 8009176:	f7fd ff2b 	bl	8006fd0 <_free_r>
 800917a:	2300      	movs	r3, #0
 800917c:	6363      	str	r3, [r4, #52]	@ 0x34
 800917e:	e00d      	b.n	800919c <__sflush_r+0xac>
 8009180:	2301      	movs	r3, #1
 8009182:	4628      	mov	r0, r5
 8009184:	47b0      	blx	r6
 8009186:	4602      	mov	r2, r0
 8009188:	1c50      	adds	r0, r2, #1
 800918a:	d1c9      	bne.n	8009120 <__sflush_r+0x30>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0c6      	beq.n	8009120 <__sflush_r+0x30>
 8009192:	2b1d      	cmp	r3, #29
 8009194:	d001      	beq.n	800919a <__sflush_r+0xaa>
 8009196:	2b16      	cmp	r3, #22
 8009198:	d11d      	bne.n	80091d6 <__sflush_r+0xe6>
 800919a:	602f      	str	r7, [r5, #0]
 800919c:	2000      	movs	r0, #0
 800919e:	e021      	b.n	80091e4 <__sflush_r+0xf4>
 80091a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a4:	b21b      	sxth	r3, r3
 80091a6:	e01a      	b.n	80091de <__sflush_r+0xee>
 80091a8:	690f      	ldr	r7, [r1, #16]
 80091aa:	2f00      	cmp	r7, #0
 80091ac:	d0f6      	beq.n	800919c <__sflush_r+0xac>
 80091ae:	0793      	lsls	r3, r2, #30
 80091b0:	bf18      	it	ne
 80091b2:	2300      	movne	r3, #0
 80091b4:	680e      	ldr	r6, [r1, #0]
 80091b6:	bf08      	it	eq
 80091b8:	694b      	ldreq	r3, [r1, #20]
 80091ba:	1bf6      	subs	r6, r6, r7
 80091bc:	600f      	str	r7, [r1, #0]
 80091be:	608b      	str	r3, [r1, #8]
 80091c0:	2e00      	cmp	r6, #0
 80091c2:	ddeb      	ble.n	800919c <__sflush_r+0xac>
 80091c4:	4633      	mov	r3, r6
 80091c6:	463a      	mov	r2, r7
 80091c8:	4628      	mov	r0, r5
 80091ca:	6a21      	ldr	r1, [r4, #32]
 80091cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80091d0:	47e0      	blx	ip
 80091d2:	2800      	cmp	r0, #0
 80091d4:	dc07      	bgt.n	80091e6 <__sflush_r+0xf6>
 80091d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091de:	f04f 30ff 	mov.w	r0, #4294967295
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e6:	4407      	add	r7, r0
 80091e8:	1a36      	subs	r6, r6, r0
 80091ea:	e7e9      	b.n	80091c0 <__sflush_r+0xd0>
 80091ec:	dfbffffe 	.word	0xdfbffffe

080091f0 <_fflush_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	690b      	ldr	r3, [r1, #16]
 80091f4:	4605      	mov	r5, r0
 80091f6:	460c      	mov	r4, r1
 80091f8:	b913      	cbnz	r3, 8009200 <_fflush_r+0x10>
 80091fa:	2500      	movs	r5, #0
 80091fc:	4628      	mov	r0, r5
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	b118      	cbz	r0, 800920a <_fflush_r+0x1a>
 8009202:	6a03      	ldr	r3, [r0, #32]
 8009204:	b90b      	cbnz	r3, 800920a <_fflush_r+0x1a>
 8009206:	f7fc ff2d 	bl	8006064 <__sinit>
 800920a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0f3      	beq.n	80091fa <_fflush_r+0xa>
 8009212:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009214:	07d0      	lsls	r0, r2, #31
 8009216:	d404      	bmi.n	8009222 <_fflush_r+0x32>
 8009218:	0599      	lsls	r1, r3, #22
 800921a:	d402      	bmi.n	8009222 <_fflush_r+0x32>
 800921c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800921e:	f7fd f864 	bl	80062ea <__retarget_lock_acquire_recursive>
 8009222:	4628      	mov	r0, r5
 8009224:	4621      	mov	r1, r4
 8009226:	f7ff ff63 	bl	80090f0 <__sflush_r>
 800922a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800922c:	4605      	mov	r5, r0
 800922e:	07da      	lsls	r2, r3, #31
 8009230:	d4e4      	bmi.n	80091fc <_fflush_r+0xc>
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	059b      	lsls	r3, r3, #22
 8009236:	d4e1      	bmi.n	80091fc <_fflush_r+0xc>
 8009238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800923a:	f7fd f857 	bl	80062ec <__retarget_lock_release_recursive>
 800923e:	e7dd      	b.n	80091fc <_fflush_r+0xc>

08009240 <__sccl>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	780b      	ldrb	r3, [r1, #0]
 8009244:	4604      	mov	r4, r0
 8009246:	2b5e      	cmp	r3, #94	@ 0x5e
 8009248:	bf0b      	itete	eq
 800924a:	784b      	ldrbeq	r3, [r1, #1]
 800924c:	1c4a      	addne	r2, r1, #1
 800924e:	1c8a      	addeq	r2, r1, #2
 8009250:	2100      	movne	r1, #0
 8009252:	bf08      	it	eq
 8009254:	2101      	moveq	r1, #1
 8009256:	3801      	subs	r0, #1
 8009258:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800925c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009260:	42a8      	cmp	r0, r5
 8009262:	d1fb      	bne.n	800925c <__sccl+0x1c>
 8009264:	b90b      	cbnz	r3, 800926a <__sccl+0x2a>
 8009266:	1e50      	subs	r0, r2, #1
 8009268:	bd70      	pop	{r4, r5, r6, pc}
 800926a:	f081 0101 	eor.w	r1, r1, #1
 800926e:	4610      	mov	r0, r2
 8009270:	54e1      	strb	r1, [r4, r3]
 8009272:	4602      	mov	r2, r0
 8009274:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009278:	2d2d      	cmp	r5, #45	@ 0x2d
 800927a:	d005      	beq.n	8009288 <__sccl+0x48>
 800927c:	2d5d      	cmp	r5, #93	@ 0x5d
 800927e:	d016      	beq.n	80092ae <__sccl+0x6e>
 8009280:	2d00      	cmp	r5, #0
 8009282:	d0f1      	beq.n	8009268 <__sccl+0x28>
 8009284:	462b      	mov	r3, r5
 8009286:	e7f2      	b.n	800926e <__sccl+0x2e>
 8009288:	7846      	ldrb	r6, [r0, #1]
 800928a:	2e5d      	cmp	r6, #93	@ 0x5d
 800928c:	d0fa      	beq.n	8009284 <__sccl+0x44>
 800928e:	42b3      	cmp	r3, r6
 8009290:	dcf8      	bgt.n	8009284 <__sccl+0x44>
 8009292:	461a      	mov	r2, r3
 8009294:	3002      	adds	r0, #2
 8009296:	3201      	adds	r2, #1
 8009298:	4296      	cmp	r6, r2
 800929a:	54a1      	strb	r1, [r4, r2]
 800929c:	dcfb      	bgt.n	8009296 <__sccl+0x56>
 800929e:	1af2      	subs	r2, r6, r3
 80092a0:	3a01      	subs	r2, #1
 80092a2:	42b3      	cmp	r3, r6
 80092a4:	bfa8      	it	ge
 80092a6:	2200      	movge	r2, #0
 80092a8:	1c5d      	adds	r5, r3, #1
 80092aa:	18ab      	adds	r3, r5, r2
 80092ac:	e7e1      	b.n	8009272 <__sccl+0x32>
 80092ae:	4610      	mov	r0, r2
 80092b0:	e7da      	b.n	8009268 <__sccl+0x28>

080092b2 <__submore>:
 80092b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b6:	460c      	mov	r4, r1
 80092b8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80092ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092be:	4299      	cmp	r1, r3
 80092c0:	d11b      	bne.n	80092fa <__submore+0x48>
 80092c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80092c6:	f7fd fef5 	bl	80070b4 <_malloc_r>
 80092ca:	b918      	cbnz	r0, 80092d4 <__submore+0x22>
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80092da:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80092de:	6360      	str	r0, [r4, #52]	@ 0x34
 80092e0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80092e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80092e8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80092ec:	7043      	strb	r3, [r0, #1]
 80092ee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80092f2:	7003      	strb	r3, [r0, #0]
 80092f4:	6020      	str	r0, [r4, #0]
 80092f6:	2000      	movs	r0, #0
 80092f8:	e7ea      	b.n	80092d0 <__submore+0x1e>
 80092fa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80092fc:	0077      	lsls	r7, r6, #1
 80092fe:	463a      	mov	r2, r7
 8009300:	f000 fbcf 	bl	8009aa2 <_realloc_r>
 8009304:	4605      	mov	r5, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d0e0      	beq.n	80092cc <__submore+0x1a>
 800930a:	eb00 0806 	add.w	r8, r0, r6
 800930e:	4601      	mov	r1, r0
 8009310:	4632      	mov	r2, r6
 8009312:	4640      	mov	r0, r8
 8009314:	f7fc fff9 	bl	800630a <memcpy>
 8009318:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800931c:	f8c4 8000 	str.w	r8, [r4]
 8009320:	e7e9      	b.n	80092f6 <__submore+0x44>

08009322 <memmove>:
 8009322:	4288      	cmp	r0, r1
 8009324:	b510      	push	{r4, lr}
 8009326:	eb01 0402 	add.w	r4, r1, r2
 800932a:	d902      	bls.n	8009332 <memmove+0x10>
 800932c:	4284      	cmp	r4, r0
 800932e:	4623      	mov	r3, r4
 8009330:	d807      	bhi.n	8009342 <memmove+0x20>
 8009332:	1e43      	subs	r3, r0, #1
 8009334:	42a1      	cmp	r1, r4
 8009336:	d008      	beq.n	800934a <memmove+0x28>
 8009338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800933c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009340:	e7f8      	b.n	8009334 <memmove+0x12>
 8009342:	4601      	mov	r1, r0
 8009344:	4402      	add	r2, r0
 8009346:	428a      	cmp	r2, r1
 8009348:	d100      	bne.n	800934c <memmove+0x2a>
 800934a:	bd10      	pop	{r4, pc}
 800934c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009350:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009354:	e7f7      	b.n	8009346 <memmove+0x24>

08009356 <strncmp>:
 8009356:	b510      	push	{r4, lr}
 8009358:	b16a      	cbz	r2, 8009376 <strncmp+0x20>
 800935a:	3901      	subs	r1, #1
 800935c:	1884      	adds	r4, r0, r2
 800935e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009362:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009366:	429a      	cmp	r2, r3
 8009368:	d103      	bne.n	8009372 <strncmp+0x1c>
 800936a:	42a0      	cmp	r0, r4
 800936c:	d001      	beq.n	8009372 <strncmp+0x1c>
 800936e:	2a00      	cmp	r2, #0
 8009370:	d1f5      	bne.n	800935e <strncmp+0x8>
 8009372:	1ad0      	subs	r0, r2, r3
 8009374:	bd10      	pop	{r4, pc}
 8009376:	4610      	mov	r0, r2
 8009378:	e7fc      	b.n	8009374 <strncmp+0x1e>
	...

0800937c <_sbrk_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	2300      	movs	r3, #0
 8009380:	4d05      	ldr	r5, [pc, #20]	@ (8009398 <_sbrk_r+0x1c>)
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f8 ff10 	bl	80021ac <_sbrk>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_sbrk_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_sbrk_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000ba0 	.word	0x20000ba0

0800939c <nan>:
 800939c:	2000      	movs	r0, #0
 800939e:	4901      	ldr	r1, [pc, #4]	@ (80093a4 <nan+0x8>)
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	7ff80000 	.word	0x7ff80000

080093a8 <__assert_func>:
 80093a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093aa:	4614      	mov	r4, r2
 80093ac:	461a      	mov	r2, r3
 80093ae:	4b09      	ldr	r3, [pc, #36]	@ (80093d4 <__assert_func+0x2c>)
 80093b0:	4605      	mov	r5, r0
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68d8      	ldr	r0, [r3, #12]
 80093b6:	b954      	cbnz	r4, 80093ce <__assert_func+0x26>
 80093b8:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <__assert_func+0x30>)
 80093ba:	461c      	mov	r4, r3
 80093bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093c0:	9100      	str	r1, [sp, #0]
 80093c2:	462b      	mov	r3, r5
 80093c4:	4905      	ldr	r1, [pc, #20]	@ (80093dc <__assert_func+0x34>)
 80093c6:	f000 fc19 	bl	8009bfc <fiprintf>
 80093ca:	f000 fc29 	bl	8009c20 <abort>
 80093ce:	4b04      	ldr	r3, [pc, #16]	@ (80093e0 <__assert_func+0x38>)
 80093d0:	e7f4      	b.n	80093bc <__assert_func+0x14>
 80093d2:	bf00      	nop
 80093d4:	200000a8 	.word	0x200000a8
 80093d8:	0800a750 	.word	0x0800a750
 80093dc:	0800a722 	.word	0x0800a722
 80093e0:	0800a715 	.word	0x0800a715

080093e4 <_calloc_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	fba1 5402 	umull	r5, r4, r1, r2
 80093ea:	b93c      	cbnz	r4, 80093fc <_calloc_r+0x18>
 80093ec:	4629      	mov	r1, r5
 80093ee:	f7fd fe61 	bl	80070b4 <_malloc_r>
 80093f2:	4606      	mov	r6, r0
 80093f4:	b928      	cbnz	r0, 8009402 <_calloc_r+0x1e>
 80093f6:	2600      	movs	r6, #0
 80093f8:	4630      	mov	r0, r6
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	220c      	movs	r2, #12
 80093fe:	6002      	str	r2, [r0, #0]
 8009400:	e7f9      	b.n	80093f6 <_calloc_r+0x12>
 8009402:	462a      	mov	r2, r5
 8009404:	4621      	mov	r1, r4
 8009406:	f7fc fef2 	bl	80061ee <memset>
 800940a:	e7f5      	b.n	80093f8 <_calloc_r+0x14>

0800940c <rshift>:
 800940c:	6903      	ldr	r3, [r0, #16]
 800940e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009412:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009416:	f100 0414 	add.w	r4, r0, #20
 800941a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800941e:	dd46      	ble.n	80094ae <rshift+0xa2>
 8009420:	f011 011f 	ands.w	r1, r1, #31
 8009424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800942c:	d10c      	bne.n	8009448 <rshift+0x3c>
 800942e:	4629      	mov	r1, r5
 8009430:	f100 0710 	add.w	r7, r0, #16
 8009434:	42b1      	cmp	r1, r6
 8009436:	d335      	bcc.n	80094a4 <rshift+0x98>
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	1eea      	subs	r2, r5, #3
 800943e:	4296      	cmp	r6, r2
 8009440:	bf38      	it	cc
 8009442:	2300      	movcc	r3, #0
 8009444:	4423      	add	r3, r4
 8009446:	e015      	b.n	8009474 <rshift+0x68>
 8009448:	46a1      	mov	r9, r4
 800944a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800944e:	f1c1 0820 	rsb	r8, r1, #32
 8009452:	40cf      	lsrs	r7, r1
 8009454:	f105 0e04 	add.w	lr, r5, #4
 8009458:	4576      	cmp	r6, lr
 800945a:	46f4      	mov	ip, lr
 800945c:	d816      	bhi.n	800948c <rshift+0x80>
 800945e:	1a9a      	subs	r2, r3, r2
 8009460:	0092      	lsls	r2, r2, #2
 8009462:	3a04      	subs	r2, #4
 8009464:	3501      	adds	r5, #1
 8009466:	42ae      	cmp	r6, r5
 8009468:	bf38      	it	cc
 800946a:	2200      	movcc	r2, #0
 800946c:	18a3      	adds	r3, r4, r2
 800946e:	50a7      	str	r7, [r4, r2]
 8009470:	b107      	cbz	r7, 8009474 <rshift+0x68>
 8009472:	3304      	adds	r3, #4
 8009474:	42a3      	cmp	r3, r4
 8009476:	eba3 0204 	sub.w	r2, r3, r4
 800947a:	bf08      	it	eq
 800947c:	2300      	moveq	r3, #0
 800947e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009482:	6102      	str	r2, [r0, #16]
 8009484:	bf08      	it	eq
 8009486:	6143      	streq	r3, [r0, #20]
 8009488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800948c:	f8dc c000 	ldr.w	ip, [ip]
 8009490:	fa0c fc08 	lsl.w	ip, ip, r8
 8009494:	ea4c 0707 	orr.w	r7, ip, r7
 8009498:	f849 7b04 	str.w	r7, [r9], #4
 800949c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094a0:	40cf      	lsrs	r7, r1
 80094a2:	e7d9      	b.n	8009458 <rshift+0x4c>
 80094a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80094a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80094ac:	e7c2      	b.n	8009434 <rshift+0x28>
 80094ae:	4623      	mov	r3, r4
 80094b0:	e7e0      	b.n	8009474 <rshift+0x68>

080094b2 <__hexdig_fun>:
 80094b2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	d802      	bhi.n	80094c0 <__hexdig_fun+0xe>
 80094ba:	3820      	subs	r0, #32
 80094bc:	b2c0      	uxtb	r0, r0
 80094be:	4770      	bx	lr
 80094c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80094c4:	2b05      	cmp	r3, #5
 80094c6:	d801      	bhi.n	80094cc <__hexdig_fun+0x1a>
 80094c8:	3847      	subs	r0, #71	@ 0x47
 80094ca:	e7f7      	b.n	80094bc <__hexdig_fun+0xa>
 80094cc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80094d0:	2b05      	cmp	r3, #5
 80094d2:	d801      	bhi.n	80094d8 <__hexdig_fun+0x26>
 80094d4:	3827      	subs	r0, #39	@ 0x27
 80094d6:	e7f1      	b.n	80094bc <__hexdig_fun+0xa>
 80094d8:	2000      	movs	r0, #0
 80094da:	4770      	bx	lr

080094dc <__gethex>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	468a      	mov	sl, r1
 80094e2:	4690      	mov	r8, r2
 80094e4:	b085      	sub	sp, #20
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	680b      	ldr	r3, [r1, #0]
 80094ea:	9001      	str	r0, [sp, #4]
 80094ec:	1c9c      	adds	r4, r3, #2
 80094ee:	46a1      	mov	r9, r4
 80094f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094f4:	2830      	cmp	r0, #48	@ 0x30
 80094f6:	d0fa      	beq.n	80094ee <__gethex+0x12>
 80094f8:	eba9 0303 	sub.w	r3, r9, r3
 80094fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009500:	f7ff ffd7 	bl	80094b2 <__hexdig_fun>
 8009504:	4605      	mov	r5, r0
 8009506:	2800      	cmp	r0, #0
 8009508:	d168      	bne.n	80095dc <__gethex+0x100>
 800950a:	2201      	movs	r2, #1
 800950c:	4648      	mov	r0, r9
 800950e:	499f      	ldr	r1, [pc, #636]	@ (800978c <__gethex+0x2b0>)
 8009510:	f7ff ff21 	bl	8009356 <strncmp>
 8009514:	4607      	mov	r7, r0
 8009516:	2800      	cmp	r0, #0
 8009518:	d167      	bne.n	80095ea <__gethex+0x10e>
 800951a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800951e:	4626      	mov	r6, r4
 8009520:	f7ff ffc7 	bl	80094b2 <__hexdig_fun>
 8009524:	2800      	cmp	r0, #0
 8009526:	d062      	beq.n	80095ee <__gethex+0x112>
 8009528:	4623      	mov	r3, r4
 800952a:	7818      	ldrb	r0, [r3, #0]
 800952c:	4699      	mov	r9, r3
 800952e:	2830      	cmp	r0, #48	@ 0x30
 8009530:	f103 0301 	add.w	r3, r3, #1
 8009534:	d0f9      	beq.n	800952a <__gethex+0x4e>
 8009536:	f7ff ffbc 	bl	80094b2 <__hexdig_fun>
 800953a:	fab0 f580 	clz	r5, r0
 800953e:	f04f 0b01 	mov.w	fp, #1
 8009542:	096d      	lsrs	r5, r5, #5
 8009544:	464a      	mov	r2, r9
 8009546:	4616      	mov	r6, r2
 8009548:	7830      	ldrb	r0, [r6, #0]
 800954a:	3201      	adds	r2, #1
 800954c:	f7ff ffb1 	bl	80094b2 <__hexdig_fun>
 8009550:	2800      	cmp	r0, #0
 8009552:	d1f8      	bne.n	8009546 <__gethex+0x6a>
 8009554:	2201      	movs	r2, #1
 8009556:	4630      	mov	r0, r6
 8009558:	498c      	ldr	r1, [pc, #560]	@ (800978c <__gethex+0x2b0>)
 800955a:	f7ff fefc 	bl	8009356 <strncmp>
 800955e:	2800      	cmp	r0, #0
 8009560:	d13f      	bne.n	80095e2 <__gethex+0x106>
 8009562:	b944      	cbnz	r4, 8009576 <__gethex+0x9a>
 8009564:	1c74      	adds	r4, r6, #1
 8009566:	4622      	mov	r2, r4
 8009568:	4616      	mov	r6, r2
 800956a:	7830      	ldrb	r0, [r6, #0]
 800956c:	3201      	adds	r2, #1
 800956e:	f7ff ffa0 	bl	80094b2 <__hexdig_fun>
 8009572:	2800      	cmp	r0, #0
 8009574:	d1f8      	bne.n	8009568 <__gethex+0x8c>
 8009576:	1ba4      	subs	r4, r4, r6
 8009578:	00a7      	lsls	r7, r4, #2
 800957a:	7833      	ldrb	r3, [r6, #0]
 800957c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009580:	2b50      	cmp	r3, #80	@ 0x50
 8009582:	d13e      	bne.n	8009602 <__gethex+0x126>
 8009584:	7873      	ldrb	r3, [r6, #1]
 8009586:	2b2b      	cmp	r3, #43	@ 0x2b
 8009588:	d033      	beq.n	80095f2 <__gethex+0x116>
 800958a:	2b2d      	cmp	r3, #45	@ 0x2d
 800958c:	d034      	beq.n	80095f8 <__gethex+0x11c>
 800958e:	2400      	movs	r4, #0
 8009590:	1c71      	adds	r1, r6, #1
 8009592:	7808      	ldrb	r0, [r1, #0]
 8009594:	f7ff ff8d 	bl	80094b2 <__hexdig_fun>
 8009598:	1e43      	subs	r3, r0, #1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b18      	cmp	r3, #24
 800959e:	d830      	bhi.n	8009602 <__gethex+0x126>
 80095a0:	f1a0 0210 	sub.w	r2, r0, #16
 80095a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095a8:	f7ff ff83 	bl	80094b2 <__hexdig_fun>
 80095ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80095b0:	fa5f fc8c 	uxtb.w	ip, ip
 80095b4:	f1bc 0f18 	cmp.w	ip, #24
 80095b8:	f04f 030a 	mov.w	r3, #10
 80095bc:	d91e      	bls.n	80095fc <__gethex+0x120>
 80095be:	b104      	cbz	r4, 80095c2 <__gethex+0xe6>
 80095c0:	4252      	negs	r2, r2
 80095c2:	4417      	add	r7, r2
 80095c4:	f8ca 1000 	str.w	r1, [sl]
 80095c8:	b1ed      	cbz	r5, 8009606 <__gethex+0x12a>
 80095ca:	f1bb 0f00 	cmp.w	fp, #0
 80095ce:	bf0c      	ite	eq
 80095d0:	2506      	moveq	r5, #6
 80095d2:	2500      	movne	r5, #0
 80095d4:	4628      	mov	r0, r5
 80095d6:	b005      	add	sp, #20
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	2500      	movs	r5, #0
 80095de:	462c      	mov	r4, r5
 80095e0:	e7b0      	b.n	8009544 <__gethex+0x68>
 80095e2:	2c00      	cmp	r4, #0
 80095e4:	d1c7      	bne.n	8009576 <__gethex+0x9a>
 80095e6:	4627      	mov	r7, r4
 80095e8:	e7c7      	b.n	800957a <__gethex+0x9e>
 80095ea:	464e      	mov	r6, r9
 80095ec:	462f      	mov	r7, r5
 80095ee:	2501      	movs	r5, #1
 80095f0:	e7c3      	b.n	800957a <__gethex+0x9e>
 80095f2:	2400      	movs	r4, #0
 80095f4:	1cb1      	adds	r1, r6, #2
 80095f6:	e7cc      	b.n	8009592 <__gethex+0xb6>
 80095f8:	2401      	movs	r4, #1
 80095fa:	e7fb      	b.n	80095f4 <__gethex+0x118>
 80095fc:	fb03 0002 	mla	r0, r3, r2, r0
 8009600:	e7ce      	b.n	80095a0 <__gethex+0xc4>
 8009602:	4631      	mov	r1, r6
 8009604:	e7de      	b.n	80095c4 <__gethex+0xe8>
 8009606:	4629      	mov	r1, r5
 8009608:	eba6 0309 	sub.w	r3, r6, r9
 800960c:	3b01      	subs	r3, #1
 800960e:	2b07      	cmp	r3, #7
 8009610:	dc0a      	bgt.n	8009628 <__gethex+0x14c>
 8009612:	9801      	ldr	r0, [sp, #4]
 8009614:	f7fd fdda 	bl	80071cc <_Balloc>
 8009618:	4604      	mov	r4, r0
 800961a:	b940      	cbnz	r0, 800962e <__gethex+0x152>
 800961c:	4602      	mov	r2, r0
 800961e:	21e4      	movs	r1, #228	@ 0xe4
 8009620:	4b5b      	ldr	r3, [pc, #364]	@ (8009790 <__gethex+0x2b4>)
 8009622:	485c      	ldr	r0, [pc, #368]	@ (8009794 <__gethex+0x2b8>)
 8009624:	f7ff fec0 	bl	80093a8 <__assert_func>
 8009628:	3101      	adds	r1, #1
 800962a:	105b      	asrs	r3, r3, #1
 800962c:	e7ef      	b.n	800960e <__gethex+0x132>
 800962e:	2300      	movs	r3, #0
 8009630:	f100 0a14 	add.w	sl, r0, #20
 8009634:	4655      	mov	r5, sl
 8009636:	469b      	mov	fp, r3
 8009638:	45b1      	cmp	r9, r6
 800963a:	d337      	bcc.n	80096ac <__gethex+0x1d0>
 800963c:	f845 bb04 	str.w	fp, [r5], #4
 8009640:	eba5 050a 	sub.w	r5, r5, sl
 8009644:	10ad      	asrs	r5, r5, #2
 8009646:	6125      	str	r5, [r4, #16]
 8009648:	4658      	mov	r0, fp
 800964a:	f7fd feb1 	bl	80073b0 <__hi0bits>
 800964e:	016d      	lsls	r5, r5, #5
 8009650:	f8d8 6000 	ldr.w	r6, [r8]
 8009654:	1a2d      	subs	r5, r5, r0
 8009656:	42b5      	cmp	r5, r6
 8009658:	dd54      	ble.n	8009704 <__gethex+0x228>
 800965a:	1bad      	subs	r5, r5, r6
 800965c:	4629      	mov	r1, r5
 800965e:	4620      	mov	r0, r4
 8009660:	f7fe fa39 	bl	8007ad6 <__any_on>
 8009664:	4681      	mov	r9, r0
 8009666:	b178      	cbz	r0, 8009688 <__gethex+0x1ac>
 8009668:	f04f 0901 	mov.w	r9, #1
 800966c:	1e6b      	subs	r3, r5, #1
 800966e:	1159      	asrs	r1, r3, #5
 8009670:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009674:	f003 021f 	and.w	r2, r3, #31
 8009678:	fa09 f202 	lsl.w	r2, r9, r2
 800967c:	420a      	tst	r2, r1
 800967e:	d003      	beq.n	8009688 <__gethex+0x1ac>
 8009680:	454b      	cmp	r3, r9
 8009682:	dc36      	bgt.n	80096f2 <__gethex+0x216>
 8009684:	f04f 0902 	mov.w	r9, #2
 8009688:	4629      	mov	r1, r5
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff febe 	bl	800940c <rshift>
 8009690:	442f      	add	r7, r5
 8009692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009696:	42bb      	cmp	r3, r7
 8009698:	da42      	bge.n	8009720 <__gethex+0x244>
 800969a:	4621      	mov	r1, r4
 800969c:	9801      	ldr	r0, [sp, #4]
 800969e:	f7fd fdd5 	bl	800724c <_Bfree>
 80096a2:	2300      	movs	r3, #0
 80096a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096a6:	25a3      	movs	r5, #163	@ 0xa3
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	e793      	b.n	80095d4 <__gethex+0xf8>
 80096ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80096b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80096b2:	d012      	beq.n	80096da <__gethex+0x1fe>
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d104      	bne.n	80096c2 <__gethex+0x1e6>
 80096b8:	f845 bb04 	str.w	fp, [r5], #4
 80096bc:	f04f 0b00 	mov.w	fp, #0
 80096c0:	465b      	mov	r3, fp
 80096c2:	7830      	ldrb	r0, [r6, #0]
 80096c4:	9303      	str	r3, [sp, #12]
 80096c6:	f7ff fef4 	bl	80094b2 <__hexdig_fun>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	f000 000f 	and.w	r0, r0, #15
 80096d0:	4098      	lsls	r0, r3
 80096d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80096d6:	3304      	adds	r3, #4
 80096d8:	e7ae      	b.n	8009638 <__gethex+0x15c>
 80096da:	45b1      	cmp	r9, r6
 80096dc:	d8ea      	bhi.n	80096b4 <__gethex+0x1d8>
 80096de:	2201      	movs	r2, #1
 80096e0:	4630      	mov	r0, r6
 80096e2:	492a      	ldr	r1, [pc, #168]	@ (800978c <__gethex+0x2b0>)
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	f7ff fe36 	bl	8009356 <strncmp>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1e1      	bne.n	80096b4 <__gethex+0x1d8>
 80096f0:	e7a2      	b.n	8009638 <__gethex+0x15c>
 80096f2:	4620      	mov	r0, r4
 80096f4:	1ea9      	subs	r1, r5, #2
 80096f6:	f7fe f9ee 	bl	8007ad6 <__any_on>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0c2      	beq.n	8009684 <__gethex+0x1a8>
 80096fe:	f04f 0903 	mov.w	r9, #3
 8009702:	e7c1      	b.n	8009688 <__gethex+0x1ac>
 8009704:	da09      	bge.n	800971a <__gethex+0x23e>
 8009706:	1b75      	subs	r5, r6, r5
 8009708:	4621      	mov	r1, r4
 800970a:	462a      	mov	r2, r5
 800970c:	9801      	ldr	r0, [sp, #4]
 800970e:	f7fd ffb3 	bl	8007678 <__lshift>
 8009712:	4604      	mov	r4, r0
 8009714:	1b7f      	subs	r7, r7, r5
 8009716:	f100 0a14 	add.w	sl, r0, #20
 800971a:	f04f 0900 	mov.w	r9, #0
 800971e:	e7b8      	b.n	8009692 <__gethex+0x1b6>
 8009720:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009724:	42bd      	cmp	r5, r7
 8009726:	dd6f      	ble.n	8009808 <__gethex+0x32c>
 8009728:	1bed      	subs	r5, r5, r7
 800972a:	42ae      	cmp	r6, r5
 800972c:	dc34      	bgt.n	8009798 <__gethex+0x2bc>
 800972e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009732:	2b02      	cmp	r3, #2
 8009734:	d022      	beq.n	800977c <__gethex+0x2a0>
 8009736:	2b03      	cmp	r3, #3
 8009738:	d024      	beq.n	8009784 <__gethex+0x2a8>
 800973a:	2b01      	cmp	r3, #1
 800973c:	d115      	bne.n	800976a <__gethex+0x28e>
 800973e:	42ae      	cmp	r6, r5
 8009740:	d113      	bne.n	800976a <__gethex+0x28e>
 8009742:	2e01      	cmp	r6, #1
 8009744:	d10b      	bne.n	800975e <__gethex+0x282>
 8009746:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800974a:	9a02      	ldr	r2, [sp, #8]
 800974c:	2562      	movs	r5, #98	@ 0x62
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	2301      	movs	r3, #1
 8009752:	6123      	str	r3, [r4, #16]
 8009754:	f8ca 3000 	str.w	r3, [sl]
 8009758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975a:	601c      	str	r4, [r3, #0]
 800975c:	e73a      	b.n	80095d4 <__gethex+0xf8>
 800975e:	4620      	mov	r0, r4
 8009760:	1e71      	subs	r1, r6, #1
 8009762:	f7fe f9b8 	bl	8007ad6 <__any_on>
 8009766:	2800      	cmp	r0, #0
 8009768:	d1ed      	bne.n	8009746 <__gethex+0x26a>
 800976a:	4621      	mov	r1, r4
 800976c:	9801      	ldr	r0, [sp, #4]
 800976e:	f7fd fd6d 	bl	800724c <_Bfree>
 8009772:	2300      	movs	r3, #0
 8009774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009776:	2550      	movs	r5, #80	@ 0x50
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	e72b      	b.n	80095d4 <__gethex+0xf8>
 800977c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f3      	bne.n	800976a <__gethex+0x28e>
 8009782:	e7e0      	b.n	8009746 <__gethex+0x26a>
 8009784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1dd      	bne.n	8009746 <__gethex+0x26a>
 800978a:	e7ee      	b.n	800976a <__gethex+0x28e>
 800978c:	0800a588 	.word	0x0800a588
 8009790:	0800a421 	.word	0x0800a421
 8009794:	0800a751 	.word	0x0800a751
 8009798:	1e6f      	subs	r7, r5, #1
 800979a:	f1b9 0f00 	cmp.w	r9, #0
 800979e:	d130      	bne.n	8009802 <__gethex+0x326>
 80097a0:	b127      	cbz	r7, 80097ac <__gethex+0x2d0>
 80097a2:	4639      	mov	r1, r7
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7fe f996 	bl	8007ad6 <__any_on>
 80097aa:	4681      	mov	r9, r0
 80097ac:	2301      	movs	r3, #1
 80097ae:	4629      	mov	r1, r5
 80097b0:	1b76      	subs	r6, r6, r5
 80097b2:	2502      	movs	r5, #2
 80097b4:	117a      	asrs	r2, r7, #5
 80097b6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80097ba:	f007 071f 	and.w	r7, r7, #31
 80097be:	40bb      	lsls	r3, r7
 80097c0:	4213      	tst	r3, r2
 80097c2:	4620      	mov	r0, r4
 80097c4:	bf18      	it	ne
 80097c6:	f049 0902 	orrne.w	r9, r9, #2
 80097ca:	f7ff fe1f 	bl	800940c <rshift>
 80097ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80097d2:	f1b9 0f00 	cmp.w	r9, #0
 80097d6:	d047      	beq.n	8009868 <__gethex+0x38c>
 80097d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d015      	beq.n	800980c <__gethex+0x330>
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d017      	beq.n	8009814 <__gethex+0x338>
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d109      	bne.n	80097fc <__gethex+0x320>
 80097e8:	f019 0f02 	tst.w	r9, #2
 80097ec:	d006      	beq.n	80097fc <__gethex+0x320>
 80097ee:	f8da 3000 	ldr.w	r3, [sl]
 80097f2:	ea49 0903 	orr.w	r9, r9, r3
 80097f6:	f019 0f01 	tst.w	r9, #1
 80097fa:	d10e      	bne.n	800981a <__gethex+0x33e>
 80097fc:	f045 0510 	orr.w	r5, r5, #16
 8009800:	e032      	b.n	8009868 <__gethex+0x38c>
 8009802:	f04f 0901 	mov.w	r9, #1
 8009806:	e7d1      	b.n	80097ac <__gethex+0x2d0>
 8009808:	2501      	movs	r5, #1
 800980a:	e7e2      	b.n	80097d2 <__gethex+0x2f6>
 800980c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800980e:	f1c3 0301 	rsb	r3, r3, #1
 8009812:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0f0      	beq.n	80097fc <__gethex+0x320>
 800981a:	f04f 0c00 	mov.w	ip, #0
 800981e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009822:	f104 0314 	add.w	r3, r4, #20
 8009826:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800982a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800982e:	4618      	mov	r0, r3
 8009830:	f853 2b04 	ldr.w	r2, [r3], #4
 8009834:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009838:	d01b      	beq.n	8009872 <__gethex+0x396>
 800983a:	3201      	adds	r2, #1
 800983c:	6002      	str	r2, [r0, #0]
 800983e:	2d02      	cmp	r5, #2
 8009840:	f104 0314 	add.w	r3, r4, #20
 8009844:	d13c      	bne.n	80098c0 <__gethex+0x3e4>
 8009846:	f8d8 2000 	ldr.w	r2, [r8]
 800984a:	3a01      	subs	r2, #1
 800984c:	42b2      	cmp	r2, r6
 800984e:	d109      	bne.n	8009864 <__gethex+0x388>
 8009850:	2201      	movs	r2, #1
 8009852:	1171      	asrs	r1, r6, #5
 8009854:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009858:	f006 061f 	and.w	r6, r6, #31
 800985c:	fa02 f606 	lsl.w	r6, r2, r6
 8009860:	421e      	tst	r6, r3
 8009862:	d13a      	bne.n	80098da <__gethex+0x3fe>
 8009864:	f045 0520 	orr.w	r5, r5, #32
 8009868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800986a:	601c      	str	r4, [r3, #0]
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	601f      	str	r7, [r3, #0]
 8009870:	e6b0      	b.n	80095d4 <__gethex+0xf8>
 8009872:	4299      	cmp	r1, r3
 8009874:	f843 cc04 	str.w	ip, [r3, #-4]
 8009878:	d8d9      	bhi.n	800982e <__gethex+0x352>
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	459b      	cmp	fp, r3
 800987e:	db17      	blt.n	80098b0 <__gethex+0x3d4>
 8009880:	6861      	ldr	r1, [r4, #4]
 8009882:	9801      	ldr	r0, [sp, #4]
 8009884:	3101      	adds	r1, #1
 8009886:	f7fd fca1 	bl	80071cc <_Balloc>
 800988a:	4681      	mov	r9, r0
 800988c:	b918      	cbnz	r0, 8009896 <__gethex+0x3ba>
 800988e:	4602      	mov	r2, r0
 8009890:	2184      	movs	r1, #132	@ 0x84
 8009892:	4b19      	ldr	r3, [pc, #100]	@ (80098f8 <__gethex+0x41c>)
 8009894:	e6c5      	b.n	8009622 <__gethex+0x146>
 8009896:	6922      	ldr	r2, [r4, #16]
 8009898:	f104 010c 	add.w	r1, r4, #12
 800989c:	3202      	adds	r2, #2
 800989e:	0092      	lsls	r2, r2, #2
 80098a0:	300c      	adds	r0, #12
 80098a2:	f7fc fd32 	bl	800630a <memcpy>
 80098a6:	4621      	mov	r1, r4
 80098a8:	9801      	ldr	r0, [sp, #4]
 80098aa:	f7fd fccf 	bl	800724c <_Bfree>
 80098ae:	464c      	mov	r4, r9
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	6122      	str	r2, [r4, #16]
 80098b6:	2201      	movs	r2, #1
 80098b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098bc:	615a      	str	r2, [r3, #20]
 80098be:	e7be      	b.n	800983e <__gethex+0x362>
 80098c0:	6922      	ldr	r2, [r4, #16]
 80098c2:	455a      	cmp	r2, fp
 80098c4:	dd0b      	ble.n	80098de <__gethex+0x402>
 80098c6:	2101      	movs	r1, #1
 80098c8:	4620      	mov	r0, r4
 80098ca:	f7ff fd9f 	bl	800940c <rshift>
 80098ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098d2:	3701      	adds	r7, #1
 80098d4:	42bb      	cmp	r3, r7
 80098d6:	f6ff aee0 	blt.w	800969a <__gethex+0x1be>
 80098da:	2501      	movs	r5, #1
 80098dc:	e7c2      	b.n	8009864 <__gethex+0x388>
 80098de:	f016 061f 	ands.w	r6, r6, #31
 80098e2:	d0fa      	beq.n	80098da <__gethex+0x3fe>
 80098e4:	4453      	add	r3, sl
 80098e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098ea:	f7fd fd61 	bl	80073b0 <__hi0bits>
 80098ee:	f1c6 0620 	rsb	r6, r6, #32
 80098f2:	42b0      	cmp	r0, r6
 80098f4:	dbe7      	blt.n	80098c6 <__gethex+0x3ea>
 80098f6:	e7f0      	b.n	80098da <__gethex+0x3fe>
 80098f8:	0800a421 	.word	0x0800a421

080098fc <L_shift>:
 80098fc:	f1c2 0208 	rsb	r2, r2, #8
 8009900:	0092      	lsls	r2, r2, #2
 8009902:	b570      	push	{r4, r5, r6, lr}
 8009904:	f1c2 0620 	rsb	r6, r2, #32
 8009908:	6843      	ldr	r3, [r0, #4]
 800990a:	6804      	ldr	r4, [r0, #0]
 800990c:	fa03 f506 	lsl.w	r5, r3, r6
 8009910:	432c      	orrs	r4, r5
 8009912:	40d3      	lsrs	r3, r2
 8009914:	6004      	str	r4, [r0, #0]
 8009916:	f840 3f04 	str.w	r3, [r0, #4]!
 800991a:	4288      	cmp	r0, r1
 800991c:	d3f4      	bcc.n	8009908 <L_shift+0xc>
 800991e:	bd70      	pop	{r4, r5, r6, pc}

08009920 <__match>:
 8009920:	b530      	push	{r4, r5, lr}
 8009922:	6803      	ldr	r3, [r0, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800992a:	b914      	cbnz	r4, 8009932 <__match+0x12>
 800992c:	6003      	str	r3, [r0, #0]
 800992e:	2001      	movs	r0, #1
 8009930:	bd30      	pop	{r4, r5, pc}
 8009932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009936:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800993a:	2d19      	cmp	r5, #25
 800993c:	bf98      	it	ls
 800993e:	3220      	addls	r2, #32
 8009940:	42a2      	cmp	r2, r4
 8009942:	d0f0      	beq.n	8009926 <__match+0x6>
 8009944:	2000      	movs	r0, #0
 8009946:	e7f3      	b.n	8009930 <__match+0x10>

08009948 <__hexnan>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	2500      	movs	r5, #0
 800994e:	680b      	ldr	r3, [r1, #0]
 8009950:	4682      	mov	sl, r0
 8009952:	115e      	asrs	r6, r3, #5
 8009954:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009958:	f013 031f 	ands.w	r3, r3, #31
 800995c:	bf18      	it	ne
 800995e:	3604      	addne	r6, #4
 8009960:	1f37      	subs	r7, r6, #4
 8009962:	4690      	mov	r8, r2
 8009964:	46b9      	mov	r9, r7
 8009966:	463c      	mov	r4, r7
 8009968:	46ab      	mov	fp, r5
 800996a:	b087      	sub	sp, #28
 800996c:	6801      	ldr	r1, [r0, #0]
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	f846 5c04 	str.w	r5, [r6, #-4]
 8009974:	9502      	str	r5, [sp, #8]
 8009976:	784a      	ldrb	r2, [r1, #1]
 8009978:	1c4b      	adds	r3, r1, #1
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	b342      	cbz	r2, 80099d0 <__hexnan+0x88>
 800997e:	4610      	mov	r0, r2
 8009980:	9105      	str	r1, [sp, #20]
 8009982:	9204      	str	r2, [sp, #16]
 8009984:	f7ff fd95 	bl	80094b2 <__hexdig_fun>
 8009988:	2800      	cmp	r0, #0
 800998a:	d151      	bne.n	8009a30 <__hexnan+0xe8>
 800998c:	9a04      	ldr	r2, [sp, #16]
 800998e:	9905      	ldr	r1, [sp, #20]
 8009990:	2a20      	cmp	r2, #32
 8009992:	d818      	bhi.n	80099c6 <__hexnan+0x7e>
 8009994:	9b02      	ldr	r3, [sp, #8]
 8009996:	459b      	cmp	fp, r3
 8009998:	dd13      	ble.n	80099c2 <__hexnan+0x7a>
 800999a:	454c      	cmp	r4, r9
 800999c:	d206      	bcs.n	80099ac <__hexnan+0x64>
 800999e:	2d07      	cmp	r5, #7
 80099a0:	dc04      	bgt.n	80099ac <__hexnan+0x64>
 80099a2:	462a      	mov	r2, r5
 80099a4:	4649      	mov	r1, r9
 80099a6:	4620      	mov	r0, r4
 80099a8:	f7ff ffa8 	bl	80098fc <L_shift>
 80099ac:	4544      	cmp	r4, r8
 80099ae:	d952      	bls.n	8009a56 <__hexnan+0x10e>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f1a4 0904 	sub.w	r9, r4, #4
 80099b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099ba:	461d      	mov	r5, r3
 80099bc:	464c      	mov	r4, r9
 80099be:	f8cd b008 	str.w	fp, [sp, #8]
 80099c2:	9903      	ldr	r1, [sp, #12]
 80099c4:	e7d7      	b.n	8009976 <__hexnan+0x2e>
 80099c6:	2a29      	cmp	r2, #41	@ 0x29
 80099c8:	d157      	bne.n	8009a7a <__hexnan+0x132>
 80099ca:	3102      	adds	r1, #2
 80099cc:	f8ca 1000 	str.w	r1, [sl]
 80099d0:	f1bb 0f00 	cmp.w	fp, #0
 80099d4:	d051      	beq.n	8009a7a <__hexnan+0x132>
 80099d6:	454c      	cmp	r4, r9
 80099d8:	d206      	bcs.n	80099e8 <__hexnan+0xa0>
 80099da:	2d07      	cmp	r5, #7
 80099dc:	dc04      	bgt.n	80099e8 <__hexnan+0xa0>
 80099de:	462a      	mov	r2, r5
 80099e0:	4649      	mov	r1, r9
 80099e2:	4620      	mov	r0, r4
 80099e4:	f7ff ff8a 	bl	80098fc <L_shift>
 80099e8:	4544      	cmp	r4, r8
 80099ea:	d936      	bls.n	8009a5a <__hexnan+0x112>
 80099ec:	4623      	mov	r3, r4
 80099ee:	f1a8 0204 	sub.w	r2, r8, #4
 80099f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80099f6:	429f      	cmp	r7, r3
 80099f8:	f842 1f04 	str.w	r1, [r2, #4]!
 80099fc:	d2f9      	bcs.n	80099f2 <__hexnan+0xaa>
 80099fe:	1b3b      	subs	r3, r7, r4
 8009a00:	f023 0303 	bic.w	r3, r3, #3
 8009a04:	3304      	adds	r3, #4
 8009a06:	3401      	adds	r4, #1
 8009a08:	3e03      	subs	r6, #3
 8009a0a:	42b4      	cmp	r4, r6
 8009a0c:	bf88      	it	hi
 8009a0e:	2304      	movhi	r3, #4
 8009a10:	2200      	movs	r2, #0
 8009a12:	4443      	add	r3, r8
 8009a14:	f843 2b04 	str.w	r2, [r3], #4
 8009a18:	429f      	cmp	r7, r3
 8009a1a:	d2fb      	bcs.n	8009a14 <__hexnan+0xcc>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	b91b      	cbnz	r3, 8009a28 <__hexnan+0xe0>
 8009a20:	4547      	cmp	r7, r8
 8009a22:	d128      	bne.n	8009a76 <__hexnan+0x12e>
 8009a24:	2301      	movs	r3, #1
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	2005      	movs	r0, #5
 8009a2a:	b007      	add	sp, #28
 8009a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a30:	3501      	adds	r5, #1
 8009a32:	2d08      	cmp	r5, #8
 8009a34:	f10b 0b01 	add.w	fp, fp, #1
 8009a38:	dd06      	ble.n	8009a48 <__hexnan+0x100>
 8009a3a:	4544      	cmp	r4, r8
 8009a3c:	d9c1      	bls.n	80099c2 <__hexnan+0x7a>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2501      	movs	r5, #1
 8009a42:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a46:	3c04      	subs	r4, #4
 8009a48:	6822      	ldr	r2, [r4, #0]
 8009a4a:	f000 000f 	and.w	r0, r0, #15
 8009a4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a52:	6020      	str	r0, [r4, #0]
 8009a54:	e7b5      	b.n	80099c2 <__hexnan+0x7a>
 8009a56:	2508      	movs	r5, #8
 8009a58:	e7b3      	b.n	80099c2 <__hexnan+0x7a>
 8009a5a:	9b01      	ldr	r3, [sp, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0dd      	beq.n	8009a1c <__hexnan+0xd4>
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	f1c3 0320 	rsb	r3, r3, #32
 8009a68:	40da      	lsrs	r2, r3
 8009a6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a74:	e7d2      	b.n	8009a1c <__hexnan+0xd4>
 8009a76:	3f04      	subs	r7, #4
 8009a78:	e7d0      	b.n	8009a1c <__hexnan+0xd4>
 8009a7a:	2004      	movs	r0, #4
 8009a7c:	e7d5      	b.n	8009a2a <__hexnan+0xe2>

08009a7e <__ascii_mbtowc>:
 8009a7e:	b082      	sub	sp, #8
 8009a80:	b901      	cbnz	r1, 8009a84 <__ascii_mbtowc+0x6>
 8009a82:	a901      	add	r1, sp, #4
 8009a84:	b142      	cbz	r2, 8009a98 <__ascii_mbtowc+0x1a>
 8009a86:	b14b      	cbz	r3, 8009a9c <__ascii_mbtowc+0x1e>
 8009a88:	7813      	ldrb	r3, [r2, #0]
 8009a8a:	600b      	str	r3, [r1, #0]
 8009a8c:	7812      	ldrb	r2, [r2, #0]
 8009a8e:	1e10      	subs	r0, r2, #0
 8009a90:	bf18      	it	ne
 8009a92:	2001      	movne	r0, #1
 8009a94:	b002      	add	sp, #8
 8009a96:	4770      	bx	lr
 8009a98:	4610      	mov	r0, r2
 8009a9a:	e7fb      	b.n	8009a94 <__ascii_mbtowc+0x16>
 8009a9c:	f06f 0001 	mvn.w	r0, #1
 8009aa0:	e7f8      	b.n	8009a94 <__ascii_mbtowc+0x16>

08009aa2 <_realloc_r>:
 8009aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	4615      	mov	r5, r2
 8009aaa:	460c      	mov	r4, r1
 8009aac:	b921      	cbnz	r1, 8009ab8 <_realloc_r+0x16>
 8009aae:	4611      	mov	r1, r2
 8009ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab4:	f7fd bafe 	b.w	80070b4 <_malloc_r>
 8009ab8:	b92a      	cbnz	r2, 8009ac6 <_realloc_r+0x24>
 8009aba:	f7fd fa89 	bl	8006fd0 <_free_r>
 8009abe:	2400      	movs	r4, #0
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac6:	f000 f8b2 	bl	8009c2e <_malloc_usable_size_r>
 8009aca:	4285      	cmp	r5, r0
 8009acc:	4606      	mov	r6, r0
 8009ace:	d802      	bhi.n	8009ad6 <_realloc_r+0x34>
 8009ad0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ad4:	d8f4      	bhi.n	8009ac0 <_realloc_r+0x1e>
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4640      	mov	r0, r8
 8009ada:	f7fd faeb 	bl	80070b4 <_malloc_r>
 8009ade:	4607      	mov	r7, r0
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d0ec      	beq.n	8009abe <_realloc_r+0x1c>
 8009ae4:	42b5      	cmp	r5, r6
 8009ae6:	462a      	mov	r2, r5
 8009ae8:	4621      	mov	r1, r4
 8009aea:	bf28      	it	cs
 8009aec:	4632      	movcs	r2, r6
 8009aee:	f7fc fc0c 	bl	800630a <memcpy>
 8009af2:	4621      	mov	r1, r4
 8009af4:	4640      	mov	r0, r8
 8009af6:	f7fd fa6b 	bl	8006fd0 <_free_r>
 8009afa:	463c      	mov	r4, r7
 8009afc:	e7e0      	b.n	8009ac0 <_realloc_r+0x1e>
	...

08009b00 <_strtoul_l.constprop.0>:
 8009b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b04:	4686      	mov	lr, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	4e33      	ldr	r6, [pc, #204]	@ (8009bd8 <_strtoul_l.constprop.0+0xd8>)
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b10:	5d37      	ldrb	r7, [r6, r4]
 8009b12:	f017 0708 	ands.w	r7, r7, #8
 8009b16:	d1f8      	bne.n	8009b0a <_strtoul_l.constprop.0+0xa>
 8009b18:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b1a:	d12f      	bne.n	8009b7c <_strtoul_l.constprop.0+0x7c>
 8009b1c:	2701      	movs	r7, #1
 8009b1e:	782c      	ldrb	r4, [r5, #0]
 8009b20:	1c85      	adds	r5, r0, #2
 8009b22:	f033 0010 	bics.w	r0, r3, #16
 8009b26:	d109      	bne.n	8009b3c <_strtoul_l.constprop.0+0x3c>
 8009b28:	2c30      	cmp	r4, #48	@ 0x30
 8009b2a:	d12c      	bne.n	8009b86 <_strtoul_l.constprop.0+0x86>
 8009b2c:	7828      	ldrb	r0, [r5, #0]
 8009b2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009b32:	2858      	cmp	r0, #88	@ 0x58
 8009b34:	d127      	bne.n	8009b86 <_strtoul_l.constprop.0+0x86>
 8009b36:	2310      	movs	r3, #16
 8009b38:	786c      	ldrb	r4, [r5, #1]
 8009b3a:	3502      	adds	r5, #2
 8009b3c:	f04f 38ff 	mov.w	r8, #4294967295
 8009b40:	fbb8 f8f3 	udiv	r8, r8, r3
 8009b44:	2600      	movs	r6, #0
 8009b46:	fb03 f908 	mul.w	r9, r3, r8
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	ea6f 0909 	mvn.w	r9, r9
 8009b50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009b54:	f1bc 0f09 	cmp.w	ip, #9
 8009b58:	d81c      	bhi.n	8009b94 <_strtoul_l.constprop.0+0x94>
 8009b5a:	4664      	mov	r4, ip
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	dd2a      	ble.n	8009bb6 <_strtoul_l.constprop.0+0xb6>
 8009b60:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009b64:	d007      	beq.n	8009b76 <_strtoul_l.constprop.0+0x76>
 8009b66:	4580      	cmp	r8, r0
 8009b68:	d322      	bcc.n	8009bb0 <_strtoul_l.constprop.0+0xb0>
 8009b6a:	d101      	bne.n	8009b70 <_strtoul_l.constprop.0+0x70>
 8009b6c:	45a1      	cmp	r9, r4
 8009b6e:	db1f      	blt.n	8009bb0 <_strtoul_l.constprop.0+0xb0>
 8009b70:	2601      	movs	r6, #1
 8009b72:	fb00 4003 	mla	r0, r0, r3, r4
 8009b76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b7a:	e7e9      	b.n	8009b50 <_strtoul_l.constprop.0+0x50>
 8009b7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b7e:	bf04      	itt	eq
 8009b80:	782c      	ldrbeq	r4, [r5, #0]
 8009b82:	1c85      	addeq	r5, r0, #2
 8009b84:	e7cd      	b.n	8009b22 <_strtoul_l.constprop.0+0x22>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1d8      	bne.n	8009b3c <_strtoul_l.constprop.0+0x3c>
 8009b8a:	2c30      	cmp	r4, #48	@ 0x30
 8009b8c:	bf0c      	ite	eq
 8009b8e:	2308      	moveq	r3, #8
 8009b90:	230a      	movne	r3, #10
 8009b92:	e7d3      	b.n	8009b3c <_strtoul_l.constprop.0+0x3c>
 8009b94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009b98:	f1bc 0f19 	cmp.w	ip, #25
 8009b9c:	d801      	bhi.n	8009ba2 <_strtoul_l.constprop.0+0xa2>
 8009b9e:	3c37      	subs	r4, #55	@ 0x37
 8009ba0:	e7dc      	b.n	8009b5c <_strtoul_l.constprop.0+0x5c>
 8009ba2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009ba6:	f1bc 0f19 	cmp.w	ip, #25
 8009baa:	d804      	bhi.n	8009bb6 <_strtoul_l.constprop.0+0xb6>
 8009bac:	3c57      	subs	r4, #87	@ 0x57
 8009bae:	e7d5      	b.n	8009b5c <_strtoul_l.constprop.0+0x5c>
 8009bb0:	f04f 36ff 	mov.w	r6, #4294967295
 8009bb4:	e7df      	b.n	8009b76 <_strtoul_l.constprop.0+0x76>
 8009bb6:	1c73      	adds	r3, r6, #1
 8009bb8:	d106      	bne.n	8009bc8 <_strtoul_l.constprop.0+0xc8>
 8009bba:	2322      	movs	r3, #34	@ 0x22
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f8ce 3000 	str.w	r3, [lr]
 8009bc2:	b932      	cbnz	r2, 8009bd2 <_strtoul_l.constprop.0+0xd2>
 8009bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc8:	b107      	cbz	r7, 8009bcc <_strtoul_l.constprop.0+0xcc>
 8009bca:	4240      	negs	r0, r0
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	d0f9      	beq.n	8009bc4 <_strtoul_l.constprop.0+0xc4>
 8009bd0:	b106      	cbz	r6, 8009bd4 <_strtoul_l.constprop.0+0xd4>
 8009bd2:	1e69      	subs	r1, r5, #1
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	e7f5      	b.n	8009bc4 <_strtoul_l.constprop.0+0xc4>
 8009bd8:	0800a5e1 	.word	0x0800a5e1

08009bdc <_strtoul_r>:
 8009bdc:	f7ff bf90 	b.w	8009b00 <_strtoul_l.constprop.0>

08009be0 <__ascii_wctomb>:
 8009be0:	4603      	mov	r3, r0
 8009be2:	4608      	mov	r0, r1
 8009be4:	b141      	cbz	r1, 8009bf8 <__ascii_wctomb+0x18>
 8009be6:	2aff      	cmp	r2, #255	@ 0xff
 8009be8:	d904      	bls.n	8009bf4 <__ascii_wctomb+0x14>
 8009bea:	228a      	movs	r2, #138	@ 0x8a
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	4770      	bx	lr
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	700a      	strb	r2, [r1, #0]
 8009bf8:	4770      	bx	lr
	...

08009bfc <fiprintf>:
 8009bfc:	b40e      	push	{r1, r2, r3}
 8009bfe:	b503      	push	{r0, r1, lr}
 8009c00:	4601      	mov	r1, r0
 8009c02:	ab03      	add	r3, sp, #12
 8009c04:	4805      	ldr	r0, [pc, #20]	@ (8009c1c <fiprintf+0x20>)
 8009c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	f000 f83d 	bl	8009c8c <_vfiprintf_r>
 8009c12:	b002      	add	sp, #8
 8009c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c18:	b003      	add	sp, #12
 8009c1a:	4770      	bx	lr
 8009c1c:	200000a8 	.word	0x200000a8

08009c20 <abort>:
 8009c20:	2006      	movs	r0, #6
 8009c22:	b508      	push	{r3, lr}
 8009c24:	f000 fa06 	bl	800a034 <raise>
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f7f8 fa4a 	bl	80020c2 <_exit>

08009c2e <_malloc_usable_size_r>:
 8009c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c32:	1f18      	subs	r0, r3, #4
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bfbc      	itt	lt
 8009c38:	580b      	ldrlt	r3, [r1, r0]
 8009c3a:	18c0      	addlt	r0, r0, r3
 8009c3c:	4770      	bx	lr

08009c3e <__sfputc_r>:
 8009c3e:	6893      	ldr	r3, [r2, #8]
 8009c40:	b410      	push	{r4}
 8009c42:	3b01      	subs	r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	6093      	str	r3, [r2, #8]
 8009c48:	da07      	bge.n	8009c5a <__sfputc_r+0x1c>
 8009c4a:	6994      	ldr	r4, [r2, #24]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	db01      	blt.n	8009c54 <__sfputc_r+0x16>
 8009c50:	290a      	cmp	r1, #10
 8009c52:	d102      	bne.n	8009c5a <__sfputc_r+0x1c>
 8009c54:	bc10      	pop	{r4}
 8009c56:	f000 b931 	b.w	8009ebc <__swbuf_r>
 8009c5a:	6813      	ldr	r3, [r2, #0]
 8009c5c:	1c58      	adds	r0, r3, #1
 8009c5e:	6010      	str	r0, [r2, #0]
 8009c60:	7019      	strb	r1, [r3, #0]
 8009c62:	4608      	mov	r0, r1
 8009c64:	bc10      	pop	{r4}
 8009c66:	4770      	bx	lr

08009c68 <__sfputs_r>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460f      	mov	r7, r1
 8009c6e:	4614      	mov	r4, r2
 8009c70:	18d5      	adds	r5, r2, r3
 8009c72:	42ac      	cmp	r4, r5
 8009c74:	d101      	bne.n	8009c7a <__sfputs_r+0x12>
 8009c76:	2000      	movs	r0, #0
 8009c78:	e007      	b.n	8009c8a <__sfputs_r+0x22>
 8009c7a:	463a      	mov	r2, r7
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c82:	f7ff ffdc 	bl	8009c3e <__sfputc_r>
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	d1f3      	bne.n	8009c72 <__sfputs_r+0xa>
 8009c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c8c <_vfiprintf_r>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	460d      	mov	r5, r1
 8009c92:	4614      	mov	r4, r2
 8009c94:	4698      	mov	r8, r3
 8009c96:	4606      	mov	r6, r0
 8009c98:	b09d      	sub	sp, #116	@ 0x74
 8009c9a:	b118      	cbz	r0, 8009ca4 <_vfiprintf_r+0x18>
 8009c9c:	6a03      	ldr	r3, [r0, #32]
 8009c9e:	b90b      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x18>
 8009ca0:	f7fc f9e0 	bl	8006064 <__sinit>
 8009ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ca6:	07d9      	lsls	r1, r3, #31
 8009ca8:	d405      	bmi.n	8009cb6 <_vfiprintf_r+0x2a>
 8009caa:	89ab      	ldrh	r3, [r5, #12]
 8009cac:	059a      	lsls	r2, r3, #22
 8009cae:	d402      	bmi.n	8009cb6 <_vfiprintf_r+0x2a>
 8009cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cb2:	f7fc fb1a 	bl	80062ea <__retarget_lock_acquire_recursive>
 8009cb6:	89ab      	ldrh	r3, [r5, #12]
 8009cb8:	071b      	lsls	r3, r3, #28
 8009cba:	d501      	bpl.n	8009cc0 <_vfiprintf_r+0x34>
 8009cbc:	692b      	ldr	r3, [r5, #16]
 8009cbe:	b99b      	cbnz	r3, 8009ce8 <_vfiprintf_r+0x5c>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f000 f938 	bl	8009f38 <__swsetup_r>
 8009cc8:	b170      	cbz	r0, 8009ce8 <_vfiprintf_r+0x5c>
 8009cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ccc:	07dc      	lsls	r4, r3, #31
 8009cce:	d504      	bpl.n	8009cda <_vfiprintf_r+0x4e>
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	b01d      	add	sp, #116	@ 0x74
 8009cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cda:	89ab      	ldrh	r3, [r5, #12]
 8009cdc:	0598      	lsls	r0, r3, #22
 8009cde:	d4f7      	bmi.n	8009cd0 <_vfiprintf_r+0x44>
 8009ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ce2:	f7fc fb03 	bl	80062ec <__retarget_lock_release_recursive>
 8009ce6:	e7f3      	b.n	8009cd0 <_vfiprintf_r+0x44>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cec:	2320      	movs	r3, #32
 8009cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cf2:	2330      	movs	r3, #48	@ 0x30
 8009cf4:	f04f 0901 	mov.w	r9, #1
 8009cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cfc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009ea8 <_vfiprintf_r+0x21c>
 8009d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d04:	4623      	mov	r3, r4
 8009d06:	469a      	mov	sl, r3
 8009d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d0c:	b10a      	cbz	r2, 8009d12 <_vfiprintf_r+0x86>
 8009d0e:	2a25      	cmp	r2, #37	@ 0x25
 8009d10:	d1f9      	bne.n	8009d06 <_vfiprintf_r+0x7a>
 8009d12:	ebba 0b04 	subs.w	fp, sl, r4
 8009d16:	d00b      	beq.n	8009d30 <_vfiprintf_r+0xa4>
 8009d18:	465b      	mov	r3, fp
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ffa2 	bl	8009c68 <__sfputs_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	f000 80a7 	beq.w	8009e78 <_vfiprintf_r+0x1ec>
 8009d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d2c:	445a      	add	r2, fp
 8009d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d30:	f89a 3000 	ldrb.w	r3, [sl]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 809f 	beq.w	8009e78 <_vfiprintf_r+0x1ec>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d44:	f10a 0a01 	add.w	sl, sl, #1
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d52:	4654      	mov	r4, sl
 8009d54:	2205      	movs	r2, #5
 8009d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5a:	4853      	ldr	r0, [pc, #332]	@ (8009ea8 <_vfiprintf_r+0x21c>)
 8009d5c:	f7fc fac7 	bl	80062ee <memchr>
 8009d60:	9a04      	ldr	r2, [sp, #16]
 8009d62:	b9d8      	cbnz	r0, 8009d9c <_vfiprintf_r+0x110>
 8009d64:	06d1      	lsls	r1, r2, #27
 8009d66:	bf44      	itt	mi
 8009d68:	2320      	movmi	r3, #32
 8009d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d6e:	0713      	lsls	r3, r2, #28
 8009d70:	bf44      	itt	mi
 8009d72:	232b      	movmi	r3, #43	@ 0x2b
 8009d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d78:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d7e:	d015      	beq.n	8009dac <_vfiprintf_r+0x120>
 8009d80:	4654      	mov	r4, sl
 8009d82:	2000      	movs	r0, #0
 8009d84:	f04f 0c0a 	mov.w	ip, #10
 8009d88:	9a07      	ldr	r2, [sp, #28]
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d90:	3b30      	subs	r3, #48	@ 0x30
 8009d92:	2b09      	cmp	r3, #9
 8009d94:	d94b      	bls.n	8009e2e <_vfiprintf_r+0x1a2>
 8009d96:	b1b0      	cbz	r0, 8009dc6 <_vfiprintf_r+0x13a>
 8009d98:	9207      	str	r2, [sp, #28]
 8009d9a:	e014      	b.n	8009dc6 <_vfiprintf_r+0x13a>
 8009d9c:	eba0 0308 	sub.w	r3, r0, r8
 8009da0:	fa09 f303 	lsl.w	r3, r9, r3
 8009da4:	4313      	orrs	r3, r2
 8009da6:	46a2      	mov	sl, r4
 8009da8:	9304      	str	r3, [sp, #16]
 8009daa:	e7d2      	b.n	8009d52 <_vfiprintf_r+0xc6>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	1d19      	adds	r1, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9103      	str	r1, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfbb      	ittet	lt
 8009db8:	425b      	neglt	r3, r3
 8009dba:	f042 0202 	orrlt.w	r2, r2, #2
 8009dbe:	9307      	strge	r3, [sp, #28]
 8009dc0:	9307      	strlt	r3, [sp, #28]
 8009dc2:	bfb8      	it	lt
 8009dc4:	9204      	strlt	r2, [sp, #16]
 8009dc6:	7823      	ldrb	r3, [r4, #0]
 8009dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dca:	d10a      	bne.n	8009de2 <_vfiprintf_r+0x156>
 8009dcc:	7863      	ldrb	r3, [r4, #1]
 8009dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd0:	d132      	bne.n	8009e38 <_vfiprintf_r+0x1ac>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	3402      	adds	r4, #2
 8009dd6:	1d1a      	adds	r2, r3, #4
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	9203      	str	r2, [sp, #12]
 8009ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009de0:	9305      	str	r3, [sp, #20]
 8009de2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009eac <_vfiprintf_r+0x220>
 8009de6:	2203      	movs	r2, #3
 8009de8:	4650      	mov	r0, sl
 8009dea:	7821      	ldrb	r1, [r4, #0]
 8009dec:	f7fc fa7f 	bl	80062ee <memchr>
 8009df0:	b138      	cbz	r0, 8009e02 <_vfiprintf_r+0x176>
 8009df2:	2240      	movs	r2, #64	@ 0x40
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	eba0 000a 	sub.w	r0, r0, sl
 8009dfa:	4082      	lsls	r2, r0
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	3401      	adds	r4, #1
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e06:	2206      	movs	r2, #6
 8009e08:	4829      	ldr	r0, [pc, #164]	@ (8009eb0 <_vfiprintf_r+0x224>)
 8009e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e0e:	f7fc fa6e 	bl	80062ee <memchr>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d03f      	beq.n	8009e96 <_vfiprintf_r+0x20a>
 8009e16:	4b27      	ldr	r3, [pc, #156]	@ (8009eb4 <_vfiprintf_r+0x228>)
 8009e18:	bb1b      	cbnz	r3, 8009e62 <_vfiprintf_r+0x1d6>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	3307      	adds	r3, #7
 8009e1e:	f023 0307 	bic.w	r3, r3, #7
 8009e22:	3308      	adds	r3, #8
 8009e24:	9303      	str	r3, [sp, #12]
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	443b      	add	r3, r7
 8009e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2c:	e76a      	b.n	8009d04 <_vfiprintf_r+0x78>
 8009e2e:	460c      	mov	r4, r1
 8009e30:	2001      	movs	r0, #1
 8009e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e36:	e7a8      	b.n	8009d8a <_vfiprintf_r+0xfe>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4619      	mov	r1, r3
 8009e40:	3401      	adds	r4, #1
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	4620      	mov	r0, r4
 8009e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e4a:	3a30      	subs	r2, #48	@ 0x30
 8009e4c:	2a09      	cmp	r2, #9
 8009e4e:	d903      	bls.n	8009e58 <_vfiprintf_r+0x1cc>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d0c6      	beq.n	8009de2 <_vfiprintf_r+0x156>
 8009e54:	9105      	str	r1, [sp, #20]
 8009e56:	e7c4      	b.n	8009de2 <_vfiprintf_r+0x156>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e60:	e7f0      	b.n	8009e44 <_vfiprintf_r+0x1b8>
 8009e62:	ab03      	add	r3, sp, #12
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	462a      	mov	r2, r5
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <_vfiprintf_r+0x22c>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	f7fb fa9f 	bl	80053b0 <_printf_float>
 8009e72:	4607      	mov	r7, r0
 8009e74:	1c78      	adds	r0, r7, #1
 8009e76:	d1d6      	bne.n	8009e26 <_vfiprintf_r+0x19a>
 8009e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e7a:	07d9      	lsls	r1, r3, #31
 8009e7c:	d405      	bmi.n	8009e8a <_vfiprintf_r+0x1fe>
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	059a      	lsls	r2, r3, #22
 8009e82:	d402      	bmi.n	8009e8a <_vfiprintf_r+0x1fe>
 8009e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e86:	f7fc fa31 	bl	80062ec <__retarget_lock_release_recursive>
 8009e8a:	89ab      	ldrh	r3, [r5, #12]
 8009e8c:	065b      	lsls	r3, r3, #25
 8009e8e:	f53f af1f 	bmi.w	8009cd0 <_vfiprintf_r+0x44>
 8009e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e94:	e71e      	b.n	8009cd4 <_vfiprintf_r+0x48>
 8009e96:	ab03      	add	r3, sp, #12
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4b06      	ldr	r3, [pc, #24]	@ (8009eb8 <_vfiprintf_r+0x22c>)
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	f7fb fd23 	bl	80058ec <_printf_i>
 8009ea6:	e7e4      	b.n	8009e72 <_vfiprintf_r+0x1e6>
 8009ea8:	0800a6e1 	.word	0x0800a6e1
 8009eac:	0800a6e7 	.word	0x0800a6e7
 8009eb0:	0800a6eb 	.word	0x0800a6eb
 8009eb4:	080053b1 	.word	0x080053b1
 8009eb8:	08009c69 	.word	0x08009c69

08009ebc <__swbuf_r>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	460e      	mov	r6, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	b118      	cbz	r0, 8009ece <__swbuf_r+0x12>
 8009ec6:	6a03      	ldr	r3, [r0, #32]
 8009ec8:	b90b      	cbnz	r3, 8009ece <__swbuf_r+0x12>
 8009eca:	f7fc f8cb 	bl	8006064 <__sinit>
 8009ece:	69a3      	ldr	r3, [r4, #24]
 8009ed0:	60a3      	str	r3, [r4, #8]
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	071a      	lsls	r2, r3, #28
 8009ed6:	d501      	bpl.n	8009edc <__swbuf_r+0x20>
 8009ed8:	6923      	ldr	r3, [r4, #16]
 8009eda:	b943      	cbnz	r3, 8009eee <__swbuf_r+0x32>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 f82a 	bl	8009f38 <__swsetup_r>
 8009ee4:	b118      	cbz	r0, 8009eee <__swbuf_r+0x32>
 8009ee6:	f04f 37ff 	mov.w	r7, #4294967295
 8009eea:	4638      	mov	r0, r7
 8009eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	b2f6      	uxtb	r6, r6
 8009ef4:	1a98      	subs	r0, r3, r2
 8009ef6:	6963      	ldr	r3, [r4, #20]
 8009ef8:	4637      	mov	r7, r6
 8009efa:	4283      	cmp	r3, r0
 8009efc:	dc05      	bgt.n	8009f0a <__swbuf_r+0x4e>
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7ff f975 	bl	80091f0 <_fflush_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d1ed      	bne.n	8009ee6 <__swbuf_r+0x2a>
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	60a3      	str	r3, [r4, #8]
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	6022      	str	r2, [r4, #0]
 8009f16:	701e      	strb	r6, [r3, #0]
 8009f18:	6962      	ldr	r2, [r4, #20]
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d004      	beq.n	8009f2a <__swbuf_r+0x6e>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	07db      	lsls	r3, r3, #31
 8009f24:	d5e1      	bpl.n	8009eea <__swbuf_r+0x2e>
 8009f26:	2e0a      	cmp	r6, #10
 8009f28:	d1df      	bne.n	8009eea <__swbuf_r+0x2e>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f7ff f95f 	bl	80091f0 <_fflush_r>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d0d9      	beq.n	8009eea <__swbuf_r+0x2e>
 8009f36:	e7d6      	b.n	8009ee6 <__swbuf_r+0x2a>

08009f38 <__swsetup_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4b29      	ldr	r3, [pc, #164]	@ (8009fe0 <__swsetup_r+0xa8>)
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	460c      	mov	r4, r1
 8009f42:	b118      	cbz	r0, 8009f4c <__swsetup_r+0x14>
 8009f44:	6a03      	ldr	r3, [r0, #32]
 8009f46:	b90b      	cbnz	r3, 8009f4c <__swsetup_r+0x14>
 8009f48:	f7fc f88c 	bl	8006064 <__sinit>
 8009f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f50:	0719      	lsls	r1, r3, #28
 8009f52:	d422      	bmi.n	8009f9a <__swsetup_r+0x62>
 8009f54:	06da      	lsls	r2, r3, #27
 8009f56:	d407      	bmi.n	8009f68 <__swsetup_r+0x30>
 8009f58:	2209      	movs	r2, #9
 8009f5a:	602a      	str	r2, [r5, #0]
 8009f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	e033      	b.n	8009fd0 <__swsetup_r+0x98>
 8009f68:	0758      	lsls	r0, r3, #29
 8009f6a:	d512      	bpl.n	8009f92 <__swsetup_r+0x5a>
 8009f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f6e:	b141      	cbz	r1, 8009f82 <__swsetup_r+0x4a>
 8009f70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f74:	4299      	cmp	r1, r3
 8009f76:	d002      	beq.n	8009f7e <__swsetup_r+0x46>
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7fd f829 	bl	8006fd0 <_free_r>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f043 0308 	orr.w	r3, r3, #8
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	b94b      	cbnz	r3, 8009fb2 <__swsetup_r+0x7a>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fa8:	d003      	beq.n	8009fb2 <__swsetup_r+0x7a>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 f882 	bl	800a0b6 <__smakebuf_r>
 8009fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb6:	f013 0201 	ands.w	r2, r3, #1
 8009fba:	d00a      	beq.n	8009fd2 <__swsetup_r+0x9a>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	60a2      	str	r2, [r4, #8]
 8009fc0:	6962      	ldr	r2, [r4, #20]
 8009fc2:	4252      	negs	r2, r2
 8009fc4:	61a2      	str	r2, [r4, #24]
 8009fc6:	6922      	ldr	r2, [r4, #16]
 8009fc8:	b942      	cbnz	r2, 8009fdc <__swsetup_r+0xa4>
 8009fca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fce:	d1c5      	bne.n	8009f5c <__swsetup_r+0x24>
 8009fd0:	bd38      	pop	{r3, r4, r5, pc}
 8009fd2:	0799      	lsls	r1, r3, #30
 8009fd4:	bf58      	it	pl
 8009fd6:	6962      	ldrpl	r2, [r4, #20]
 8009fd8:	60a2      	str	r2, [r4, #8]
 8009fda:	e7f4      	b.n	8009fc6 <__swsetup_r+0x8e>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	e7f7      	b.n	8009fd0 <__swsetup_r+0x98>
 8009fe0:	200000a8 	.word	0x200000a8

08009fe4 <_raise_r>:
 8009fe4:	291f      	cmp	r1, #31
 8009fe6:	b538      	push	{r3, r4, r5, lr}
 8009fe8:	4605      	mov	r5, r0
 8009fea:	460c      	mov	r4, r1
 8009fec:	d904      	bls.n	8009ff8 <_raise_r+0x14>
 8009fee:	2316      	movs	r3, #22
 8009ff0:	6003      	str	r3, [r0, #0]
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ffa:	b112      	cbz	r2, 800a002 <_raise_r+0x1e>
 8009ffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a000:	b94b      	cbnz	r3, 800a016 <_raise_r+0x32>
 800a002:	4628      	mov	r0, r5
 800a004:	f000 f830 	bl	800a068 <_getpid_r>
 800a008:	4622      	mov	r2, r4
 800a00a:	4601      	mov	r1, r0
 800a00c:	4628      	mov	r0, r5
 800a00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a012:	f000 b817 	b.w	800a044 <_kill_r>
 800a016:	2b01      	cmp	r3, #1
 800a018:	d00a      	beq.n	800a030 <_raise_r+0x4c>
 800a01a:	1c59      	adds	r1, r3, #1
 800a01c:	d103      	bne.n	800a026 <_raise_r+0x42>
 800a01e:	2316      	movs	r3, #22
 800a020:	6003      	str	r3, [r0, #0]
 800a022:	2001      	movs	r0, #1
 800a024:	e7e7      	b.n	8009ff6 <_raise_r+0x12>
 800a026:	2100      	movs	r1, #0
 800a028:	4620      	mov	r0, r4
 800a02a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a02e:	4798      	blx	r3
 800a030:	2000      	movs	r0, #0
 800a032:	e7e0      	b.n	8009ff6 <_raise_r+0x12>

0800a034 <raise>:
 800a034:	4b02      	ldr	r3, [pc, #8]	@ (800a040 <raise+0xc>)
 800a036:	4601      	mov	r1, r0
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	f7ff bfd3 	b.w	8009fe4 <_raise_r>
 800a03e:	bf00      	nop
 800a040:	200000a8 	.word	0x200000a8

0800a044 <_kill_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	2300      	movs	r3, #0
 800a048:	4d06      	ldr	r5, [pc, #24]	@ (800a064 <_kill_r+0x20>)
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	f7f8 f826 	bl	80020a2 <_kill>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d102      	bne.n	800a060 <_kill_r+0x1c>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b103      	cbz	r3, 800a060 <_kill_r+0x1c>
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	bf00      	nop
 800a064:	20000ba0 	.word	0x20000ba0

0800a068 <_getpid_r>:
 800a068:	f7f8 b814 	b.w	8002094 <_getpid>

0800a06c <__swhatbuf_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	460c      	mov	r4, r1
 800a070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a074:	4615      	mov	r5, r2
 800a076:	2900      	cmp	r1, #0
 800a078:	461e      	mov	r6, r3
 800a07a:	b096      	sub	sp, #88	@ 0x58
 800a07c:	da0c      	bge.n	800a098 <__swhatbuf_r+0x2c>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	2100      	movs	r1, #0
 800a082:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a086:	bf14      	ite	ne
 800a088:	2340      	movne	r3, #64	@ 0x40
 800a08a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a08e:	2000      	movs	r0, #0
 800a090:	6031      	str	r1, [r6, #0]
 800a092:	602b      	str	r3, [r5, #0]
 800a094:	b016      	add	sp, #88	@ 0x58
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	466a      	mov	r2, sp
 800a09a:	f000 f849 	bl	800a130 <_fstat_r>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	dbed      	blt.n	800a07e <__swhatbuf_r+0x12>
 800a0a2:	9901      	ldr	r1, [sp, #4]
 800a0a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0ac:	4259      	negs	r1, r3
 800a0ae:	4159      	adcs	r1, r3
 800a0b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0b4:	e7eb      	b.n	800a08e <__swhatbuf_r+0x22>

0800a0b6 <__smakebuf_r>:
 800a0b6:	898b      	ldrh	r3, [r1, #12]
 800a0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ba:	079d      	lsls	r5, r3, #30
 800a0bc:	4606      	mov	r6, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	d507      	bpl.n	800a0d2 <__smakebuf_r+0x1c>
 800a0c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	6163      	str	r3, [r4, #20]
 800a0ce:	b003      	add	sp, #12
 800a0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d2:	466a      	mov	r2, sp
 800a0d4:	ab01      	add	r3, sp, #4
 800a0d6:	f7ff ffc9 	bl	800a06c <__swhatbuf_r>
 800a0da:	9f00      	ldr	r7, [sp, #0]
 800a0dc:	4605      	mov	r5, r0
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7fc ffe7 	bl	80070b4 <_malloc_r>
 800a0e6:	b948      	cbnz	r0, 800a0fc <__smakebuf_r+0x46>
 800a0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d4ee      	bmi.n	800a0ce <__smakebuf_r+0x18>
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	f043 0302 	orr.w	r3, r3, #2
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	e7e2      	b.n	800a0c2 <__smakebuf_r+0xc>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	6020      	str	r0, [r4, #0]
 800a10c:	b15b      	cbz	r3, 800a126 <__smakebuf_r+0x70>
 800a10e:	4630      	mov	r0, r6
 800a110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a114:	f000 f81e 	bl	800a154 <_isatty_r>
 800a118:	b128      	cbz	r0, 800a126 <__smakebuf_r+0x70>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f023 0303 	bic.w	r3, r3, #3
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	431d      	orrs	r5, r3
 800a12a:	81a5      	strh	r5, [r4, #12]
 800a12c:	e7cf      	b.n	800a0ce <__smakebuf_r+0x18>
	...

0800a130 <_fstat_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d06      	ldr	r5, [pc, #24]	@ (800a150 <_fstat_r+0x20>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	f7f8 f80f 	bl	8002160 <_fstat>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d102      	bne.n	800a14c <_fstat_r+0x1c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b103      	cbz	r3, 800a14c <_fstat_r+0x1c>
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	20000ba0 	.word	0x20000ba0

0800a154 <_isatty_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	2300      	movs	r3, #0
 800a158:	4d05      	ldr	r5, [pc, #20]	@ (800a170 <_isatty_r+0x1c>)
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	f7f8 f80d 	bl	800217e <_isatty>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_isatty_r+0x1a>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_isatty_r+0x1a>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20000ba0 	.word	0x20000ba0

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
