
Drawing_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800555c  0800555c  000070ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005564  08005564  000070ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0800556c  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200000b0  08005618  000070b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005618  00007358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c342  00000000  00000000  000070d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca3  00000000  00000000  00013417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  000150c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a4  00000000  00000000  00015d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c3e  00000000  00000000  000166ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de3d  00000000  00000000  0002e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae4d  00000000  00000000  0003c127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  000c6fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000caa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080054ac 	.word	0x080054ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080054ac 	.word	0x080054ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_d2uiz>:
 8000a08:	004a      	lsls	r2, r1, #1
 8000a0a:	d211      	bcs.n	8000a30 <__aeabi_d2uiz+0x28>
 8000a0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a10:	d211      	bcs.n	8000a36 <__aeabi_d2uiz+0x2e>
 8000a12:	d50d      	bpl.n	8000a30 <__aeabi_d2uiz+0x28>
 8000a14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a1c:	d40e      	bmi.n	8000a3c <__aeabi_d2uiz+0x34>
 8000a1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	4770      	bx	lr
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_d2uiz+0x3a>
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0000 	mov.w	r0, #0
 8000a46:	4770      	bx	lr

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f001 f8d2 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f818 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f994 	bl	8000d80 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a58:	f000 f850 	bl	8000afc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a5c:	f000 f8f0 	bl	8000c40 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a60:	f000 f964 	bl	8000d2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <main+0x34>)
 8000a66:	f002 f8fb 	bl	8002c60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <main+0x38>)
 8000a6c:	f002 f8f8 	bl	8002c60 <HAL_TIM_Base_Start_IT>
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
//
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  setting_robot(0);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f9fd 	bl	8000e70 <setting_robot>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a76:	bf00      	nop
 8000a78:	e7fd      	b.n	8000a76 <main+0x2e>
 8000a7a:	bf00      	nop
 8000a7c:	200000cc 	.word	0x200000cc
 8000a80:	20000114 	.word	0x20000114

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	@ 0x40
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2228      	movs	r2, #40	@ 0x28
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 f87a 	bl	8004b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fc70 	bl	80023a0 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ac6:	f000 fe87 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fede 	bl	80028a4 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aee:	f000 fe73 	bl	80017d8 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3740      	adds	r7, #64	@ 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b096      	sub	sp, #88	@ 0x58
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2220      	movs	r2, #32
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 f829 	bl	8004b8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8000c3c <MX_TIM1_Init+0x140>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000b40:	4b3d      	ldr	r3, [pc, #244]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b42:	2207      	movs	r2, #7
 8000b44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b3c      	ldr	r3, [pc, #240]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b38      	ldr	r3, [pc, #224]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b5a:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b35      	ldr	r3, [pc, #212]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b66:	4834      	ldr	r0, [pc, #208]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b68:	f002 f82a 	bl	8002bc0 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b72:	f000 fe31 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b80:	4619      	mov	r1, r3
 8000b82:	482d      	ldr	r0, [pc, #180]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b84:	f002 fd70 	bl	8003668 <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b8e:	f000 fe23 	bl	80017d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b92:	4829      	ldr	r0, [pc, #164]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000b94:	f002 f8b6 	bl	8002d04 <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b9e:	f000 fe1b 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000baa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4821      	ldr	r0, [pc, #132]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000bb2:	f003 f8f5 	bl	8003da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bbc:	f000 fe0c 	bl	80017d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8000bc4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	4814      	ldr	r0, [pc, #80]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000be8:	f002 fc7c 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000bf2:	f000 fdf1 	bl	80017d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000c1a:	f003 f91f 	bl	8003e5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000c24:	f000 fdd8 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c28:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <MX_TIM1_Init+0x13c>)
 8000c2a:	f000 fe65 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 8000c2e:	bf00      	nop
 8000c30:	3758      	adds	r7, #88	@ 0x58
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000cc 	.word	0x200000cc
 8000c3c:	40012c00 	.word	0x40012c00

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c98:	4823      	ldr	r0, [pc, #140]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000c9a:	f001 ff91 	bl	8002bc0 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ca4:	f000 fd98 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000cb6:	f002 fcd7 	bl	8003668 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cc0:	f000 fd8a 	bl	80017d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cc4:	4818      	ldr	r0, [pc, #96]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000cc6:	f002 f81d 	bl	8002d04 <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f000 fd82 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000ce4:	f003 f85c 	bl	8003da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cee:	f000 fd73 	bl	80017d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	@ 0x60
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000cf6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000d0c:	f002 fbea 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d16:	f000 fd5f 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <MX_TIM2_Init+0xe8>)
 8000d1c:	f000 fdec 	bl	80018f8 <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	@ 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000114 	.word	0x20000114

08000d2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_USART1_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f003 f8dd 	bl	8003f22 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f000 fd33 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000015c 	.word	0x2000015c
 8000d7c:	40013800 	.word	0x40013800

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a31      	ldr	r2, [pc, #196]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a25      	ldr	r2, [pc, #148]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <MX_GPIO_Init+0xe0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2104      	movs	r1, #4
 8000de0:	4820      	ldr	r0, [pc, #128]	@ (8000e64 <MX_GPIO_Init+0xe4>)
 8000de2:	f001 faad 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dec:	481e      	ldr	r0, [pc, #120]	@ (8000e68 <MX_GPIO_Init+0xe8>)
 8000dee:	f001 faa7 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df2:	2304      	movs	r3, #4
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4816      	ldr	r0, [pc, #88]	@ (8000e64 <MX_GPIO_Init+0xe4>)
 8000e0a:	f001 f915 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4810      	ldr	r0, [pc, #64]	@ (8000e68 <MX_GPIO_Init+0xe8>)
 8000e28:	f001 f906 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e2c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <MX_GPIO_Init+0xec>)
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <MX_GPIO_Init+0xe8>)
 8000e42:	f001 f8f9 	bl	8002038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2017      	movs	r0, #23
 8000e4c:	f001 f80b 	bl	8001e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e50:	2017      	movs	r0, #23
 8000e52:	f001 f824 	bl	8001e9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	10110000 	.word	0x10110000

08000e70 <setting_robot>:

/* USER CODE BEGIN 4 */
void setting_robot(int index)
{
 8000e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e74:	b092      	sub	sp, #72	@ 0x48
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	  idle = 1;
 8000e7a:	4b87      	ldr	r3, [pc, #540]	@ (8001098 <setting_robot+0x228>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
	  current_X = (double) posX[index] - prev_X;
 8000e80:	4a86      	ldr	r2, [pc, #536]	@ (800109c <setting_robot+0x22c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e8c:	4b84      	ldr	r3, [pc, #528]	@ (80010a0 <setting_robot+0x230>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff f967 	bl	8000164 <__aeabi_dsub>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4982      	ldr	r1, [pc, #520]	@ (80010a4 <setting_robot+0x234>)
 8000e9c:	e9c1 2300 	strd	r2, r3, [r1]
	  current_Y = (double) posY[index] - prev_Y;
 8000ea0:	4a81      	ldr	r2, [pc, #516]	@ (80010a8 <setting_robot+0x238>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eac:	4b7f      	ldr	r3, [pc, #508]	@ (80010ac <setting_robot+0x23c>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff f957 	bl	8000164 <__aeabi_dsub>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	497d      	ldr	r1, [pc, #500]	@ (80010b0 <setting_robot+0x240>)
 8000ebc:	e9c1 2300 	strd	r2, r3, [r1]
	  if(current_X > 0)
 8000ec0:	4b78      	ldr	r3, [pc, #480]	@ (80010a4 <setting_robot+0x234>)
 8000ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	f7ff fd91 	bl	80009f4 <__aeabi_dcmpgt>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d009      	beq.n	8000eec <setting_robot+0x7c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ede:	4875      	ldr	r0, [pc, #468]	@ (80010b4 <setting_robot+0x244>)
 8000ee0:	f001 fa2e 	bl	8002340 <HAL_GPIO_WritePin>
		  prev_dir_x = 1;
 8000ee4:	4b74      	ldr	r3, [pc, #464]	@ (80010b8 <setting_robot+0x248>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e01e      	b.n	8000f2a <setting_robot+0xba>
	  }else if(current_X < 0)
 8000eec:	4b6d      	ldr	r3, [pc, #436]	@ (80010a4 <setting_robot+0x234>)
 8000eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	f7ff fd5d 	bl	80009b8 <__aeabi_dcmplt>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d009      	beq.n	8000f18 <setting_robot+0xa8>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0a:	486a      	ldr	r0, [pc, #424]	@ (80010b4 <setting_robot+0x244>)
 8000f0c:	f001 fa18 	bl	8002340 <HAL_GPIO_WritePin>
		  prev_dir_x = 0;
 8000f10:	4b69      	ldr	r3, [pc, #420]	@ (80010b8 <setting_robot+0x248>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e008      	b.n	8000f2a <setting_robot+0xba>
	  }else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, prev_dir_x);
 8000f18:	4b67      	ldr	r3, [pc, #412]	@ (80010b8 <setting_robot+0x248>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f24:	4863      	ldr	r0, [pc, #396]	@ (80010b4 <setting_robot+0x244>)
 8000f26:	f001 fa0b 	bl	8002340 <HAL_GPIO_WritePin>
	  }

	  if(current_Y > 0)
 8000f2a:	4b61      	ldr	r3, [pc, #388]	@ (80010b0 <setting_robot+0x240>)
 8000f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	f7ff fd5c 	bl	80009f4 <__aeabi_dcmpgt>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <setting_robot+0xe4>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2104      	movs	r1, #4
 8000f46:	485d      	ldr	r0, [pc, #372]	@ (80010bc <setting_robot+0x24c>)
 8000f48:	f001 f9fa 	bl	8002340 <HAL_GPIO_WritePin>
		  prev_dir_y = 1;
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80010c0 <setting_robot+0x250>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e01c      	b.n	8000f8e <setting_robot+0x11e>
	  }else if(current_Y < 0)
 8000f54:	4b56      	ldr	r3, [pc, #344]	@ (80010b0 <setting_robot+0x240>)
 8000f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	f7ff fd29 	bl	80009b8 <__aeabi_dcmplt>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d008      	beq.n	8000f7e <setting_robot+0x10e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4852      	ldr	r0, [pc, #328]	@ (80010bc <setting_robot+0x24c>)
 8000f72:	f001 f9e5 	bl	8002340 <HAL_GPIO_WritePin>
		  prev_dir_y = 0;
 8000f76:	4b52      	ldr	r3, [pc, #328]	@ (80010c0 <setting_robot+0x250>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e007      	b.n	8000f8e <setting_robot+0x11e>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, prev_dir_y);
 8000f7e:	4b50      	ldr	r3, [pc, #320]	@ (80010c0 <setting_robot+0x250>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	2104      	movs	r1, #4
 8000f88:	484c      	ldr	r0, [pc, #304]	@ (80010bc <setting_robot+0x24c>)
 8000f8a:	f001 f9d9 	bl	8002340 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, dirY[index]);
//	  }else{
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, dirX[index]);
//		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, dirY[index]);
//	  }
	  current_X = fabs(current_X);
 8000f8e:	4b45      	ldr	r3, [pc, #276]	@ (80010a4 <setting_robot+0x234>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	4690      	mov	r8, r2
 8000f96:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8000f9a:	4b42      	ldr	r3, [pc, #264]	@ (80010a4 <setting_robot+0x234>)
 8000f9c:	e9c3 8900 	strd	r8, r9, [r3]
	  current_Y = fabs(current_Y);
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <setting_robot+0x240>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	4614      	mov	r4, r2
 8000fa8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8000fac:	4b40      	ldr	r3, [pc, #256]	@ (80010b0 <setting_robot+0x240>)
 8000fae:	e9c3 4500 	strd	r4, r5, [r3]
	  if(current_X > current_Y && current_X != 0 && current_Y != 0)
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <setting_robot+0x234>)
 8000fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <setting_robot+0x240>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fd19 	bl	80009f4 <__aeabi_dcmpgt>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 808b 	beq.w	80010e0 <setting_robot+0x270>
 8000fca:	4b36      	ldr	r3, [pc, #216]	@ (80010a4 <setting_robot+0x234>)
 8000fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	f7ff fce4 	bl	80009a4 <__aeabi_dcmpeq>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d17e      	bne.n	80010e0 <setting_robot+0x270>
 8000fe2:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <setting_robot+0x240>)
 8000fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	f7ff fcd8 	bl	80009a4 <__aeabi_dcmpeq>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d172      	bne.n	80010e0 <setting_robot+0x270>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d", 0);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	4930      	ldr	r1, [pc, #192]	@ (80010c4 <setting_robot+0x254>)
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fda2 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f89d 	bl	800014c <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f107 0108 	add.w	r1, r7, #8
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	482a      	ldr	r0, [pc, #168]	@ (80010c8 <setting_robot+0x258>)
 8001020:	f002 ffcf 	bl	8003fc2 <HAL_UART_Transmit>
		  __HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 8001024:	4b29      	ldr	r3, [pc, #164]	@ (80010cc <setting_robot+0x25c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800102c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <setting_robot+0x25c>)
 8001030:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001034:	60da      	str	r2, [r3, #12]
		  ratio = (double) current_X / current_Y;
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <setting_robot+0x234>)
 8001038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <setting_robot+0x240>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fb71 	bl	8000728 <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4921      	ldr	r1, [pc, #132]	@ (80010d0 <setting_robot+0x260>)
 800104c:	e9c1 2300 	strd	r2, r3, [r1]
		  arr_Y = ratio * MAX_ARR;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <setting_robot+0x260>)
 8001052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <setting_robot+0x264>)
 800105c:	f7ff fa3a 	bl	80004d4 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fcce 	bl	8000a08 <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	4a1a      	ldr	r2, [pc, #104]	@ (80010d8 <setting_robot+0x268>)
 8001070:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, arr_Y);
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <setting_robot+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <setting_robot+0x268>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <setting_robot+0x268>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a16      	ldr	r2, [pc, #88]	@ (80010dc <setting_robot+0x26c>)
 8001082:	60d3      	str	r3, [r2, #12]
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <setting_robot+0x25c>)
 8001088:	f001 ff9a 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800108c:	2100      	movs	r1, #0
 800108e:	4813      	ldr	r0, [pc, #76]	@ (80010dc <setting_robot+0x26c>)
 8001090:	f001 ff96 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
	  {
 8001094:	e1af      	b.n	80013f6 <setting_robot+0x586>
 8001096:	bf00      	nop
 8001098:	200001f4 	.word	0x200001f4
 800109c:	20000000 	.word	0x20000000
 80010a0:	200001b8 	.word	0x200001b8
 80010a4:	200001a8 	.word	0x200001a8
 80010a8:	20000028 	.word	0x20000028
 80010ac:	200001c0 	.word	0x200001c0
 80010b0:	200001b0 	.word	0x200001b0
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	200001e4 	.word	0x200001e4
 80010bc:	40010800 	.word	0x40010800
 80010c0:	200001e8 	.word	0x200001e8
 80010c4:	080054c4 	.word	0x080054c4
 80010c8:	2000015c 	.word	0x2000015c
 80010cc:	200000cc 	.word	0x200000cc
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40890000 	.word	0x40890000
 80010d8:	200001cc 	.word	0x200001cc
 80010dc:	20000114 	.word	0x20000114
	  }else if(current_X < current_Y && current_X != 0 && current_Y != 0)
 80010e0:	4b97      	ldr	r3, [pc, #604]	@ (8001340 <setting_robot+0x4d0>)
 80010e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e6:	4b97      	ldr	r3, [pc, #604]	@ (8001344 <setting_robot+0x4d4>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fc64 	bl	80009b8 <__aeabi_dcmplt>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d065      	beq.n	80011c2 <setting_robot+0x352>
 80010f6:	4b92      	ldr	r3, [pc, #584]	@ (8001340 <setting_robot+0x4d0>)
 80010f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	f7ff fc4e 	bl	80009a4 <__aeabi_dcmpeq>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d159      	bne.n	80011c2 <setting_robot+0x352>
 800110e:	4b8d      	ldr	r3, [pc, #564]	@ (8001344 <setting_robot+0x4d4>)
 8001110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	f7ff fc42 	bl	80009a4 <__aeabi_dcmpeq>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d14d      	bne.n	80011c2 <setting_robot+0x352>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d", 1);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2201      	movs	r2, #1
 800112c:	4986      	ldr	r1, [pc, #536]	@ (8001348 <setting_robot+0x4d8>)
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fd0c 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f807 	bl	800014c <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	b29a      	uxth	r2, r3
 8001142:	f107 0108 	add.w	r1, r7, #8
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	4880      	ldr	r0, [pc, #512]	@ (800134c <setting_robot+0x4dc>)
 800114c:	f002 ff39 	bl	8003fc2 <HAL_UART_Transmit>
		  __HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 8001150:	4b7f      	ldr	r3, [pc, #508]	@ (8001350 <setting_robot+0x4e0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001158:	62da      	str	r2, [r3, #44]	@ 0x2c
 800115a:	4b7d      	ldr	r3, [pc, #500]	@ (8001350 <setting_robot+0x4e0>)
 800115c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001160:	60da      	str	r2, [r3, #12]
		  ratio = (double) current_Y / current_X;
 8001162:	4b78      	ldr	r3, [pc, #480]	@ (8001344 <setting_robot+0x4d4>)
 8001164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001168:	4b75      	ldr	r3, [pc, #468]	@ (8001340 <setting_robot+0x4d0>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fadb 	bl	8000728 <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4977      	ldr	r1, [pc, #476]	@ (8001354 <setting_robot+0x4e4>)
 8001178:	e9c1 2300 	strd	r2, r3, [r1]
		  arr_X = ratio * MAX_ARR;
 800117c:	4b75      	ldr	r3, [pc, #468]	@ (8001354 <setting_robot+0x4e4>)
 800117e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b74      	ldr	r3, [pc, #464]	@ (8001358 <setting_robot+0x4e8>)
 8001188:	f7ff f9a4 	bl	80004d4 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fc38 	bl	8000a08 <__aeabi_d2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	4a70      	ldr	r2, [pc, #448]	@ (800135c <setting_robot+0x4ec>)
 800119c:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim1, arr_X);
 800119e:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <setting_robot+0x4f0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6e      	ldr	r2, [pc, #440]	@ (800135c <setting_robot+0x4ec>)
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011a8:	4b6c      	ldr	r3, [pc, #432]	@ (800135c <setting_robot+0x4ec>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001360 <setting_robot+0x4f0>)
 80011ae:	60d3      	str	r3, [r2, #12]
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80011b0:	2100      	movs	r1, #0
 80011b2:	486b      	ldr	r0, [pc, #428]	@ (8001360 <setting_robot+0x4f0>)
 80011b4:	f001 ff04 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4865      	ldr	r0, [pc, #404]	@ (8001350 <setting_robot+0x4e0>)
 80011bc:	f001 ff00 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
	  {
 80011c0:	e119      	b.n	80013f6 <setting_robot+0x586>
	  }else if(current_X == current_Y)
 80011c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001340 <setting_robot+0x4d0>)
 80011c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001344 <setting_robot+0x4d4>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fbe9 	bl	80009a4 <__aeabi_dcmpeq>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d02f      	beq.n	8001238 <setting_robot+0x3c8>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d", 2);
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2202      	movs	r2, #2
 80011de:	495a      	ldr	r1, [pc, #360]	@ (8001348 <setting_robot+0x4d8>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fcb3 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7fe ffae 	bl	800014c <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f107 0108 	add.w	r1, r7, #8
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	4853      	ldr	r0, [pc, #332]	@ (800134c <setting_robot+0x4dc>)
 80011fe:	f002 fee0 	bl	8003fc2 <HAL_UART_Transmit>
		  __HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <setting_robot+0x4f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800120c:	4b54      	ldr	r3, [pc, #336]	@ (8001360 <setting_robot+0x4f0>)
 800120e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001212:	60da      	str	r2, [r3, #12]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 8001214:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <setting_robot+0x4e0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800121e:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <setting_robot+0x4e0>)
 8001220:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001224:	60da      	str	r2, [r3, #12]
	      HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001226:	2100      	movs	r1, #0
 8001228:	484d      	ldr	r0, [pc, #308]	@ (8001360 <setting_robot+0x4f0>)
 800122a:	f001 fec9 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800122e:	2100      	movs	r1, #0
 8001230:	4847      	ldr	r0, [pc, #284]	@ (8001350 <setting_robot+0x4e0>)
 8001232:	f001 fec5 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
 8001236:	e0de      	b.n	80013f6 <setting_robot+0x586>
	  }else if(!posX[index] && !posY[index])
 8001238:	4a4a      	ldr	r2, [pc, #296]	@ (8001364 <setting_robot+0x4f4>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4413      	add	r3, r2
 8001240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	f7ff fbaa 	bl	80009a4 <__aeabi_dcmpeq>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d032      	beq.n	80012bc <setting_robot+0x44c>
 8001256:	4a44      	ldr	r2, [pc, #272]	@ (8001368 <setting_robot+0x4f8>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	f7ff fb9b 	bl	80009a4 <__aeabi_dcmpeq>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <setting_robot+0x44c>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d", 3);
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	2203      	movs	r2, #3
 800127a:	4933      	ldr	r1, [pc, #204]	@ (8001348 <setting_robot+0x4d8>)
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fc65 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f7fe ff60 	bl	800014c <strlen>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <setting_robot+0x4dc>)
 800129a:	f002 fe92 	bl	8003fc2 <HAL_UART_Transmit>
		  gotoX = 1;
 800129e:	4b33      	ldr	r3, [pc, #204]	@ (800136c <setting_robot+0x4fc>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
		  gotoY = 1;
 80012a4:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <setting_robot+0x500>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80012aa:	2100      	movs	r1, #0
 80012ac:	482c      	ldr	r0, [pc, #176]	@ (8001360 <setting_robot+0x4f0>)
 80012ae:	f001 ff77 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
		  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80012b2:	2100      	movs	r1, #0
 80012b4:	4826      	ldr	r0, [pc, #152]	@ (8001350 <setting_robot+0x4e0>)
 80012b6:	f001 ff73 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
	  {
 80012ba:	e09c      	b.n	80013f6 <setting_robot+0x586>
	  }else if(current_X == 0 && current_Y !=0)
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <setting_robot+0x4d0>)
 80012be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	f7ff fb6b 	bl	80009a4 <__aeabi_dcmpeq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d04f      	beq.n	8001374 <setting_robot+0x504>
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <setting_robot+0x4d4>)
 80012d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	f7ff fb5f 	bl	80009a4 <__aeabi_dcmpeq>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d143      	bne.n	8001374 <setting_robot+0x504>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d", 4);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2204      	movs	r2, #4
 80012f2:	4915      	ldr	r1, [pc, #84]	@ (8001348 <setting_robot+0x4d8>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fc29 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff24 	bl	800014c <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	f107 0108 	add.w	r1, r7, #8
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	480e      	ldr	r0, [pc, #56]	@ (800134c <setting_robot+0x4dc>)
 8001312:	f002 fe56 	bl	8003fc2 <HAL_UART_Transmit>
		  gotoX = 1;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <setting_robot+0x4fc>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <setting_robot+0x4e0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <setting_robot+0x4e0>)
 8001328:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800132c:	60da      	str	r2, [r3, #12]
		  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	480b      	ldr	r0, [pc, #44]	@ (8001360 <setting_robot+0x4f0>)
 8001332:	f001 ff35 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <setting_robot+0x4e0>)
 800133a:	f001 fe41 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
	  {
 800133e:	e05a      	b.n	80013f6 <setting_robot+0x586>
 8001340:	200001a8 	.word	0x200001a8
 8001344:	200001b0 	.word	0x200001b0
 8001348:	080054c4 	.word	0x080054c4
 800134c:	2000015c 	.word	0x2000015c
 8001350:	20000114 	.word	0x20000114
 8001354:	20000200 	.word	0x20000200
 8001358:	40890000 	.word	0x40890000
 800135c:	200001c8 	.word	0x200001c8
 8001360:	200000cc 	.word	0x200000cc
 8001364:	20000000 	.word	0x20000000
 8001368:	20000028 	.word	0x20000028
 800136c:	200001d0 	.word	0x200001d0
 8001370:	200001d4 	.word	0x200001d4
	  }else if(current_X != 0 && current_Y == 0)
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <setting_robot+0x5b4>)
 8001376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	f7ff fb0f 	bl	80009a4 <__aeabi_dcmpeq>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d134      	bne.n	80013f6 <setting_robot+0x586>
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <setting_robot+0x5b8>)
 800138e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	f7ff fb03 	bl	80009a4 <__aeabi_dcmpeq>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d028      	beq.n	80013f6 <setting_robot+0x586>
	  {
		  char msg[64];
		  sprintf(msg, "Mode %d", 5);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2205      	movs	r2, #5
 80013aa:	4920      	ldr	r1, [pc, #128]	@ (800142c <setting_robot+0x5bc>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fbcd 	bl	8004b4c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe fec8 	bl	800014c <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f107 0108 	add.w	r1, r7, #8
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	4819      	ldr	r0, [pc, #100]	@ (8001430 <setting_robot+0x5c0>)
 80013ca:	f002 fdfa 	bl	8003fc2 <HAL_UART_Transmit>
		  gotoY = 1;
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <setting_robot+0x5c4>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <setting_robot+0x5c8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <setting_robot+0x5c8>)
 80013e0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80013e4:	60da      	str	r2, [r3, #12]
		  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80013e6:	2100      	movs	r1, #0
 80013e8:	4814      	ldr	r0, [pc, #80]	@ (800143c <setting_robot+0x5cc>)
 80013ea:	f001 fed9 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
		  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80013ee:	2100      	movs	r1, #0
 80013f0:	4811      	ldr	r0, [pc, #68]	@ (8001438 <setting_robot+0x5c8>)
 80013f2:	f001 fde5 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
	  }
	  prev_X = posX[index];
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <setting_robot+0x5d0>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	4910      	ldr	r1, [pc, #64]	@ (8001444 <setting_robot+0x5d4>)
 8001404:	e9c1 2300 	strd	r2, r3, [r1]
	  prev_Y = posY[index];
 8001408:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <setting_robot+0x5d8>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	490d      	ldr	r1, [pc, #52]	@ (800144c <setting_robot+0x5dc>)
 8001416:	e9c1 2300 	strd	r2, r3, [r1]
}
 800141a:	bf00      	nop
 800141c:	3748      	adds	r7, #72	@ 0x48
 800141e:	46bd      	mov	sp, r7
 8001420:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001424:	200001a8 	.word	0x200001a8
 8001428:	200001b0 	.word	0x200001b0
 800142c:	080054c4 	.word	0x080054c4
 8001430:	2000015c 	.word	0x2000015c
 8001434:	200001d4 	.word	0x200001d4
 8001438:	200000cc 	.word	0x200000cc
 800143c:	20000114 	.word	0x20000114
 8001440:	20000000 	.word	0x20000000
 8001444:	200001b8 	.word	0x200001b8
 8001448:	20000028 	.word	0x20000028
 800144c:	200001c0 	.word	0x200001c0

08001450 <homing>:

void homing()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, MAX_ARR);
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <homing+0x54>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <homing+0x54>)
 8001460:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001464:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim2, MAX_ARR);
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <homing+0x58>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800146e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <homing+0x58>)
 8001472:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001476:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2104      	movs	r1, #4
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <homing+0x5c>)
 800147e:	f000 ff5f 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <homing+0x60>)
 800148a:	f000 ff59 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800148e:	2100      	movs	r1, #0
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <homing+0x54>)
 8001492:	f001 fc8f 	bl	8002db4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001496:	2100      	movs	r1, #0
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <homing+0x58>)
 800149a:	f001 fc8b 	bl	8002db4 <HAL_TIM_PWM_Start>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000cc 	.word	0x200000cc
 80014a8:	20000114 	.word	0x20000114
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b092      	sub	sp, #72	@ 0x48
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == TIM1 && ishomingX == 0)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a8a      	ldr	r2, [pc, #552]	@ (80016ec <HAL_TIM_PWM_PulseFinishedCallback+0x238>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d150      	bne.n	8001568 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 80014c6:	4b8a      	ldr	r3, [pc, #552]	@ (80016f0 <HAL_TIM_PWM_PulseFinishedCallback+0x23c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d14c      	bne.n	8001568 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
	  {
		  countX++;
 80014ce:	4b89      	ldr	r3, [pc, #548]	@ (80016f4 <HAL_TIM_PWM_PulseFinishedCallback+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a87      	ldr	r2, [pc, #540]	@ (80016f4 <HAL_TIM_PWM_PulseFinishedCallback+0x240>)
 80014d6:	6013      	str	r3, [r2, #0]
		  if(countX > (current_X * 10 * 200) - 1)
 80014d8:	4b86      	ldr	r3, [pc, #536]	@ (80016f4 <HAL_TIM_PWM_PulseFinishedCallback+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ff7f 	bl	80003e0 <__aeabi_ui2d>
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <HAL_TIM_PWM_PulseFinishedCallback+0x244>)
 80014e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b82      	ldr	r3, [pc, #520]	@ (80016fc <HAL_TIM_PWM_PulseFinishedCallback+0x248>)
 80014f2:	f7fe ffef 	bl	80004d4 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b7f      	ldr	r3, [pc, #508]	@ (8001700 <HAL_TIM_PWM_PulseFinishedCallback+0x24c>)
 8001504:	f7fe ffe6 	bl	80004d4 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b7b      	ldr	r3, [pc, #492]	@ (8001704 <HAL_TIM_PWM_PulseFinishedCallback+0x250>)
 8001516:	f7fe fe25 	bl	8000164 <__aeabi_dsub>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff fa67 	bl	80009f4 <__aeabi_dcmpgt>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01d      	beq.n	8001568 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
		  {
			  char msg[64];
			  sprintf(msg, "countX %ld, dir_x %ld", countX, prev_dir_x);
 800152c:	4b71      	ldr	r3, [pc, #452]	@ (80016f4 <HAL_TIM_PWM_PulseFinishedCallback+0x240>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b75      	ldr	r3, [pc, #468]	@ (8001708 <HAL_TIM_PWM_PulseFinishedCallback+0x254>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f107 0008 	add.w	r0, r7, #8
 8001538:	4974      	ldr	r1, [pc, #464]	@ (800170c <HAL_TIM_PWM_PulseFinishedCallback+0x258>)
 800153a:	f003 fb07 	bl	8004b4c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe02 	bl	800014c <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001554:	486e      	ldr	r0, [pc, #440]	@ (8001710 <HAL_TIM_PWM_PulseFinishedCallback+0x25c>)
 8001556:	f002 fd34 	bl	8003fc2 <HAL_UART_Transmit>
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800155a:	2100      	movs	r1, #0
 800155c:	486d      	ldr	r0, [pc, #436]	@ (8001714 <HAL_TIM_PWM_PulseFinishedCallback+0x260>)
 800155e:	f001 fe1f 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
			  gotoX = 1;
 8001562:	4b6d      	ldr	r3, [pc, #436]	@ (8001718 <HAL_TIM_PWM_PulseFinishedCallback+0x264>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(htim->Instance == TIM2 && ishomingY == 0)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001570:	d150      	bne.n	8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
 8001572:	4b6a      	ldr	r3, [pc, #424]	@ (800171c <HAL_TIM_PWM_PulseFinishedCallback+0x268>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d14c      	bne.n	8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
	  {
		  countY++;
 800157a:	4b69      	ldr	r3, [pc, #420]	@ (8001720 <HAL_TIM_PWM_PulseFinishedCallback+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a67      	ldr	r2, [pc, #412]	@ (8001720 <HAL_TIM_PWM_PulseFinishedCallback+0x26c>)
 8001582:	6013      	str	r3, [r2, #0]
		  if(countY > (current_Y * 10 * 200) - 1)
 8001584:	4b66      	ldr	r3, [pc, #408]	@ (8001720 <HAL_TIM_PWM_PulseFinishedCallback+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff29 	bl	80003e0 <__aeabi_ui2d>
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	4b64      	ldr	r3, [pc, #400]	@ (8001724 <HAL_TIM_PWM_PulseFinishedCallback+0x270>)
 8001594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b57      	ldr	r3, [pc, #348]	@ (80016fc <HAL_TIM_PWM_PulseFinishedCallback+0x248>)
 800159e:	f7fe ff99 	bl	80004d4 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <HAL_TIM_PWM_PulseFinishedCallback+0x24c>)
 80015b0:	f7fe ff90 	bl	80004d4 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b50      	ldr	r3, [pc, #320]	@ (8001704 <HAL_TIM_PWM_PulseFinishedCallback+0x250>)
 80015c2:	f7fe fdcf 	bl	8000164 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff fa11 	bl	80009f4 <__aeabi_dcmpgt>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01d      	beq.n	8001614 <HAL_TIM_PWM_PulseFinishedCallback+0x160>
		  {
			  char msg[64];
			  sprintf(msg, "countY %ld, dir_y %ld", countY, prev_dir_y);
 80015d8:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <HAL_TIM_PWM_PulseFinishedCallback+0x26c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b52      	ldr	r3, [pc, #328]	@ (8001728 <HAL_TIM_PWM_PulseFinishedCallback+0x274>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f107 0008 	add.w	r0, r7, #8
 80015e4:	4951      	ldr	r1, [pc, #324]	@ (800172c <HAL_TIM_PWM_PulseFinishedCallback+0x278>)
 80015e6:	f003 fab1 	bl	8004b4c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdac 	bl	800014c <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f107 0108 	add.w	r1, r7, #8
 80015fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001600:	4843      	ldr	r0, [pc, #268]	@ (8001710 <HAL_TIM_PWM_PulseFinishedCallback+0x25c>)
 8001602:	f002 fcde 	bl	8003fc2 <HAL_UART_Transmit>
			  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001606:	2100      	movs	r1, #0
 8001608:	4849      	ldr	r0, [pc, #292]	@ (8001730 <HAL_TIM_PWM_PulseFinishedCallback+0x27c>)
 800160a:	f001 fdc9 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
			  gotoY = 1;
 800160e:	4b49      	ldr	r3, [pc, #292]	@ (8001734 <HAL_TIM_PWM_PulseFinishedCallback+0x280>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(gotoX == 1 && gotoY == 1 && ishomingX == 0 && ishomingY == 0)
 8001614:	4b40      	ldr	r3, [pc, #256]	@ (8001718 <HAL_TIM_PWM_PulseFinishedCallback+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d129      	bne.n	8001670 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
 800161c:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <HAL_TIM_PWM_PulseFinishedCallback+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d125      	bne.n	8001670 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_TIM_PWM_PulseFinishedCallback+0x23c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d121      	bne.n	8001670 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
 800162c:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <HAL_TIM_PWM_PulseFinishedCallback+0x268>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11d      	bne.n	8001670 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
	  {
//		  char msg[64];
//		  sprintf(msg, "Point %ld: X = %d, Y = %d\r\n", i+1, posX[i], posY[i]);
//		  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		  i++;
 8001634:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a3f      	ldr	r2, [pc, #252]	@ (8001738 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 800163c:	6013      	str	r3, [r2, #0]
		  gotoX = 0;
 800163e:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <HAL_TIM_PWM_PulseFinishedCallback+0x264>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
		  gotoY = 0;
 8001644:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <HAL_TIM_PWM_PulseFinishedCallback+0x280>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
		  countX = 0;
 800164a:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <HAL_TIM_PWM_PulseFinishedCallback+0x240>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
		  countY = 0;
 8001650:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <HAL_TIM_PWM_PulseFinishedCallback+0x26c>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
		  if(i<point)
 8001656:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b0b      	cmp	r3, #11
 800165c:	d805      	bhi.n	800166a <HAL_TIM_PWM_PulseFinishedCallback+0x1b6>
		  {
			  setting_robot(i);
 800165e:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <HAL_TIM_PWM_PulseFinishedCallback+0x284>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fc04 	bl	8000e70 <setting_robot>
 8001668:	e002      	b.n	8001670 <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>
		  }else{
			  idle = 0;
 800166a:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_TIM_PWM_PulseFinishedCallback+0x288>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(htim->Instance == TIM1 && ishomingX == 1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_TIM_PWM_PulseFinishedCallback+0x238>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d117      	bne.n	80016aa <HAL_TIM_PWM_PulseFinishedCallback+0x1f6>
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <HAL_TIM_PWM_PulseFinishedCallback+0x23c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d113      	bne.n	80016aa <HAL_TIM_PWM_PulseFinishedCallback+0x1f6>
	  {
		  counthomeX++;
 8001682:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a2d      	ldr	r2, [pc, #180]	@ (8001740 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 800168a:	6013      	str	r3, [r2, #0]
		  if(counthomeX > 800)
 800168c:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001694:	d909      	bls.n	80016aa <HAL_TIM_PWM_PulseFinishedCallback+0x1f6>
		  {
			  HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001696:	2100      	movs	r1, #0
 8001698:	481e      	ldr	r0, [pc, #120]	@ (8001714 <HAL_TIM_PWM_PulseFinishedCallback+0x260>)
 800169a:	f001 fd81 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
			  ishomingX = 0;
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_TIM_PWM_PulseFinishedCallback+0x23c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
			  counthomeX = 0;
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <HAL_TIM_PWM_PulseFinishedCallback+0x28c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(htim->Instance == TIM2 && ishomingY == 1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b2:	d117      	bne.n	80016e4 <HAL_TIM_PWM_PulseFinishedCallback+0x230>
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_TIM_PWM_PulseFinishedCallback+0x268>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d113      	bne.n	80016e4 <HAL_TIM_PWM_PulseFinishedCallback+0x230>
	  {
		  counthomeY++;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a20      	ldr	r2, [pc, #128]	@ (8001744 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 80016c4:	6013      	str	r3, [r2, #0]
		  if(counthomeY > 800)
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80016ce:	d909      	bls.n	80016e4 <HAL_TIM_PWM_PulseFinishedCallback+0x230>
		  {
			  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80016d0:	2100      	movs	r1, #0
 80016d2:	4817      	ldr	r0, [pc, #92]	@ (8001730 <HAL_TIM_PWM_PulseFinishedCallback+0x27c>)
 80016d4:	f001 fd64 	bl	80031a0 <HAL_TIM_PWM_Stop_IT>
			  ishomingY = 0;
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_TIM_PWM_PulseFinishedCallback+0x268>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
			  counthomeY = 0;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_TIM_PWM_PulseFinishedCallback+0x290>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 80016e4:	bf00      	nop
 80016e6:	3748      	adds	r7, #72	@ 0x48
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	200001ec 	.word	0x200001ec
 80016f4:	200001d8 	.word	0x200001d8
 80016f8:	200001a8 	.word	0x200001a8
 80016fc:	40240000 	.word	0x40240000
 8001700:	40690000 	.word	0x40690000
 8001704:	3ff00000 	.word	0x3ff00000
 8001708:	200001e4 	.word	0x200001e4
 800170c:	080054cc 	.word	0x080054cc
 8001710:	2000015c 	.word	0x2000015c
 8001714:	200000cc 	.word	0x200000cc
 8001718:	200001d0 	.word	0x200001d0
 800171c:	200001f0 	.word	0x200001f0
 8001720:	200001dc 	.word	0x200001dc
 8001724:	200001b0 	.word	0x200001b0
 8001728:	200001e8 	.word	0x200001e8
 800172c:	080054e4 	.word	0x080054e4
 8001730:	20000114 	.word	0x20000114
 8001734:	200001d4 	.word	0x200001d4
 8001738:	200001e0 	.word	0x200001e0
 800173c:	200001f4 	.word	0x200001f4
 8001740:	200001f8 	.word	0x200001f8
 8001744:	200001fc 	.word	0x200001fc

08001748 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6 && idle == 0)
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	2b40      	cmp	r3, #64	@ 0x40
 8001756:	d105      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x1c>
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <HAL_GPIO_EXTI_Callback+0x74>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		homing();
 8001760:	f7ff fe76 	bl	8001450 <homing>
	}

	if(GPIO_Pin == GPIO_PIN_7)
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2b80      	cmp	r3, #128	@ 0x80
 8001768:	d110      	bne.n	800178c <HAL_GPIO_EXTI_Callback+0x44>
	{
		ishomingX = 1;
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x78>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001770:	2100      	movs	r1, #0
 8001772:	4814      	ldr	r0, [pc, #80]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001774:	f001 fbc0 	bl	8002ef8 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800177e:	4812      	ldr	r0, [pc, #72]	@ (80017c8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001780:	f000 fdde 	bl	8002340 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001784:	2100      	movs	r1, #0
 8001786:	480f      	ldr	r0, [pc, #60]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001788:	f001 fc1a 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
	}

	if(GPIO_Pin == GPIO_PIN_8)
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001792:	d10f      	bne.n	80017b4 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		ishomingY = 1;
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_GPIO_EXTI_Callback+0x84>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800179a:	2100      	movs	r1, #0
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <HAL_GPIO_EXTI_Callback+0x88>)
 800179e:	f001 fbab 	bl	8002ef8 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2104      	movs	r1, #4
 80017a6:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017a8:	f000 fdca 	bl	8002340 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80017ac:	2100      	movs	r1, #0
 80017ae:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <HAL_GPIO_EXTI_Callback+0x88>)
 80017b0:	f001 fc06 	bl	8002fc0 <HAL_TIM_PWM_Start_IT>
	}
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001f4 	.word	0x200001f4
 80017c0:	200001ec 	.word	0x200001ec
 80017c4:	200000cc 	.word	0x200000cc
 80017c8:	40010c00 	.word	0x40010c00
 80017cc:	200001f0 	.word	0x200001f0
 80017d0:	20000114 	.word	0x20000114
 80017d4:	40010800 	.word	0x40010800

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <Error_Handler+0x8>

080017e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <HAL_MspInit+0x5c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_MspInit+0x5c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_MspInit+0x5c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <HAL_MspInit+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_MspInit+0x60>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_MspInit+0x60>)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <HAL_TIM_Base_MspInit+0xa8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12c      	bne.n	80018b4 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_TIM_Base_MspInit+0xac>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a25      	ldr	r2, [pc, #148]	@ (80018f4 <HAL_TIM_Base_MspInit+0xac>)
 8001860:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_TIM_Base_MspInit+0xac>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2018      	movs	r0, #24
 8001878:	f000 faf5 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800187c:	2018      	movs	r0, #24
 800187e:	f000 fb0e 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2019      	movs	r0, #25
 8001888:	f000 faed 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800188c:	2019      	movs	r0, #25
 800188e:	f000 fb06 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	201a      	movs	r0, #26
 8001898:	f000 fae5 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800189c:	201a      	movs	r0, #26
 800189e:	f000 fafe 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201b      	movs	r0, #27
 80018a8:	f000 fadd 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018ac:	201b      	movs	r0, #27
 80018ae:	f000 faf6 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018b2:	e018      	b.n	80018e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018bc:	d113      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018be:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <HAL_TIM_Base_MspInit+0xac>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <HAL_TIM_Base_MspInit+0xac>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_TIM_Base_MspInit+0xac>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201c      	movs	r0, #28
 80018dc:	f000 fac3 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e0:	201c      	movs	r0, #28
 80018e2:	f000 fadc 	bl	8001e9e <HAL_NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1f      	ldr	r2, [pc, #124]	@ (8001990 <HAL_TIM_MspPostInit+0x98>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d119      	bne.n	800194c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <HAL_TIM_MspPostInit+0x9c>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <HAL_TIM_MspPostInit+0x9c>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_TIM_MspPostInit+0x9c>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	4814      	ldr	r0, [pc, #80]	@ (8001998 <HAL_TIM_MspPostInit+0xa0>)
 8001946:	f000 fb77 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800194a:	e01c      	b.n	8001986 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001954:	d117      	bne.n	8001986 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_TIM_MspPostInit+0x9c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <HAL_TIM_MspPostInit+0x9c>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_TIM_MspPostInit+0x9c>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800196e:	2301      	movs	r3, #1
 8001970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2302      	movs	r3, #2
 8001978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	@ (8001998 <HAL_TIM_MspPostInit+0xa0>)
 8001982:	f000 fb59 	bl	8002038 <HAL_GPIO_Init>
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40012c00 	.word	0x40012c00
 8001994:	40021000 	.word	0x40021000
 8001998:	40010800 	.word	0x40010800

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a20      	ldr	r2, [pc, #128]	@ (8001a38 <HAL_UART_MspInit+0x9c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d139      	bne.n	8001a30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_UART_MspInit+0xa0>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <HAL_UART_MspInit+0xa0>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HAL_UART_MspInit+0xa0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_UART_MspInit+0xa0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a18      	ldr	r2, [pc, #96]	@ (8001a3c <HAL_UART_MspInit+0xa0>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_UART_MspInit+0xa0>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4619      	mov	r1, r3
 8001a00:	480f      	ldr	r0, [pc, #60]	@ (8001a40 <HAL_UART_MspInit+0xa4>)
 8001a02:	f000 fb19 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <HAL_UART_MspInit+0xa4>)
 8001a1c:	f000 fb0c 	bl	8002038 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2025      	movs	r0, #37	@ 0x25
 8001a26:	f000 fa1e 	bl	8001e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a2a:	2025      	movs	r0, #37	@ 0x25
 8001a2c:	f000 fa37 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010800 	.word	0x40010800

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <NMI_Handler+0x4>

08001a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f8f4 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001aa0:	2040      	movs	r0, #64	@ 0x40
 8001aa2:	f000 fc65 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001aa6:	2080      	movs	r0, #128	@ 0x80
 8001aa8:	f000 fc62 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001aac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ab0:	f000 fc5e 	bl	8002370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <TIM1_BRK_IRQHandler+0x10>)
 8001abe:	f001 fc21 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200000cc 	.word	0x200000cc

08001acc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <TIM1_UP_IRQHandler+0x10>)
 8001ad2:	f001 fc17 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200000cc 	.word	0x200000cc

08001ae0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001ae6:	f001 fc0d 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000cc 	.word	0x200000cc

08001af4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <TIM1_CC_IRQHandler+0x10>)
 8001afa:	f001 fc03 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200000cc 	.word	0x200000cc

08001b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <TIM2_IRQHandler+0x10>)
 8001b0e:	f001 fbf9 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000114 	.word	0x20000114

08001b1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <USART1_IRQHandler+0x10>)
 8001b22:	f002 fad9 	bl	80040d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000015c 	.word	0x2000015c

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f003 f81c 	bl	8004b9c <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	20000208 	.word	0x20000208
 8001b98:	20000358 	.word	0x20000358

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff fff8 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bae:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc4:	4c09      	ldr	r4, [pc, #36]	@ (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 ffe9 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7fe ff37 	bl	8000a48 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001be4:	0800556c 	.word	0x0800556c
  ldr r2, =_sbss
 8001be8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001bec:	20000358 	.word	0x20000358

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f923 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fde8 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f93b 	bl	8001eba <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f903 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	@ (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000050 	.word	0x20000050
 8001c78:	20000058 	.word	0x20000058
 8001c7c:	20000054 	.word	0x20000054

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000058 	.word	0x20000058
 8001ca0:	2000020c 	.word	0x2000020c

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	@ (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	2000020c 	.word	0x2000020c

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	db0b      	blt.n	8001d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	f003 021f 	and.w	r2, r3, #31
 8001d34:	4906      	ldr	r1, [pc, #24]	@ (8001d50 <__NVIC_EnableIRQ+0x34>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff90 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff2d 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff42 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff90 	bl	8001da8 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5f 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff35 	bl	8001d1c <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa2 	bl	8001e0c <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d008      	beq.n	8001efc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e020      	b.n	8001f3e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 020e 	bic.w	r2, r2, #14
 8001f0a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d005      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2204      	movs	r2, #4
 8001f64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e051      	b.n	8002010 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020e 	bic.w	r2, r2, #14
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a22      	ldr	r2, [pc, #136]	@ (800201c <HAL_DMA_Abort_IT+0xd4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d029      	beq.n	8001fea <HAL_DMA_Abort_IT+0xa2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <HAL_DMA_Abort_IT+0xd8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x9e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_DMA_Abort_IT+0xdc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x98>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_DMA_Abort_IT+0xe0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d012      	beq.n	8001fda <HAL_DMA_Abort_IT+0x92>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <HAL_DMA_Abort_IT+0xe4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x8c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002030 <HAL_DMA_Abort_IT+0xe8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d102      	bne.n	8001fce <HAL_DMA_Abort_IT+0x86>
 8001fc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fcc:	e00e      	b.n	8001fec <HAL_DMA_Abort_IT+0xa4>
 8001fce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fd2:	e00b      	b.n	8001fec <HAL_DMA_Abort_IT+0xa4>
 8001fd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd8:	e008      	b.n	8001fec <HAL_DMA_Abort_IT+0xa4>
 8001fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fde:	e005      	b.n	8001fec <HAL_DMA_Abort_IT+0xa4>
 8001fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe4:	e002      	b.n	8001fec <HAL_DMA_Abort_IT+0xa4>
 8001fe6:	2310      	movs	r3, #16
 8001fe8:	e000      	b.n	8001fec <HAL_DMA_Abort_IT+0xa4>
 8001fea:	2301      	movs	r3, #1
 8001fec:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_DMA_Abort_IT+0xec>)
 8001fee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
    } 
  }
  return status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40020008 	.word	0x40020008
 8002020:	4002001c 	.word	0x4002001c
 8002024:	40020030 	.word	0x40020030
 8002028:	40020044 	.word	0x40020044
 800202c:	40020058 	.word	0x40020058
 8002030:	4002006c 	.word	0x4002006c
 8002034:	40020000 	.word	0x40020000

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b08b      	sub	sp, #44	@ 0x2c
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e169      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800204c:	2201      	movs	r2, #1
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8158 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a9a      	ldr	r2, [pc, #616]	@ (80022d8 <HAL_GPIO_Init+0x2a0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d05e      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002074:	4a98      	ldr	r2, [pc, #608]	@ (80022d8 <HAL_GPIO_Init+0x2a0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d875      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800207a:	4a98      	ldr	r2, [pc, #608]	@ (80022dc <HAL_GPIO_Init+0x2a4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d058      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002080:	4a96      	ldr	r2, [pc, #600]	@ (80022dc <HAL_GPIO_Init+0x2a4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d86f      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002086:	4a96      	ldr	r2, [pc, #600]	@ (80022e0 <HAL_GPIO_Init+0x2a8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d052      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 800208c:	4a94      	ldr	r2, [pc, #592]	@ (80022e0 <HAL_GPIO_Init+0x2a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d869      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002092:	4a94      	ldr	r2, [pc, #592]	@ (80022e4 <HAL_GPIO_Init+0x2ac>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04c      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002098:	4a92      	ldr	r2, [pc, #584]	@ (80022e4 <HAL_GPIO_Init+0x2ac>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d863      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800209e:	4a92      	ldr	r2, [pc, #584]	@ (80022e8 <HAL_GPIO_Init+0x2b0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d046      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 80020a4:	4a90      	ldr	r2, [pc, #576]	@ (80022e8 <HAL_GPIO_Init+0x2b0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d85d      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d82a      	bhi.n	8002104 <HAL_GPIO_Init+0xcc>
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d859      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020b2:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <HAL_GPIO_Init+0x80>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002133 	.word	0x08002133
 80020bc:	0800210d 	.word	0x0800210d
 80020c0:	0800211f 	.word	0x0800211f
 80020c4:	08002161 	.word	0x08002161
 80020c8:	08002167 	.word	0x08002167
 80020cc:	08002167 	.word	0x08002167
 80020d0:	08002167 	.word	0x08002167
 80020d4:	08002167 	.word	0x08002167
 80020d8:	08002167 	.word	0x08002167
 80020dc:	08002167 	.word	0x08002167
 80020e0:	08002167 	.word	0x08002167
 80020e4:	08002167 	.word	0x08002167
 80020e8:	08002167 	.word	0x08002167
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002167 	.word	0x08002167
 80020f4:	08002167 	.word	0x08002167
 80020f8:	08002167 	.word	0x08002167
 80020fc:	08002115 	.word	0x08002115
 8002100:	08002129 	.word	0x08002129
 8002104:	4a79      	ldr	r2, [pc, #484]	@ (80022ec <HAL_GPIO_Init+0x2b4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210a:	e02c      	b.n	8002166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	623b      	str	r3, [r7, #32]
          break;
 8002112:	e029      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	3304      	adds	r3, #4
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e024      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	3308      	adds	r3, #8
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e01f      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	330c      	adds	r3, #12
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e01a      	b.n	8002168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213a:	2304      	movs	r3, #4
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e013      	b.n	8002168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002148:	2308      	movs	r3, #8
 800214a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	611a      	str	r2, [r3, #16]
          break;
 8002152:	e009      	b.n	8002168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	615a      	str	r2, [r3, #20]
          break;
 800215e:	e003      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x130>
          break;
 8002166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2bff      	cmp	r3, #255	@ 0xff
 800216c:	d801      	bhi.n	8002172 <HAL_GPIO_Init+0x13a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_Init+0x13e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2bff      	cmp	r3, #255	@ 0xff
 800217c:	d802      	bhi.n	8002184 <HAL_GPIO_Init+0x14c>
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x152>
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	3b08      	subs	r3, #8
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	210f      	movs	r1, #15
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80b1 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b8:	4b4d      	ldr	r3, [pc, #308]	@ (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	@ (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b4a      	ldr	r3, [pc, #296]	@ (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d0:	4a48      	ldr	r2, [pc, #288]	@ (80022f4 <HAL_GPIO_Init+0x2bc>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a40      	ldr	r2, [pc, #256]	@ (80022f8 <HAL_GPIO_Init+0x2c0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_GPIO_Init+0x1ec>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3f      	ldr	r2, [pc, #252]	@ (80022fc <HAL_GPIO_Init+0x2c4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00d      	beq.n	8002220 <HAL_GPIO_Init+0x1e8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3e      	ldr	r2, [pc, #248]	@ (8002300 <HAL_GPIO_Init+0x2c8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <HAL_GPIO_Init+0x1e4>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3d      	ldr	r2, [pc, #244]	@ (8002304 <HAL_GPIO_Init+0x2cc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_GPIO_Init+0x1e0>
 8002214:	2303      	movs	r3, #3
 8002216:	e006      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002218:	2304      	movs	r3, #4
 800221a:	e004      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 800221c:	2302      	movs	r3, #2
 800221e:	e002      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002224:	2300      	movs	r3, #0
 8002226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002228:	f002 0203 	and.w	r2, r2, #3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002236:	492f      	ldr	r1, [pc, #188]	@ (80022f4 <HAL_GPIO_Init+0x2bc>)
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002250:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	492c      	ldr	r1, [pc, #176]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	4928      	ldr	r1, [pc, #160]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 8002268:	4013      	ands	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002278:	4b23      	ldr	r3, [pc, #140]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4922      	ldr	r1, [pc, #136]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	60cb      	str	r3, [r1, #12]
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	43db      	mvns	r3, r3
 800228e:	491e      	ldr	r1, [pc, #120]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 8002290:	4013      	ands	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	4918      	ldr	r1, [pc, #96]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4914      	ldr	r1, [pc, #80]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d021      	beq.n	800230c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	490e      	ldr	r1, [pc, #56]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e021      	b.n	800231a <HAL_GPIO_Init+0x2e2>
 80022d6:	bf00      	nop
 80022d8:	10320000 	.word	0x10320000
 80022dc:	10310000 	.word	0x10310000
 80022e0:	10220000 	.word	0x10220000
 80022e4:	10210000 	.word	0x10210000
 80022e8:	10120000 	.word	0x10120000
 80022ec:	10110000 	.word	0x10110000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40010c00 	.word	0x40010c00
 8002300:	40011000 	.word	0x40011000
 8002304:	40011400 	.word	0x40011400
 8002308:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_GPIO_Init+0x304>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	43db      	mvns	r3, r3
 8002314:	4909      	ldr	r1, [pc, #36]	@ (800233c <HAL_GPIO_Init+0x304>)
 8002316:	4013      	ands	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	f47f ae8e 	bne.w	800204c <HAL_GPIO_Init+0x14>
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	372c      	adds	r7, #44	@ 0x2c
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800237a:	4b08      	ldr	r3, [pc, #32]	@ (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002386:	4a05      	ldr	r2, [pc, #20]	@ (800239c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f9da 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e272      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8087 	beq.w	80024ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c0:	4b92      	ldr	r3, [pc, #584]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d00c      	beq.n	80023e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023cc:	4b8f      	ldr	r3, [pc, #572]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d112      	bne.n	80023fe <HAL_RCC_OscConfig+0x5e>
 80023d8:	4b8c      	ldr	r3, [pc, #560]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e4:	d10b      	bne.n	80023fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	4b89      	ldr	r3, [pc, #548]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d06c      	beq.n	80024cc <HAL_RCC_OscConfig+0x12c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d168      	bne.n	80024cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e24c      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x76>
 8002408:	4b80      	ldr	r3, [pc, #512]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7f      	ldr	r2, [pc, #508]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e02e      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b7b      	ldr	r3, [pc, #492]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7a      	ldr	r2, [pc, #488]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b78      	ldr	r3, [pc, #480]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a77      	ldr	r2, [pc, #476]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xbc>
 8002442:	4b72      	ldr	r3, [pc, #456]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a71      	ldr	r2, [pc, #452]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b6f      	ldr	r3, [pc, #444]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6e      	ldr	r2, [pc, #440]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 800245c:	4b6b      	ldr	r3, [pc, #428]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6a      	ldr	r2, [pc, #424]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b68      	ldr	r3, [pc, #416]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a67      	ldr	r2, [pc, #412]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fc12 	bl	8001ca4 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fc0e 	bl	8001ca4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e200      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b5d      	ldr	r3, [pc, #372]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xe4>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fbfe 	bl	8001ca4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fbfa 	bl	8001ca4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1ec      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x10c>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d063      	beq.n	80025a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024da:	4b4c      	ldr	r3, [pc, #304]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024e6:	4b49      	ldr	r3, [pc, #292]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d11c      	bne.n	800252c <HAL_RCC_OscConfig+0x18c>
 80024f2:	4b46      	ldr	r3, [pc, #280]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	4b43      	ldr	r3, [pc, #268]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_RCC_OscConfig+0x176>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1c0      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b3d      	ldr	r3, [pc, #244]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4939      	ldr	r1, [pc, #228]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	e03a      	b.n	80025a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b36      	ldr	r3, [pc, #216]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fbb3 	bl	8001ca4 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff fbaf 	bl	8001ca4 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1a1      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4927      	ldr	r1, [pc, #156]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fb92 	bl	8001ca4 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7ff fb8e 	bl	8001ca4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e180      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03a      	beq.n	8002624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d019      	beq.n	80025ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <HAL_RCC_OscConfig+0x274>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7ff fb72 	bl	8001ca4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c4:	f7ff fb6e 	bl	8001ca4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e160      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 face 	bl	8002b84 <RCC_Delay>
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_RCC_OscConfig+0x274>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff fb58 	bl	8001ca4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f6:	e00f      	b.n	8002618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb54 	bl	8001ca4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d908      	bls.n	8002618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e146      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	42420000 	.word	0x42420000
 8002614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	4b92      	ldr	r3, [pc, #584]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e9      	bne.n	80025f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a6 	beq.w	800277e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002636:	4b8b      	ldr	r3, [pc, #556]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b88      	ldr	r3, [pc, #544]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	4a87      	ldr	r2, [pc, #540]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264c:	61d3      	str	r3, [r2, #28]
 800264e:	4b85      	ldr	r3, [pc, #532]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b82      	ldr	r3, [pc, #520]	@ (8002868 <HAL_RCC_OscConfig+0x4c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b7f      	ldr	r3, [pc, #508]	@ (8002868 <HAL_RCC_OscConfig+0x4c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a7e      	ldr	r2, [pc, #504]	@ (8002868 <HAL_RCC_OscConfig+0x4c8>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7ff fb15 	bl	8001ca4 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7ff fb11 	bl	8001ca4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	@ 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e103      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b75      	ldr	r3, [pc, #468]	@ (8002868 <HAL_RCC_OscConfig+0x4c8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x312>
 80026a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e02d      	b.n	800270e <HAL_RCC_OscConfig+0x36e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x334>
 80026ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a69      	ldr	r2, [pc, #420]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	4b67      	ldr	r3, [pc, #412]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a66      	ldr	r2, [pc, #408]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	e01c      	b.n	800270e <HAL_RCC_OscConfig+0x36e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d10c      	bne.n	80026f6 <HAL_RCC_OscConfig+0x356>
 80026dc:	4b61      	ldr	r3, [pc, #388]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a60      	ldr	r2, [pc, #384]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e00b      	b.n	800270e <HAL_RCC_OscConfig+0x36e>
 80026f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	4b58      	ldr	r3, [pc, #352]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a57      	ldr	r2, [pc, #348]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d015      	beq.n	8002742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7ff fac5 	bl	8001ca4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7ff fac1 	bl	8001ca4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0b1      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	4b4b      	ldr	r3, [pc, #300]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ee      	beq.n	800271e <HAL_RCC_OscConfig+0x37e>
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7ff faaf 	bl	8001ca4 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff faab 	bl	8001ca4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e09b      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	4b40      	ldr	r3, [pc, #256]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b3c      	ldr	r3, [pc, #240]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a3b      	ldr	r2, [pc, #236]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8087 	beq.w	8002896 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002788:	4b36      	ldr	r3, [pc, #216]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d061      	beq.n	8002858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d146      	bne.n	800282a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b33      	ldr	r3, [pc, #204]	@ (800286c <HAL_RCC_OscConfig+0x4cc>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7ff fa7f 	bl	8001ca4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7ff fa7b 	bl	8001ca4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e06d      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027bc:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d0:	d108      	bne.n	80027e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4921      	ldr	r1, [pc, #132]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a19      	ldr	r1, [r3, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	430b      	orrs	r3, r1
 80027f6:	491b      	ldr	r1, [pc, #108]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff fa4f 	bl	8001ca4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff fa4b 	bl	8001ca4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e03d      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x46a>
 8002828:	e035      	b.n	8002896 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_RCC_OscConfig+0x4cc>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7ff fa38 	bl	8001ca4 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7ff fa34 	bl	8001ca4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e026      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x498>
 8002856:	e01e      	b.n	8002896 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e019      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
 8002864:	40021000 	.word	0x40021000
 8002868:	40007000 	.word	0x40007000
 800286c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_OscConfig+0x500>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	429a      	cmp	r2, r3
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0d0      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d910      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b67      	ldr	r3, [pc, #412]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 0207 	bic.w	r2, r3, #7
 80028ce:	4965      	ldr	r1, [pc, #404]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b63      	ldr	r3, [pc, #396]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800290a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002922:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b50      	ldr	r3, [pc, #320]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	494d      	ldr	r1, [pc, #308]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d040      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d115      	bne.n	8002982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e073      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002972:	4b3d      	ldr	r3, [pc, #244]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06b      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002982:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f023 0203 	bic.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4936      	ldr	r1, [pc, #216]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002994:	f7ff f986 	bl	8001ca4 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7ff f982 	bl	8001ca4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e053      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 020c 	and.w	r2, r3, #12
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d1eb      	bne.n	800299c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c4:	4b27      	ldr	r3, [pc, #156]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d210      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 0207 	bic.w	r2, r3, #7
 80029da:	4922      	ldr	r1, [pc, #136]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e032      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4916      	ldr	r1, [pc, #88]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a32:	f000 f821 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490a      	ldr	r1, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1cc>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1d0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f8e4 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	080054fc 	.word	0x080054fc
 8002a70:	20000050 	.word	0x20000050
 8002a74:	20000054 	.word	0x20000054

08002a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d002      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x30>
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x36>
 8002aa6:	e027      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aaa:	613b      	str	r3, [r7, #16]
      break;
 8002aac:	e027      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0c9b      	lsrs	r3, r3, #18
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a17      	ldr	r2, [pc, #92]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	0c5b      	lsrs	r3, r3, #17
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ada:	fb03 f202 	mul.w	r2, r3, r2
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e004      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	613b      	str	r3, [r7, #16]
      break;
 8002af6:	e002      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	613b      	str	r3, [r7, #16]
      break;
 8002afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afe:	693b      	ldr	r3, [r7, #16]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	007a1200 	.word	0x007a1200
 8002b14:	08005514 	.word	0x08005514
 8002b18:	08005524 	.word	0x08005524
 8002b1c:	003d0900 	.word	0x003d0900

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b02      	ldr	r3, [pc, #8]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000050 	.word	0x20000050

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff2 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	0800550c 	.word	0x0800550c

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	0800550c 	.word	0x0800550c

08002b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <RCC_Delay+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <RCC_Delay+0x38>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba0:	bf00      	nop
  }
  while (Delay --);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <RCC_Delay+0x1c>
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000050 	.word	0x20000050
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e041      	b.n	8002c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fe2e 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fe1e 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e03a      	b.n	8002cee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	@ (8002cf8 <HAL_TIM_Base_Start_IT+0x98>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00e      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x58>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca2:	d009      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x58>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_TIM_Base_Start_IT+0x9c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIM_Base_Start_IT+0x58>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a13      	ldr	r2, [pc, #76]	@ (8002d00 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d010      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	e007      	b.n	8002cec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800

08002d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f839 	bl	8002da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fd7c 	bl	8003840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_TIM_PWM_Start+0x24>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e022      	b.n	8002e1e <HAL_TIM_PWM_Start+0x6a>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d109      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x3e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e015      	b.n	8002e1e <HAL_TIM_PWM_Start+0x6a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d109      	bne.n	8002e0c <HAL_TIM_PWM_Start+0x58>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e008      	b.n	8002e1e <HAL_TIM_PWM_Start+0x6a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e05e      	b.n	8002ee4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x82>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e34:	e013      	b.n	8002e5e <HAL_TIM_PWM_Start+0xaa>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x92>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e44:	e00b      	b.n	8002e5e <HAL_TIM_PWM_Start+0xaa>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0xa2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e54:	e003      	b.n	8002e5e <HAL_TIM_PWM_Start+0xaa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 ff76 	bl	8003d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <HAL_TIM_PWM_Start+0x138>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d107      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_TIM_PWM_Start+0x138>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_PWM_Start+0xfa>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_PWM_Start+0xfa>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <HAL_TIM_PWM_Start+0x13c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_PWM_Start+0xfa>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <HAL_TIM_PWM_Start+0x140>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d111      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d010      	beq.n	8002ee2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	e007      	b.n	8002ee2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800

08002ef8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff24 	bl	8003d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a29      	ldr	r2, [pc, #164]	@ (8002fbc <HAL_TIM_PWM_Stop+0xc4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d117      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0x52>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_PWM_Stop+0x52>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_TIM_PWM_Stop+0x82>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_TIM_PWM_Stop+0x82>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Stop+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f88:	e013      	b.n	8002fb2 <HAL_TIM_PWM_Stop+0xba>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Stop+0xa2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f98:	e00b      	b.n	8002fb2 <HAL_TIM_PWM_Stop+0xba>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_PWM_Stop+0xb2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa8:	e003      	b.n	8002fb2 <HAL_TIM_PWM_Stop+0xba>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40012c00 	.word	0x40012c00

08002fc0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_TIM_PWM_Start_IT+0x28>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e022      	b.n	800302e <HAL_TIM_PWM_Start_IT+0x6e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d109      	bne.n	8003002 <HAL_TIM_PWM_Start_IT+0x42>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e015      	b.n	800302e <HAL_TIM_PWM_Start_IT+0x6e>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start_IT+0x5c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e008      	b.n	800302e <HAL_TIM_PWM_Start_IT+0x6e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0a9      	b.n	800318a <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start_IT+0x86>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003044:	e013      	b.n	800306e <HAL_TIM_PWM_Start_IT+0xae>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start_IT+0x96>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003054:	e00b      	b.n	800306e <HAL_TIM_PWM_Start_IT+0xae>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start_IT+0xa6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003064:	e003      	b.n	800306e <HAL_TIM_PWM_Start_IT+0xae>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d841      	bhi.n	80030f8 <HAL_TIM_PWM_Start_IT+0x138>
 8003074:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <HAL_TIM_PWM_Start_IT+0xbc>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030f9 	.word	0x080030f9
 8003084:	080030f9 	.word	0x080030f9
 8003088:	080030f9 	.word	0x080030f9
 800308c:	080030c3 	.word	0x080030c3
 8003090:	080030f9 	.word	0x080030f9
 8003094:	080030f9 	.word	0x080030f9
 8003098:	080030f9 	.word	0x080030f9
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030f9 	.word	0x080030f9
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	080030f9 	.word	0x080030f9
 80030ac:	080030e7 	.word	0x080030e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0202 	orr.w	r2, r2, #2
 80030be:	60da      	str	r2, [r3, #12]
      break;
 80030c0:	e01d      	b.n	80030fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0204 	orr.w	r2, r2, #4
 80030d0:	60da      	str	r2, [r3, #12]
      break;
 80030d2:	e014      	b.n	80030fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	60da      	str	r2, [r3, #12]
      break;
 80030e4:	e00b      	b.n	80030fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0210 	orr.w	r2, r2, #16
 80030f4:	60da      	str	r2, [r3, #12]
      break;
 80030f6:	e002      	b.n	80030fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      break;
 80030fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d141      	bne.n	8003188 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fe23 	bl	8003d58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d107      	bne.n	800312c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800312a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00e      	beq.n	8003154 <HAL_TIM_PWM_Start_IT+0x194>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313e:	d009      	beq.n	8003154 <HAL_TIM_PWM_Start_IT+0x194>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIM_PWM_Start_IT+0x194>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a13      	ldr	r2, [pc, #76]	@ (800319c <HAL_TIM_PWM_Start_IT+0x1dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800

080031a0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d841      	bhi.n	8003238 <HAL_TIM_PWM_Stop_IT+0x98>
 80031b4:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	08003239 	.word	0x08003239
 80031c4:	08003239 	.word	0x08003239
 80031c8:	08003239 	.word	0x08003239
 80031cc:	08003203 	.word	0x08003203
 80031d0:	08003239 	.word	0x08003239
 80031d4:	08003239 	.word	0x08003239
 80031d8:	08003239 	.word	0x08003239
 80031dc:	08003215 	.word	0x08003215
 80031e0:	08003239 	.word	0x08003239
 80031e4:	08003239 	.word	0x08003239
 80031e8:	08003239 	.word	0x08003239
 80031ec:	08003227 	.word	0x08003227
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0202 	bic.w	r2, r2, #2
 80031fe:	60da      	str	r2, [r3, #12]
      break;
 8003200:	e01d      	b.n	800323e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	60da      	str	r2, [r3, #12]
      break;
 8003212:	e014      	b.n	800323e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0208 	bic.w	r2, r2, #8
 8003222:	60da      	str	r2, [r3, #12]
      break;
 8003224:	e00b      	b.n	800323e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0210 	bic.w	r2, r2, #16
 8003234:	60da      	str	r2, [r3, #12]
      break;
 8003236:	e002      	b.n	800323e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      break;
 800323c:	bf00      	nop
  }

  if (status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	6839      	ldr	r1, [r7, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fd83 	bl	8003d58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2a      	ldr	r2, [pc, #168]	@ (8003300 <HAL_TIM_PWM_Stop_IT+0x160>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d117      	bne.n	800328c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <HAL_TIM_PWM_Stop_IT+0xec>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	f240 4344 	movw	r3, #1092	@ 0x444
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_TIM_PWM_Stop_IT+0xec>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800328a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a1a      	ldr	r2, [r3, #32]
 8003292:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10f      	bne.n	80032bc <HAL_TIM_PWM_Stop_IT+0x11c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_PWM_Stop_IT+0x11c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <HAL_TIM_PWM_Stop_IT+0x12c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ca:	e013      	b.n	80032f4 <HAL_TIM_PWM_Stop_IT+0x154>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d104      	bne.n	80032dc <HAL_TIM_PWM_Stop_IT+0x13c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032da:	e00b      	b.n	80032f4 <HAL_TIM_PWM_Stop_IT+0x154>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d104      	bne.n	80032ec <HAL_TIM_PWM_Stop_IT+0x14c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ea:	e003      	b.n	80032f4 <HAL_TIM_PWM_Stop_IT+0x154>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d020      	beq.n	8003368 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0202 	mvn.w	r2, #2
 8003338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa63 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa56 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe f8a9 	bl	80014b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d020      	beq.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa3d 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa30 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7fe f883 	bl	80014b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0208 	mvn.w	r2, #8
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa17 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa0a 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fe f85d 	bl	80014b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d020      	beq.n	800344c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9f1 	bl	800381a <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9e4 	bl	8003808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fe f837 	bl	80014b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0201 	mvn.w	r2, #1
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9c3 	bl	80037f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fd3e 	bl	8003f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9ba 	bl	800382c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0220 	mvn.w	r2, #32
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fd11 	bl	8003efe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0ae      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	f200 809f 	bhi.w	8003650 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003512:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	0800354d 	.word	0x0800354d
 800351c:	08003651 	.word	0x08003651
 8003520:	08003651 	.word	0x08003651
 8003524:	08003651 	.word	0x08003651
 8003528:	0800358d 	.word	0x0800358d
 800352c:	08003651 	.word	0x08003651
 8003530:	08003651 	.word	0x08003651
 8003534:	08003651 	.word	0x08003651
 8003538:	080035cf 	.word	0x080035cf
 800353c:	08003651 	.word	0x08003651
 8003540:	08003651 	.word	0x08003651
 8003544:	08003651 	.word	0x08003651
 8003548:	0800360f 	.word	0x0800360f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f9e2 	bl	800391c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0208 	orr.w	r2, r2, #8
 8003566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
      break;
 800358a:	e064      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fa28 	bl	80039e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]
      break;
 80035cc:	e043      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fa71 	bl	8003abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0208 	orr.w	r2, r2, #8
 80035e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0204 	bic.w	r2, r2, #4
 80035f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69d9      	ldr	r1, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	61da      	str	r2, [r3, #28]
      break;
 800360c:	e023      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fabb 	bl	8003b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	61da      	str	r2, [r3, #28]
      break;
 800364e:	e002      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
      break;
 8003654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIM_ConfigClockSource+0x1c>
 8003680:	2302      	movs	r3, #2
 8003682:	e0b4      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x186>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036bc:	d03e      	beq.n	800373c <HAL_TIM_ConfigClockSource+0xd4>
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c2:	f200 8087 	bhi.w	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ca:	f000 8086 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x172>
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d2:	d87f      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b70      	cmp	r3, #112	@ 0x70
 80036d6:	d01a      	beq.n	800370e <HAL_TIM_ConfigClockSource+0xa6>
 80036d8:	2b70      	cmp	r3, #112	@ 0x70
 80036da:	d87b      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b60      	cmp	r3, #96	@ 0x60
 80036de:	d050      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x11a>
 80036e0:	2b60      	cmp	r3, #96	@ 0x60
 80036e2:	d877      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b50      	cmp	r3, #80	@ 0x50
 80036e6:	d03c      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xfa>
 80036e8:	2b50      	cmp	r3, #80	@ 0x50
 80036ea:	d873      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d058      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x13a>
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d86f      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b30      	cmp	r3, #48	@ 0x30
 80036f6:	d064      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 80036f8:	2b30      	cmp	r3, #48	@ 0x30
 80036fa:	d86b      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d060      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d867      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003708:	2b10      	cmp	r3, #16
 800370a:	d05a      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	e062      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800371e:	f000 fafc 	bl	8003d1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	609a      	str	r2, [r3, #8]
      break;
 800373a:	e04f      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800374c:	f000 fae5 	bl	8003d1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800375e:	609a      	str	r2, [r3, #8]
      break;
 8003760:	e03c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376e:	461a      	mov	r2, r3
 8003770:	f000 fa5c 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2150      	movs	r1, #80	@ 0x50
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fab3 	bl	8003ce6 <TIM_ITRx_SetConfig>
      break;
 8003780:	e02c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800378e:	461a      	mov	r2, r3
 8003790:	f000 fa7a 	bl	8003c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2160      	movs	r1, #96	@ 0x60
 800379a:	4618      	mov	r0, r3
 800379c:	f000 faa3 	bl	8003ce6 <TIM_ITRx_SetConfig>
      break;
 80037a0:	e01c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 fa3c 	bl	8003c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2140      	movs	r1, #64	@ 0x40
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fa93 	bl	8003ce6 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e00c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f000 fa8a 	bl	8003ce6 <TIM_ITRx_SetConfig>
      break;
 80037d2:	e003      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e000      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
	...

08003840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2f      	ldr	r2, [pc, #188]	@ (8003910 <TIM_Base_SetConfig+0xd0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_Base_SetConfig+0x30>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800385e:	d007      	beq.n	8003870 <TIM_Base_SetConfig+0x30>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <TIM_Base_SetConfig+0xd4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_Base_SetConfig+0x30>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a2b      	ldr	r2, [pc, #172]	@ (8003918 <TIM_Base_SetConfig+0xd8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a22      	ldr	r2, [pc, #136]	@ (8003910 <TIM_Base_SetConfig+0xd0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <TIM_Base_SetConfig+0x62>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003890:	d007      	beq.n	80038a2 <TIM_Base_SetConfig+0x62>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1f      	ldr	r2, [pc, #124]	@ (8003914 <TIM_Base_SetConfig+0xd4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_Base_SetConfig+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1e      	ldr	r2, [pc, #120]	@ (8003918 <TIM_Base_SetConfig+0xd8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d108      	bne.n	80038b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <TIM_Base_SetConfig+0xd0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d103      	bne.n	80038e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f023 0201 	bic.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]
  }
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800

0800391c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f023 0201 	bic.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 0302 	bic.w	r3, r3, #2
 8003964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <TIM_OC1_SetConfig+0xc8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10c      	bne.n	8003992 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0308 	bic.w	r3, r3, #8
 800397e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a13      	ldr	r2, [pc, #76]	@ (80039e4 <TIM_OC1_SetConfig+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d111      	bne.n	80039be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00

080039e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 0210 	bic.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0320 	bic.w	r3, r3, #32
 8003a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab8 <TIM_OC2_SetConfig+0xd0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10d      	bne.n	8003a64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <TIM_OC2_SetConfig+0xd0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d113      	bne.n	8003a94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00

08003abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <TIM_OC3_SetConfig+0xd0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10d      	bne.n	8003b36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <TIM_OC3_SetConfig+0xd0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d113      	bne.n	8003b66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	621a      	str	r2, [r3, #32]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40012c00 	.word	0x40012c00

08003b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a0f      	ldr	r2, [pc, #60]	@ (8003c28 <TIM_OC4_SetConfig+0x98>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d109      	bne.n	8003c04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	621a      	str	r2, [r3, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00

08003c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 030a 	bic.w	r3, r3, #10
 8003c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0210 	bic.w	r2, r3, #16
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f043 0307 	orr.w	r3, r3, #7
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	609a      	str	r2, [r3, #8]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	021a      	lsls	r2, r3, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	609a      	str	r2, [r3, #8]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e046      	b.n	8003e46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e04:	d009      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a12      	ldr	r2, [pc, #72]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a10      	ldr	r2, [pc, #64]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10c      	bne.n	8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e03d      	b.n	8003ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e042      	b.n	8003fba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fd fd27 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2224      	movs	r2, #36	@ 0x24
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fd62 	bl	8004a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08a      	sub	sp, #40	@ 0x28
 8003fc6:	af02      	add	r7, sp, #8
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d175      	bne.n	80040ce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_Transmit+0x2c>
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06e      	b.n	80040d0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2221      	movs	r2, #33	@ 0x21
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004000:	f7fd fe50 	bl	8001ca4 <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	d108      	bne.n	800402e <HAL_UART_Transmit+0x6c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d104      	bne.n	800402e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e003      	b.n	8004036 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004036:	e02e      	b.n	8004096 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	2180      	movs	r1, #128	@ 0x80
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fb00 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e03a      	b.n	80040d0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3302      	adds	r3, #2
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	e007      	b.n	8004088 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1cb      	bne.n	8004038 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2200      	movs	r2, #0
 80040a8:	2140      	movs	r1, #64	@ 0x40
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 facc 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e006      	b.n	80040d0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0ba      	sub	sp, #232	@ 0xe8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_UART_IRQHandler+0x66>
 800412a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fbbc 	bl	80048b4 <UART_Receive_IT>
      return;
 800413c:	e25b      	b.n	80045f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800413e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80de 	beq.w	8004304 <HAL_UART_IRQHandler+0x22c>
 8004148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d106      	bne.n	8004162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004158:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80d1 	beq.w	8004304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_UART_IRQHandler+0xae>
 800416e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <HAL_UART_IRQHandler+0xd2>
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f043 0202 	orr.w	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <HAL_UART_IRQHandler+0xf6>
 80041b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d011      	beq.n	80041fe <HAL_UART_IRQHandler+0x126>
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	f043 0208 	orr.w	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 81f2 	beq.w	80045ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_UART_IRQHandler+0x14e>
 8004214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fb47 	bl	80048b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <HAL_UART_IRQHandler+0x17a>
 800424a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04f      	beq.n	80042f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa51 	bl	80046fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d041      	beq.n	80042ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800427c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3314      	adds	r3, #20
 800428e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004292:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800429e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1d9      	bne.n	8004266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d013      	beq.n	80042e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	4a7e      	ldr	r2, [pc, #504]	@ (80044b8 <HAL_UART_IRQHandler+0x3e0>)
 80042c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd fe3e 	bl	8001f48 <HAL_DMA_Abort_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042dc:	4610      	mov	r0, r2
 80042de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e00e      	b.n	8004300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f99c 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e00a      	b.n	8004300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f998 	bl	8004620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e006      	b.n	8004300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f994 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042fe:	e175      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	bf00      	nop
    return;
 8004302:	e173      	b.n	80045ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	2b01      	cmp	r3, #1
 800430a:	f040 814f 	bne.w	80045ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8148 	beq.w	80045ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8141 	beq.w	80045ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80b6 	beq.w	80044bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800435c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8145 	beq.w	80045f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800436a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800436e:	429a      	cmp	r2, r3
 8004370:	f080 813e 	bcs.w	80045f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800437a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b20      	cmp	r3, #32
 8004384:	f000 8088 	beq.w	8004498 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800439e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043b4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1d9      	bne.n	8004388 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3314      	adds	r3, #20
 80043f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004400:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800440a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e1      	bne.n	80043d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004434:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004436:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800443a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e3      	bne.n	8004410 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004468:	f023 0310 	bic.w	r3, r3, #16
 800446c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800447a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800447c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004480:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e3      	bne.n	8004456 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fd1d 	bl	8001ed2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8bf 	bl	8004632 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044b4:	e09c      	b.n	80045f0 <HAL_UART_IRQHandler+0x518>
 80044b6:	bf00      	nop
 80044b8:	080047bf 	.word	0x080047bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 808e 	beq.w	80045f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8089 	beq.w	80045f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004506:	647a      	str	r2, [r7, #68]	@ 0x44
 8004508:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800450c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e3      	bne.n	80044e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3314      	adds	r3, #20
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	623b      	str	r3, [r7, #32]
   return(result);
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800453e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e3      	bne.n	800451a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0310 	bic.w	r3, r3, #16
 8004576:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004584:	61fa      	str	r2, [r7, #28]
 8004586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	617b      	str	r3, [r7, #20]
   return(result);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e3      	bne.n	8004560 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800459e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f844 	bl	8004632 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045aa:	e023      	b.n	80045f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_UART_IRQHandler+0x4f4>
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f90e 	bl	80047e6 <UART_Transmit_IT>
    return;
 80045ca:	e014      	b.n	80045f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00e      	beq.n	80045f6 <HAL_UART_IRQHandler+0x51e>
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f94d 	bl	8004884 <UART_EndTransmit_IT>
    return;
 80045ea:	e004      	b.n	80045f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80045ec:	bf00      	nop
 80045ee:	e002      	b.n	80045f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045f4:	bf00      	nop
  }
}
 80045f6:	37e8      	adds	r7, #232	@ 0xe8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	e03b      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d037      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fd fb1f 	bl	8001ca4 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e03a      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d023      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b80      	cmp	r3, #128	@ 0x80
 800468e:	d020      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d01d      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d116      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f81d 	bl	80046fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2208      	movs	r2, #8
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e00f      	b.n	80046f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d0b4      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b095      	sub	sp, #84	@ 0x54
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004722:	643a      	str	r2, [r7, #64]	@ 0x40
 8004724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3314      	adds	r3, #20
 800473c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	61fb      	str	r3, [r7, #28]
   return(result);
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800475c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	2b01      	cmp	r3, #1
 8004770:	d119      	bne.n	80047a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	60bb      	str	r3, [r7, #8]
   return(result);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f023 0310 	bic.w	r3, r3, #16
 8004788:	647b      	str	r3, [r7, #68]	@ 0x44
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004792:	61ba      	str	r2, [r7, #24]
 8004794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6979      	ldr	r1, [r7, #20]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047b4:	bf00      	nop
 80047b6:	3754      	adds	r7, #84	@ 0x54
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr

080047be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff ff21 	bl	8004620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b085      	sub	sp, #20
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b21      	cmp	r3, #33	@ 0x21
 80047f8:	d13e      	bne.n	8004878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004802:	d114      	bne.n	800482e <UART_Transmit_IT+0x48>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d110      	bne.n	800482e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	1c9a      	adds	r2, r3, #2
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	621a      	str	r2, [r3, #32]
 800482c:	e008      	b.n	8004840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	1c59      	adds	r1, r3, #1
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6211      	str	r1, [r2, #32]
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29b      	uxth	r3, r3
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10f      	bne.n	8004874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	e000      	b.n	800487a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004878:	2302      	movs	r3, #2
  }
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fea9 	bl	80045fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	@ 0x30
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b22      	cmp	r3, #34	@ 0x22
 80048c6:	f040 80ae 	bne.w	8004a26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	d117      	bne.n	8004904 <UART_Receive_IT+0x50>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d113      	bne.n	8004904 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	629a      	str	r2, [r3, #40]	@ 0x28
 8004902:	e026      	b.n	8004952 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d007      	beq.n	8004928 <UART_Receive_IT+0x74>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <UART_Receive_IT+0x82>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e008      	b.n	8004948 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004942:	b2da      	uxtb	r2, r3
 8004944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004946:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4619      	mov	r1, r3
 8004960:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004962:	2b00      	cmp	r3, #0
 8004964:	d15d      	bne.n	8004a22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0220 	bic.w	r2, r2, #32
 8004974:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d135      	bne.n	8004a18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	613b      	str	r3, [r7, #16]
   return(result);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d2:	623a      	str	r2, [r7, #32]
 80049d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	61bb      	str	r3, [r7, #24]
   return(result);
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d10a      	bne.n	8004a0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fe0e 	bl	8004632 <HAL_UARTEx_RxEventCallback>
 8004a16:	e002      	b.n	8004a1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fdf8 	bl	800460e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e002      	b.n	8004a28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3730      	adds	r7, #48	@ 0x30
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a6a:	f023 030c 	bic.w	r3, r3, #12
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	430b      	orrs	r3, r1
 8004a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2c      	ldr	r2, [pc, #176]	@ (8004b44 <UART_SetConfig+0x114>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d103      	bne.n	8004aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe f860 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	e002      	b.n	8004aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aa0:	f7fe f848 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009a      	lsls	r2, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	4a22      	ldr	r2, [pc, #136]	@ (8004b48 <UART_SetConfig+0x118>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	0119      	lsls	r1, r3, #4
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009a      	lsls	r2, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004adc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b48 <UART_SetConfig+0x118>)
 8004ade:	fba3 0302 	umull	r0, r3, r3, r2
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2064      	movs	r0, #100	@ 0x64
 8004ae6:	fb00 f303 	mul.w	r3, r0, r3
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	3332      	adds	r3, #50	@ 0x32
 8004af0:	4a15      	ldr	r2, [pc, #84]	@ (8004b48 <UART_SetConfig+0x118>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004afc:	4419      	add	r1, r3
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009a      	lsls	r2, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b14:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <UART_SetConfig+0x118>)
 8004b16:	fba3 0302 	umull	r0, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2064      	movs	r0, #100	@ 0x64
 8004b1e:	fb00 f303 	mul.w	r3, r0, r3
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	3332      	adds	r3, #50	@ 0x32
 8004b28:	4a07      	ldr	r2, [pc, #28]	@ (8004b48 <UART_SetConfig+0x118>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	f003 020f 	and.w	r2, r3, #15
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	440a      	add	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40013800 	.word	0x40013800
 8004b48:	51eb851f 	.word	0x51eb851f

08004b4c <siprintf>:
 8004b4c:	b40e      	push	{r1, r2, r3}
 8004b4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b52:	b500      	push	{lr}
 8004b54:	b09c      	sub	sp, #112	@ 0x70
 8004b56:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b58:	9002      	str	r0, [sp, #8]
 8004b5a:	9006      	str	r0, [sp, #24]
 8004b5c:	9107      	str	r1, [sp, #28]
 8004b5e:	9104      	str	r1, [sp, #16]
 8004b60:	4808      	ldr	r0, [pc, #32]	@ (8004b84 <siprintf+0x38>)
 8004b62:	4909      	ldr	r1, [pc, #36]	@ (8004b88 <siprintf+0x3c>)
 8004b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b68:	9105      	str	r1, [sp, #20]
 8004b6a:	6800      	ldr	r0, [r0, #0]
 8004b6c:	a902      	add	r1, sp, #8
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f000 f992 	bl	8004e98 <_svfiprintf_r>
 8004b74:	2200      	movs	r2, #0
 8004b76:	9b02      	ldr	r3, [sp, #8]
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	b01c      	add	sp, #112	@ 0x70
 8004b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b80:	b003      	add	sp, #12
 8004b82:	4770      	bx	lr
 8004b84:	2000005c 	.word	0x2000005c
 8004b88:	ffff0208 	.word	0xffff0208

08004b8c <memset>:
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4402      	add	r2, r0
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d100      	bne.n	8004b96 <memset+0xa>
 8004b94:	4770      	bx	lr
 8004b96:	f803 1b01 	strb.w	r1, [r3], #1
 8004b9a:	e7f9      	b.n	8004b90 <memset+0x4>

08004b9c <__errno>:
 8004b9c:	4b01      	ldr	r3, [pc, #4]	@ (8004ba4 <__errno+0x8>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	2000005c 	.word	0x2000005c

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	2600      	movs	r6, #0
 8004bac:	4d0c      	ldr	r5, [pc, #48]	@ (8004be0 <__libc_init_array+0x38>)
 8004bae:	4c0d      	ldr	r4, [pc, #52]	@ (8004be4 <__libc_init_array+0x3c>)
 8004bb0:	1b64      	subs	r4, r4, r5
 8004bb2:	10a4      	asrs	r4, r4, #2
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	f000 fc78 	bl	80054ac <_init>
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	4d0a      	ldr	r5, [pc, #40]	@ (8004be8 <__libc_init_array+0x40>)
 8004bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8004bec <__libc_init_array+0x44>)
 8004bc2:	1b64      	subs	r4, r4, r5
 8004bc4:	10a4      	asrs	r4, r4, #2
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	08005564 	.word	0x08005564
 8004be4:	08005564 	.word	0x08005564
 8004be8:	08005564 	.word	0x08005564
 8004bec:	08005568 	.word	0x08005568

08004bf0 <__retarget_lock_acquire_recursive>:
 8004bf0:	4770      	bx	lr

08004bf2 <__retarget_lock_release_recursive>:
 8004bf2:	4770      	bx	lr

08004bf4 <_free_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	d040      	beq.n	8004c7e <_free_r+0x8a>
 8004bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c00:	1f0c      	subs	r4, r1, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bfb8      	it	lt
 8004c06:	18e4      	addlt	r4, r4, r3
 8004c08:	f000 f8de 	bl	8004dc8 <__malloc_lock>
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <_free_r+0x8c>)
 8004c0e:	6813      	ldr	r3, [r2, #0]
 8004c10:	b933      	cbnz	r3, 8004c20 <_free_r+0x2c>
 8004c12:	6063      	str	r3, [r4, #4]
 8004c14:	6014      	str	r4, [r2, #0]
 8004c16:	4628      	mov	r0, r5
 8004c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c1c:	f000 b8da 	b.w	8004dd4 <__malloc_unlock>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d908      	bls.n	8004c36 <_free_r+0x42>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	1821      	adds	r1, r4, r0
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	bf01      	itttt	eq
 8004c2c:	6819      	ldreq	r1, [r3, #0]
 8004c2e:	685b      	ldreq	r3, [r3, #4]
 8004c30:	1809      	addeq	r1, r1, r0
 8004c32:	6021      	streq	r1, [r4, #0]
 8004c34:	e7ed      	b.n	8004c12 <_free_r+0x1e>
 8004c36:	461a      	mov	r2, r3
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b10b      	cbz	r3, 8004c40 <_free_r+0x4c>
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d9fa      	bls.n	8004c36 <_free_r+0x42>
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	1850      	adds	r0, r2, r1
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	d10b      	bne.n	8004c60 <_free_r+0x6c>
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	4401      	add	r1, r0
 8004c4c:	1850      	adds	r0, r2, r1
 8004c4e:	4283      	cmp	r3, r0
 8004c50:	6011      	str	r1, [r2, #0]
 8004c52:	d1e0      	bne.n	8004c16 <_free_r+0x22>
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4408      	add	r0, r1
 8004c5a:	6010      	str	r0, [r2, #0]
 8004c5c:	6053      	str	r3, [r2, #4]
 8004c5e:	e7da      	b.n	8004c16 <_free_r+0x22>
 8004c60:	d902      	bls.n	8004c68 <_free_r+0x74>
 8004c62:	230c      	movs	r3, #12
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	e7d6      	b.n	8004c16 <_free_r+0x22>
 8004c68:	6820      	ldr	r0, [r4, #0]
 8004c6a:	1821      	adds	r1, r4, r0
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf01      	itttt	eq
 8004c70:	6819      	ldreq	r1, [r3, #0]
 8004c72:	685b      	ldreq	r3, [r3, #4]
 8004c74:	1809      	addeq	r1, r1, r0
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	6054      	str	r4, [r2, #4]
 8004c7c:	e7cb      	b.n	8004c16 <_free_r+0x22>
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000354 	.word	0x20000354

08004c84 <sbrk_aligned>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4e0f      	ldr	r6, [pc, #60]	@ (8004cc4 <sbrk_aligned+0x40>)
 8004c88:	460c      	mov	r4, r1
 8004c8a:	6831      	ldr	r1, [r6, #0]
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	b911      	cbnz	r1, 8004c96 <sbrk_aligned+0x12>
 8004c90:	f000 fbaa 	bl	80053e8 <_sbrk_r>
 8004c94:	6030      	str	r0, [r6, #0]
 8004c96:	4621      	mov	r1, r4
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 fba5 	bl	80053e8 <_sbrk_r>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	d103      	bne.n	8004caa <sbrk_aligned+0x26>
 8004ca2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
 8004caa:	1cc4      	adds	r4, r0, #3
 8004cac:	f024 0403 	bic.w	r4, r4, #3
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d0f8      	beq.n	8004ca6 <sbrk_aligned+0x22>
 8004cb4:	1a21      	subs	r1, r4, r0
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fb96 	bl	80053e8 <_sbrk_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d1f2      	bne.n	8004ca6 <sbrk_aligned+0x22>
 8004cc0:	e7ef      	b.n	8004ca2 <sbrk_aligned+0x1e>
 8004cc2:	bf00      	nop
 8004cc4:	20000350 	.word	0x20000350

08004cc8 <_malloc_r>:
 8004cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	1ccd      	adds	r5, r1, #3
 8004cce:	f025 0503 	bic.w	r5, r5, #3
 8004cd2:	3508      	adds	r5, #8
 8004cd4:	2d0c      	cmp	r5, #12
 8004cd6:	bf38      	it	cc
 8004cd8:	250c      	movcc	r5, #12
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	4606      	mov	r6, r0
 8004cde:	db01      	blt.n	8004ce4 <_malloc_r+0x1c>
 8004ce0:	42a9      	cmp	r1, r5
 8004ce2:	d904      	bls.n	8004cee <_malloc_r+0x26>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dc4 <_malloc_r+0xfc>
 8004cf2:	f000 f869 	bl	8004dc8 <__malloc_lock>
 8004cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	bb44      	cbnz	r4, 8004d50 <_malloc_r+0x88>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	f7ff ffbf 	bl	8004c84 <sbrk_aligned>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	4604      	mov	r4, r0
 8004d0a:	d158      	bne.n	8004dbe <_malloc_r+0xf6>
 8004d0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d10:	4627      	mov	r7, r4
 8004d12:	2f00      	cmp	r7, #0
 8004d14:	d143      	bne.n	8004d9e <_malloc_r+0xd6>
 8004d16:	2c00      	cmp	r4, #0
 8004d18:	d04b      	beq.n	8004db2 <_malloc_r+0xea>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	4630      	mov	r0, r6
 8004d20:	eb04 0903 	add.w	r9, r4, r3
 8004d24:	f000 fb60 	bl	80053e8 <_sbrk_r>
 8004d28:	4581      	cmp	r9, r0
 8004d2a:	d142      	bne.n	8004db2 <_malloc_r+0xea>
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	4630      	mov	r0, r6
 8004d30:	1a6d      	subs	r5, r5, r1
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7ff ffa6 	bl	8004c84 <sbrk_aligned>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d03a      	beq.n	8004db2 <_malloc_r+0xea>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	442b      	add	r3, r5
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	f8d8 3000 	ldr.w	r3, [r8]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	bb62      	cbnz	r2, 8004da4 <_malloc_r+0xdc>
 8004d4a:	f8c8 7000 	str.w	r7, [r8]
 8004d4e:	e00f      	b.n	8004d70 <_malloc_r+0xa8>
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	1b52      	subs	r2, r2, r5
 8004d54:	d420      	bmi.n	8004d98 <_malloc_r+0xd0>
 8004d56:	2a0b      	cmp	r2, #11
 8004d58:	d917      	bls.n	8004d8a <_malloc_r+0xc2>
 8004d5a:	1961      	adds	r1, r4, r5
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	6025      	str	r5, [r4, #0]
 8004d60:	bf18      	it	ne
 8004d62:	6059      	strne	r1, [r3, #4]
 8004d64:	6863      	ldr	r3, [r4, #4]
 8004d66:	bf08      	it	eq
 8004d68:	f8c8 1000 	streq.w	r1, [r8]
 8004d6c:	5162      	str	r2, [r4, r5]
 8004d6e:	604b      	str	r3, [r1, #4]
 8004d70:	4630      	mov	r0, r6
 8004d72:	f000 f82f 	bl	8004dd4 <__malloc_unlock>
 8004d76:	f104 000b 	add.w	r0, r4, #11
 8004d7a:	1d23      	adds	r3, r4, #4
 8004d7c:	f020 0007 	bic.w	r0, r0, #7
 8004d80:	1ac2      	subs	r2, r0, r3
 8004d82:	bf1c      	itt	ne
 8004d84:	1a1b      	subne	r3, r3, r0
 8004d86:	50a3      	strne	r3, [r4, r2]
 8004d88:	e7af      	b.n	8004cea <_malloc_r+0x22>
 8004d8a:	6862      	ldr	r2, [r4, #4]
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	bf0c      	ite	eq
 8004d90:	f8c8 2000 	streq.w	r2, [r8]
 8004d94:	605a      	strne	r2, [r3, #4]
 8004d96:	e7eb      	b.n	8004d70 <_malloc_r+0xa8>
 8004d98:	4623      	mov	r3, r4
 8004d9a:	6864      	ldr	r4, [r4, #4]
 8004d9c:	e7ae      	b.n	8004cfc <_malloc_r+0x34>
 8004d9e:	463c      	mov	r4, r7
 8004da0:	687f      	ldr	r7, [r7, #4]
 8004da2:	e7b6      	b.n	8004d12 <_malloc_r+0x4a>
 8004da4:	461a      	mov	r2, r3
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d1fb      	bne.n	8004da4 <_malloc_r+0xdc>
 8004dac:	2300      	movs	r3, #0
 8004dae:	6053      	str	r3, [r2, #4]
 8004db0:	e7de      	b.n	8004d70 <_malloc_r+0xa8>
 8004db2:	230c      	movs	r3, #12
 8004db4:	4630      	mov	r0, r6
 8004db6:	6033      	str	r3, [r6, #0]
 8004db8:	f000 f80c 	bl	8004dd4 <__malloc_unlock>
 8004dbc:	e794      	b.n	8004ce8 <_malloc_r+0x20>
 8004dbe:	6005      	str	r5, [r0, #0]
 8004dc0:	e7d6      	b.n	8004d70 <_malloc_r+0xa8>
 8004dc2:	bf00      	nop
 8004dc4:	20000354 	.word	0x20000354

08004dc8 <__malloc_lock>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	@ (8004dd0 <__malloc_lock+0x8>)
 8004dca:	f7ff bf11 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004dce:	bf00      	nop
 8004dd0:	2000034c 	.word	0x2000034c

08004dd4 <__malloc_unlock>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	@ (8004ddc <__malloc_unlock+0x8>)
 8004dd6:	f7ff bf0c 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004dda:	bf00      	nop
 8004ddc:	2000034c 	.word	0x2000034c

08004de0 <__ssputs_r>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	461f      	mov	r7, r3
 8004de6:	688e      	ldr	r6, [r1, #8]
 8004de8:	4682      	mov	sl, r0
 8004dea:	42be      	cmp	r6, r7
 8004dec:	460c      	mov	r4, r1
 8004dee:	4690      	mov	r8, r2
 8004df0:	680b      	ldr	r3, [r1, #0]
 8004df2:	d82d      	bhi.n	8004e50 <__ssputs_r+0x70>
 8004df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004df8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dfc:	d026      	beq.n	8004e4c <__ssputs_r+0x6c>
 8004dfe:	6965      	ldr	r5, [r4, #20]
 8004e00:	6909      	ldr	r1, [r1, #16]
 8004e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e06:	eba3 0901 	sub.w	r9, r3, r1
 8004e0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e0e:	1c7b      	adds	r3, r7, #1
 8004e10:	444b      	add	r3, r9
 8004e12:	106d      	asrs	r5, r5, #1
 8004e14:	429d      	cmp	r5, r3
 8004e16:	bf38      	it	cc
 8004e18:	461d      	movcc	r5, r3
 8004e1a:	0553      	lsls	r3, r2, #21
 8004e1c:	d527      	bpl.n	8004e6e <__ssputs_r+0x8e>
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7ff ff52 	bl	8004cc8 <_malloc_r>
 8004e24:	4606      	mov	r6, r0
 8004e26:	b360      	cbz	r0, 8004e82 <__ssputs_r+0xa2>
 8004e28:	464a      	mov	r2, r9
 8004e2a:	6921      	ldr	r1, [r4, #16]
 8004e2c:	f000 fafa 	bl	8005424 <memcpy>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	6126      	str	r6, [r4, #16]
 8004e3e:	444e      	add	r6, r9
 8004e40:	6026      	str	r6, [r4, #0]
 8004e42:	463e      	mov	r6, r7
 8004e44:	6165      	str	r5, [r4, #20]
 8004e46:	eba5 0509 	sub.w	r5, r5, r9
 8004e4a:	60a5      	str	r5, [r4, #8]
 8004e4c:	42be      	cmp	r6, r7
 8004e4e:	d900      	bls.n	8004e52 <__ssputs_r+0x72>
 8004e50:	463e      	mov	r6, r7
 8004e52:	4632      	mov	r2, r6
 8004e54:	4641      	mov	r1, r8
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	f000 faac 	bl	80053b4 <memmove>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	1b9b      	subs	r3, r3, r6
 8004e62:	60a3      	str	r3, [r4, #8]
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	4433      	add	r3, r6
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6e:	462a      	mov	r2, r5
 8004e70:	f000 fae6 	bl	8005440 <_realloc_r>
 8004e74:	4606      	mov	r6, r0
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d1e0      	bne.n	8004e3c <__ssputs_r+0x5c>
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	6921      	ldr	r1, [r4, #16]
 8004e7e:	f7ff feb9 	bl	8004bf4 <_free_r>
 8004e82:	230c      	movs	r3, #12
 8004e84:	f8ca 3000 	str.w	r3, [sl]
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	e7e9      	b.n	8004e6a <__ssputs_r+0x8a>
	...

08004e98 <_svfiprintf_r>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4698      	mov	r8, r3
 8004e9e:	898b      	ldrh	r3, [r1, #12]
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	061b      	lsls	r3, r3, #24
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	b09d      	sub	sp, #116	@ 0x74
 8004eaa:	d510      	bpl.n	8004ece <_svfiprintf_r+0x36>
 8004eac:	690b      	ldr	r3, [r1, #16]
 8004eae:	b973      	cbnz	r3, 8004ece <_svfiprintf_r+0x36>
 8004eb0:	2140      	movs	r1, #64	@ 0x40
 8004eb2:	f7ff ff09 	bl	8004cc8 <_malloc_r>
 8004eb6:	6028      	str	r0, [r5, #0]
 8004eb8:	6128      	str	r0, [r5, #16]
 8004eba:	b930      	cbnz	r0, 8004eca <_svfiprintf_r+0x32>
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	b01d      	add	sp, #116	@ 0x74
 8004ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eca:	2340      	movs	r3, #64	@ 0x40
 8004ecc:	616b      	str	r3, [r5, #20]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ed2:	2320      	movs	r3, #32
 8004ed4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ed8:	2330      	movs	r3, #48	@ 0x30
 8004eda:	f04f 0901 	mov.w	r9, #1
 8004ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800507c <_svfiprintf_r+0x1e4>
 8004ee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eea:	4623      	mov	r3, r4
 8004eec:	469a      	mov	sl, r3
 8004eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef2:	b10a      	cbz	r2, 8004ef8 <_svfiprintf_r+0x60>
 8004ef4:	2a25      	cmp	r2, #37	@ 0x25
 8004ef6:	d1f9      	bne.n	8004eec <_svfiprintf_r+0x54>
 8004ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8004efc:	d00b      	beq.n	8004f16 <_svfiprintf_r+0x7e>
 8004efe:	465b      	mov	r3, fp
 8004f00:	4622      	mov	r2, r4
 8004f02:	4629      	mov	r1, r5
 8004f04:	4638      	mov	r0, r7
 8004f06:	f7ff ff6b 	bl	8004de0 <__ssputs_r>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	f000 80a7 	beq.w	800505e <_svfiprintf_r+0x1c6>
 8004f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f12:	445a      	add	r2, fp
 8004f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f16:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 809f 	beq.w	800505e <_svfiprintf_r+0x1c6>
 8004f20:	2300      	movs	r3, #0
 8004f22:	f04f 32ff 	mov.w	r2, #4294967295
 8004f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f2a:	f10a 0a01 	add.w	sl, sl, #1
 8004f2e:	9304      	str	r3, [sp, #16]
 8004f30:	9307      	str	r3, [sp, #28]
 8004f32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f38:	4654      	mov	r4, sl
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f40:	484e      	ldr	r0, [pc, #312]	@ (800507c <_svfiprintf_r+0x1e4>)
 8004f42:	f000 fa61 	bl	8005408 <memchr>
 8004f46:	9a04      	ldr	r2, [sp, #16]
 8004f48:	b9d8      	cbnz	r0, 8004f82 <_svfiprintf_r+0xea>
 8004f4a:	06d0      	lsls	r0, r2, #27
 8004f4c:	bf44      	itt	mi
 8004f4e:	2320      	movmi	r3, #32
 8004f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f54:	0711      	lsls	r1, r2, #28
 8004f56:	bf44      	itt	mi
 8004f58:	232b      	movmi	r3, #43	@ 0x2b
 8004f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f64:	d015      	beq.n	8004f92 <_svfiprintf_r+0xfa>
 8004f66:	4654      	mov	r4, sl
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f04f 0c0a 	mov.w	ip, #10
 8004f6e:	9a07      	ldr	r2, [sp, #28]
 8004f70:	4621      	mov	r1, r4
 8004f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f76:	3b30      	subs	r3, #48	@ 0x30
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d94b      	bls.n	8005014 <_svfiprintf_r+0x17c>
 8004f7c:	b1b0      	cbz	r0, 8004fac <_svfiprintf_r+0x114>
 8004f7e:	9207      	str	r2, [sp, #28]
 8004f80:	e014      	b.n	8004fac <_svfiprintf_r+0x114>
 8004f82:	eba0 0308 	sub.w	r3, r0, r8
 8004f86:	fa09 f303 	lsl.w	r3, r9, r3
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	46a2      	mov	sl, r4
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	e7d2      	b.n	8004f38 <_svfiprintf_r+0xa0>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	1d19      	adds	r1, r3, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	9103      	str	r1, [sp, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bfbb      	ittet	lt
 8004f9e:	425b      	neglt	r3, r3
 8004fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8004fa4:	9307      	strge	r3, [sp, #28]
 8004fa6:	9307      	strlt	r3, [sp, #28]
 8004fa8:	bfb8      	it	lt
 8004faa:	9204      	strlt	r2, [sp, #16]
 8004fac:	7823      	ldrb	r3, [r4, #0]
 8004fae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fb0:	d10a      	bne.n	8004fc8 <_svfiprintf_r+0x130>
 8004fb2:	7863      	ldrb	r3, [r4, #1]
 8004fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb6:	d132      	bne.n	800501e <_svfiprintf_r+0x186>
 8004fb8:	9b03      	ldr	r3, [sp, #12]
 8004fba:	3402      	adds	r4, #2
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	9203      	str	r2, [sp, #12]
 8004fc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fc6:	9305      	str	r3, [sp, #20]
 8004fc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005080 <_svfiprintf_r+0x1e8>
 8004fcc:	2203      	movs	r2, #3
 8004fce:	4650      	mov	r0, sl
 8004fd0:	7821      	ldrb	r1, [r4, #0]
 8004fd2:	f000 fa19 	bl	8005408 <memchr>
 8004fd6:	b138      	cbz	r0, 8004fe8 <_svfiprintf_r+0x150>
 8004fd8:	2240      	movs	r2, #64	@ 0x40
 8004fda:	9b04      	ldr	r3, [sp, #16]
 8004fdc:	eba0 000a 	sub.w	r0, r0, sl
 8004fe0:	4082      	lsls	r2, r0
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	3401      	adds	r4, #1
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fec:	2206      	movs	r2, #6
 8004fee:	4825      	ldr	r0, [pc, #148]	@ (8005084 <_svfiprintf_r+0x1ec>)
 8004ff0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ff4:	f000 fa08 	bl	8005408 <memchr>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d036      	beq.n	800506a <_svfiprintf_r+0x1d2>
 8004ffc:	4b22      	ldr	r3, [pc, #136]	@ (8005088 <_svfiprintf_r+0x1f0>)
 8004ffe:	bb1b      	cbnz	r3, 8005048 <_svfiprintf_r+0x1b0>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	3307      	adds	r3, #7
 8005004:	f023 0307 	bic.w	r3, r3, #7
 8005008:	3308      	adds	r3, #8
 800500a:	9303      	str	r3, [sp, #12]
 800500c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800500e:	4433      	add	r3, r6
 8005010:	9309      	str	r3, [sp, #36]	@ 0x24
 8005012:	e76a      	b.n	8004eea <_svfiprintf_r+0x52>
 8005014:	460c      	mov	r4, r1
 8005016:	2001      	movs	r0, #1
 8005018:	fb0c 3202 	mla	r2, ip, r2, r3
 800501c:	e7a8      	b.n	8004f70 <_svfiprintf_r+0xd8>
 800501e:	2300      	movs	r3, #0
 8005020:	f04f 0c0a 	mov.w	ip, #10
 8005024:	4619      	mov	r1, r3
 8005026:	3401      	adds	r4, #1
 8005028:	9305      	str	r3, [sp, #20]
 800502a:	4620      	mov	r0, r4
 800502c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005030:	3a30      	subs	r2, #48	@ 0x30
 8005032:	2a09      	cmp	r2, #9
 8005034:	d903      	bls.n	800503e <_svfiprintf_r+0x1a6>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0c6      	beq.n	8004fc8 <_svfiprintf_r+0x130>
 800503a:	9105      	str	r1, [sp, #20]
 800503c:	e7c4      	b.n	8004fc8 <_svfiprintf_r+0x130>
 800503e:	4604      	mov	r4, r0
 8005040:	2301      	movs	r3, #1
 8005042:	fb0c 2101 	mla	r1, ip, r1, r2
 8005046:	e7f0      	b.n	800502a <_svfiprintf_r+0x192>
 8005048:	ab03      	add	r3, sp, #12
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	462a      	mov	r2, r5
 800504e:	4638      	mov	r0, r7
 8005050:	4b0e      	ldr	r3, [pc, #56]	@ (800508c <_svfiprintf_r+0x1f4>)
 8005052:	a904      	add	r1, sp, #16
 8005054:	f3af 8000 	nop.w
 8005058:	1c42      	adds	r2, r0, #1
 800505a:	4606      	mov	r6, r0
 800505c:	d1d6      	bne.n	800500c <_svfiprintf_r+0x174>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	065b      	lsls	r3, r3, #25
 8005062:	f53f af2d 	bmi.w	8004ec0 <_svfiprintf_r+0x28>
 8005066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005068:	e72c      	b.n	8004ec4 <_svfiprintf_r+0x2c>
 800506a:	ab03      	add	r3, sp, #12
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	462a      	mov	r2, r5
 8005070:	4638      	mov	r0, r7
 8005072:	4b06      	ldr	r3, [pc, #24]	@ (800508c <_svfiprintf_r+0x1f4>)
 8005074:	a904      	add	r1, sp, #16
 8005076:	f000 f87d 	bl	8005174 <_printf_i>
 800507a:	e7ed      	b.n	8005058 <_svfiprintf_r+0x1c0>
 800507c:	08005526 	.word	0x08005526
 8005080:	0800552c 	.word	0x0800552c
 8005084:	08005530 	.word	0x08005530
 8005088:	00000000 	.word	0x00000000
 800508c:	08004de1 	.word	0x08004de1

08005090 <_printf_common>:
 8005090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005094:	4616      	mov	r6, r2
 8005096:	4698      	mov	r8, r3
 8005098:	688a      	ldr	r2, [r1, #8]
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	4607      	mov	r7, r0
 800509e:	4293      	cmp	r3, r2
 80050a0:	bfb8      	it	lt
 80050a2:	4613      	movlt	r3, r2
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050aa:	460c      	mov	r4, r1
 80050ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050b0:	b10a      	cbz	r2, 80050b6 <_printf_common+0x26>
 80050b2:	3301      	adds	r3, #1
 80050b4:	6033      	str	r3, [r6, #0]
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	0699      	lsls	r1, r3, #26
 80050ba:	bf42      	ittt	mi
 80050bc:	6833      	ldrmi	r3, [r6, #0]
 80050be:	3302      	addmi	r3, #2
 80050c0:	6033      	strmi	r3, [r6, #0]
 80050c2:	6825      	ldr	r5, [r4, #0]
 80050c4:	f015 0506 	ands.w	r5, r5, #6
 80050c8:	d106      	bne.n	80050d8 <_printf_common+0x48>
 80050ca:	f104 0a19 	add.w	sl, r4, #25
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	6832      	ldr	r2, [r6, #0]
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dc2b      	bgt.n	8005130 <_printf_common+0xa0>
 80050d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050dc:	6822      	ldr	r2, [r4, #0]
 80050de:	3b00      	subs	r3, #0
 80050e0:	bf18      	it	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	0692      	lsls	r2, r2, #26
 80050e6:	d430      	bmi.n	800514a <_printf_common+0xba>
 80050e8:	4641      	mov	r1, r8
 80050ea:	4638      	mov	r0, r7
 80050ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050f0:	47c8      	blx	r9
 80050f2:	3001      	adds	r0, #1
 80050f4:	d023      	beq.n	800513e <_printf_common+0xae>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	6922      	ldr	r2, [r4, #16]
 80050fa:	f003 0306 	and.w	r3, r3, #6
 80050fe:	2b04      	cmp	r3, #4
 8005100:	bf14      	ite	ne
 8005102:	2500      	movne	r5, #0
 8005104:	6833      	ldreq	r3, [r6, #0]
 8005106:	f04f 0600 	mov.w	r6, #0
 800510a:	bf08      	it	eq
 800510c:	68e5      	ldreq	r5, [r4, #12]
 800510e:	f104 041a 	add.w	r4, r4, #26
 8005112:	bf08      	it	eq
 8005114:	1aed      	subeq	r5, r5, r3
 8005116:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800511a:	bf08      	it	eq
 800511c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005120:	4293      	cmp	r3, r2
 8005122:	bfc4      	itt	gt
 8005124:	1a9b      	subgt	r3, r3, r2
 8005126:	18ed      	addgt	r5, r5, r3
 8005128:	42b5      	cmp	r5, r6
 800512a:	d11a      	bne.n	8005162 <_printf_common+0xd2>
 800512c:	2000      	movs	r0, #0
 800512e:	e008      	b.n	8005142 <_printf_common+0xb2>
 8005130:	2301      	movs	r3, #1
 8005132:	4652      	mov	r2, sl
 8005134:	4641      	mov	r1, r8
 8005136:	4638      	mov	r0, r7
 8005138:	47c8      	blx	r9
 800513a:	3001      	adds	r0, #1
 800513c:	d103      	bne.n	8005146 <_printf_common+0xb6>
 800513e:	f04f 30ff 	mov.w	r0, #4294967295
 8005142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005146:	3501      	adds	r5, #1
 8005148:	e7c1      	b.n	80050ce <_printf_common+0x3e>
 800514a:	2030      	movs	r0, #48	@ 0x30
 800514c:	18e1      	adds	r1, r4, r3
 800514e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005158:	4422      	add	r2, r4
 800515a:	3302      	adds	r3, #2
 800515c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005160:	e7c2      	b.n	80050e8 <_printf_common+0x58>
 8005162:	2301      	movs	r3, #1
 8005164:	4622      	mov	r2, r4
 8005166:	4641      	mov	r1, r8
 8005168:	4638      	mov	r0, r7
 800516a:	47c8      	blx	r9
 800516c:	3001      	adds	r0, #1
 800516e:	d0e6      	beq.n	800513e <_printf_common+0xae>
 8005170:	3601      	adds	r6, #1
 8005172:	e7d9      	b.n	8005128 <_printf_common+0x98>

08005174 <_printf_i>:
 8005174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	7e0f      	ldrb	r7, [r1, #24]
 800517a:	4691      	mov	r9, r2
 800517c:	2f78      	cmp	r7, #120	@ 0x78
 800517e:	4680      	mov	r8, r0
 8005180:	460c      	mov	r4, r1
 8005182:	469a      	mov	sl, r3
 8005184:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800518a:	d807      	bhi.n	800519c <_printf_i+0x28>
 800518c:	2f62      	cmp	r7, #98	@ 0x62
 800518e:	d80a      	bhi.n	80051a6 <_printf_i+0x32>
 8005190:	2f00      	cmp	r7, #0
 8005192:	f000 80d3 	beq.w	800533c <_printf_i+0x1c8>
 8005196:	2f58      	cmp	r7, #88	@ 0x58
 8005198:	f000 80ba 	beq.w	8005310 <_printf_i+0x19c>
 800519c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051a4:	e03a      	b.n	800521c <_printf_i+0xa8>
 80051a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051aa:	2b15      	cmp	r3, #21
 80051ac:	d8f6      	bhi.n	800519c <_printf_i+0x28>
 80051ae:	a101      	add	r1, pc, #4	@ (adr r1, 80051b4 <_printf_i+0x40>)
 80051b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	08005221 	.word	0x08005221
 80051bc:	0800519d 	.word	0x0800519d
 80051c0:	0800519d 	.word	0x0800519d
 80051c4:	0800519d 	.word	0x0800519d
 80051c8:	0800519d 	.word	0x0800519d
 80051cc:	08005221 	.word	0x08005221
 80051d0:	0800519d 	.word	0x0800519d
 80051d4:	0800519d 	.word	0x0800519d
 80051d8:	0800519d 	.word	0x0800519d
 80051dc:	0800519d 	.word	0x0800519d
 80051e0:	08005323 	.word	0x08005323
 80051e4:	0800524b 	.word	0x0800524b
 80051e8:	080052dd 	.word	0x080052dd
 80051ec:	0800519d 	.word	0x0800519d
 80051f0:	0800519d 	.word	0x0800519d
 80051f4:	08005345 	.word	0x08005345
 80051f8:	0800519d 	.word	0x0800519d
 80051fc:	0800524b 	.word	0x0800524b
 8005200:	0800519d 	.word	0x0800519d
 8005204:	0800519d 	.word	0x0800519d
 8005208:	080052e5 	.word	0x080052e5
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6032      	str	r2, [r6, #0]
 8005214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800521c:	2301      	movs	r3, #1
 800521e:	e09e      	b.n	800535e <_printf_i+0x1ea>
 8005220:	6833      	ldr	r3, [r6, #0]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	6031      	str	r1, [r6, #0]
 8005228:	0606      	lsls	r6, r0, #24
 800522a:	d501      	bpl.n	8005230 <_printf_i+0xbc>
 800522c:	681d      	ldr	r5, [r3, #0]
 800522e:	e003      	b.n	8005238 <_printf_i+0xc4>
 8005230:	0645      	lsls	r5, r0, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0xb8>
 8005234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005238:	2d00      	cmp	r5, #0
 800523a:	da03      	bge.n	8005244 <_printf_i+0xd0>
 800523c:	232d      	movs	r3, #45	@ 0x2d
 800523e:	426d      	negs	r5, r5
 8005240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005244:	230a      	movs	r3, #10
 8005246:	4859      	ldr	r0, [pc, #356]	@ (80053ac <_printf_i+0x238>)
 8005248:	e011      	b.n	800526e <_printf_i+0xfa>
 800524a:	6821      	ldr	r1, [r4, #0]
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	0608      	lsls	r0, r1, #24
 8005250:	f853 5b04 	ldr.w	r5, [r3], #4
 8005254:	d402      	bmi.n	800525c <_printf_i+0xe8>
 8005256:	0649      	lsls	r1, r1, #25
 8005258:	bf48      	it	mi
 800525a:	b2ad      	uxthmi	r5, r5
 800525c:	2f6f      	cmp	r7, #111	@ 0x6f
 800525e:	6033      	str	r3, [r6, #0]
 8005260:	bf14      	ite	ne
 8005262:	230a      	movne	r3, #10
 8005264:	2308      	moveq	r3, #8
 8005266:	4851      	ldr	r0, [pc, #324]	@ (80053ac <_printf_i+0x238>)
 8005268:	2100      	movs	r1, #0
 800526a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800526e:	6866      	ldr	r6, [r4, #4]
 8005270:	2e00      	cmp	r6, #0
 8005272:	bfa8      	it	ge
 8005274:	6821      	ldrge	r1, [r4, #0]
 8005276:	60a6      	str	r6, [r4, #8]
 8005278:	bfa4      	itt	ge
 800527a:	f021 0104 	bicge.w	r1, r1, #4
 800527e:	6021      	strge	r1, [r4, #0]
 8005280:	b90d      	cbnz	r5, 8005286 <_printf_i+0x112>
 8005282:	2e00      	cmp	r6, #0
 8005284:	d04b      	beq.n	800531e <_printf_i+0x1aa>
 8005286:	4616      	mov	r6, r2
 8005288:	fbb5 f1f3 	udiv	r1, r5, r3
 800528c:	fb03 5711 	mls	r7, r3, r1, r5
 8005290:	5dc7      	ldrb	r7, [r0, r7]
 8005292:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005296:	462f      	mov	r7, r5
 8005298:	42bb      	cmp	r3, r7
 800529a:	460d      	mov	r5, r1
 800529c:	d9f4      	bls.n	8005288 <_printf_i+0x114>
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d10b      	bne.n	80052ba <_printf_i+0x146>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	07df      	lsls	r7, r3, #31
 80052a6:	d508      	bpl.n	80052ba <_printf_i+0x146>
 80052a8:	6923      	ldr	r3, [r4, #16]
 80052aa:	6861      	ldr	r1, [r4, #4]
 80052ac:	4299      	cmp	r1, r3
 80052ae:	bfde      	ittt	le
 80052b0:	2330      	movle	r3, #48	@ 0x30
 80052b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ba:	1b92      	subs	r2, r2, r6
 80052bc:	6122      	str	r2, [r4, #16]
 80052be:	464b      	mov	r3, r9
 80052c0:	4621      	mov	r1, r4
 80052c2:	4640      	mov	r0, r8
 80052c4:	f8cd a000 	str.w	sl, [sp]
 80052c8:	aa03      	add	r2, sp, #12
 80052ca:	f7ff fee1 	bl	8005090 <_printf_common>
 80052ce:	3001      	adds	r0, #1
 80052d0:	d14a      	bne.n	8005368 <_printf_i+0x1f4>
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	b004      	add	sp, #16
 80052d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	f043 0320 	orr.w	r3, r3, #32
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	2778      	movs	r7, #120	@ 0x78
 80052e6:	4832      	ldr	r0, [pc, #200]	@ (80053b0 <_printf_i+0x23c>)
 80052e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	6831      	ldr	r1, [r6, #0]
 80052f0:	061f      	lsls	r7, r3, #24
 80052f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80052f6:	d402      	bmi.n	80052fe <_printf_i+0x18a>
 80052f8:	065f      	lsls	r7, r3, #25
 80052fa:	bf48      	it	mi
 80052fc:	b2ad      	uxthmi	r5, r5
 80052fe:	6031      	str	r1, [r6, #0]
 8005300:	07d9      	lsls	r1, r3, #31
 8005302:	bf44      	itt	mi
 8005304:	f043 0320 	orrmi.w	r3, r3, #32
 8005308:	6023      	strmi	r3, [r4, #0]
 800530a:	b11d      	cbz	r5, 8005314 <_printf_i+0x1a0>
 800530c:	2310      	movs	r3, #16
 800530e:	e7ab      	b.n	8005268 <_printf_i+0xf4>
 8005310:	4826      	ldr	r0, [pc, #152]	@ (80053ac <_printf_i+0x238>)
 8005312:	e7e9      	b.n	80052e8 <_printf_i+0x174>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	f023 0320 	bic.w	r3, r3, #32
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	e7f6      	b.n	800530c <_printf_i+0x198>
 800531e:	4616      	mov	r6, r2
 8005320:	e7bd      	b.n	800529e <_printf_i+0x12a>
 8005322:	6833      	ldr	r3, [r6, #0]
 8005324:	6825      	ldr	r5, [r4, #0]
 8005326:	1d18      	adds	r0, r3, #4
 8005328:	6961      	ldr	r1, [r4, #20]
 800532a:	6030      	str	r0, [r6, #0]
 800532c:	062e      	lsls	r6, r5, #24
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	d501      	bpl.n	8005336 <_printf_i+0x1c2>
 8005332:	6019      	str	r1, [r3, #0]
 8005334:	e002      	b.n	800533c <_printf_i+0x1c8>
 8005336:	0668      	lsls	r0, r5, #25
 8005338:	d5fb      	bpl.n	8005332 <_printf_i+0x1be>
 800533a:	8019      	strh	r1, [r3, #0]
 800533c:	2300      	movs	r3, #0
 800533e:	4616      	mov	r6, r2
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	e7bc      	b.n	80052be <_printf_i+0x14a>
 8005344:	6833      	ldr	r3, [r6, #0]
 8005346:	2100      	movs	r1, #0
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	6032      	str	r2, [r6, #0]
 800534c:	681e      	ldr	r6, [r3, #0]
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f859 	bl	8005408 <memchr>
 8005356:	b108      	cbz	r0, 800535c <_printf_i+0x1e8>
 8005358:	1b80      	subs	r0, r0, r6
 800535a:	6060      	str	r0, [r4, #4]
 800535c:	6863      	ldr	r3, [r4, #4]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2300      	movs	r3, #0
 8005362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005366:	e7aa      	b.n	80052be <_printf_i+0x14a>
 8005368:	4632      	mov	r2, r6
 800536a:	4649      	mov	r1, r9
 800536c:	4640      	mov	r0, r8
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	47d0      	blx	sl
 8005372:	3001      	adds	r0, #1
 8005374:	d0ad      	beq.n	80052d2 <_printf_i+0x15e>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	079b      	lsls	r3, r3, #30
 800537a:	d413      	bmi.n	80053a4 <_printf_i+0x230>
 800537c:	68e0      	ldr	r0, [r4, #12]
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	4298      	cmp	r0, r3
 8005382:	bfb8      	it	lt
 8005384:	4618      	movlt	r0, r3
 8005386:	e7a6      	b.n	80052d6 <_printf_i+0x162>
 8005388:	2301      	movs	r3, #1
 800538a:	4632      	mov	r2, r6
 800538c:	4649      	mov	r1, r9
 800538e:	4640      	mov	r0, r8
 8005390:	47d0      	blx	sl
 8005392:	3001      	adds	r0, #1
 8005394:	d09d      	beq.n	80052d2 <_printf_i+0x15e>
 8005396:	3501      	adds	r5, #1
 8005398:	68e3      	ldr	r3, [r4, #12]
 800539a:	9903      	ldr	r1, [sp, #12]
 800539c:	1a5b      	subs	r3, r3, r1
 800539e:	42ab      	cmp	r3, r5
 80053a0:	dcf2      	bgt.n	8005388 <_printf_i+0x214>
 80053a2:	e7eb      	b.n	800537c <_printf_i+0x208>
 80053a4:	2500      	movs	r5, #0
 80053a6:	f104 0619 	add.w	r6, r4, #25
 80053aa:	e7f5      	b.n	8005398 <_printf_i+0x224>
 80053ac:	08005537 	.word	0x08005537
 80053b0:	08005548 	.word	0x08005548

080053b4 <memmove>:
 80053b4:	4288      	cmp	r0, r1
 80053b6:	b510      	push	{r4, lr}
 80053b8:	eb01 0402 	add.w	r4, r1, r2
 80053bc:	d902      	bls.n	80053c4 <memmove+0x10>
 80053be:	4284      	cmp	r4, r0
 80053c0:	4623      	mov	r3, r4
 80053c2:	d807      	bhi.n	80053d4 <memmove+0x20>
 80053c4:	1e43      	subs	r3, r0, #1
 80053c6:	42a1      	cmp	r1, r4
 80053c8:	d008      	beq.n	80053dc <memmove+0x28>
 80053ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053d2:	e7f8      	b.n	80053c6 <memmove+0x12>
 80053d4:	4601      	mov	r1, r0
 80053d6:	4402      	add	r2, r0
 80053d8:	428a      	cmp	r2, r1
 80053da:	d100      	bne.n	80053de <memmove+0x2a>
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053e6:	e7f7      	b.n	80053d8 <memmove+0x24>

080053e8 <_sbrk_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	2300      	movs	r3, #0
 80053ec:	4d05      	ldr	r5, [pc, #20]	@ (8005404 <_sbrk_r+0x1c>)
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fc fb9c 	bl	8001b30 <_sbrk>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_sbrk_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_sbrk_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	20000348 	.word	0x20000348

08005408 <memchr>:
 8005408:	4603      	mov	r3, r0
 800540a:	b510      	push	{r4, lr}
 800540c:	b2c9      	uxtb	r1, r1
 800540e:	4402      	add	r2, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	4618      	mov	r0, r3
 8005414:	d101      	bne.n	800541a <memchr+0x12>
 8005416:	2000      	movs	r0, #0
 8005418:	e003      	b.n	8005422 <memchr+0x1a>
 800541a:	7804      	ldrb	r4, [r0, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	428c      	cmp	r4, r1
 8005420:	d1f6      	bne.n	8005410 <memchr+0x8>
 8005422:	bd10      	pop	{r4, pc}

08005424 <memcpy>:
 8005424:	440a      	add	r2, r1
 8005426:	4291      	cmp	r1, r2
 8005428:	f100 33ff 	add.w	r3, r0, #4294967295
 800542c:	d100      	bne.n	8005430 <memcpy+0xc>
 800542e:	4770      	bx	lr
 8005430:	b510      	push	{r4, lr}
 8005432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005436:	4291      	cmp	r1, r2
 8005438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800543c:	d1f9      	bne.n	8005432 <memcpy+0xe>
 800543e:	bd10      	pop	{r4, pc}

08005440 <_realloc_r>:
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4680      	mov	r8, r0
 8005446:	4615      	mov	r5, r2
 8005448:	460c      	mov	r4, r1
 800544a:	b921      	cbnz	r1, 8005456 <_realloc_r+0x16>
 800544c:	4611      	mov	r1, r2
 800544e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	f7ff bc39 	b.w	8004cc8 <_malloc_r>
 8005456:	b92a      	cbnz	r2, 8005464 <_realloc_r+0x24>
 8005458:	f7ff fbcc 	bl	8004bf4 <_free_r>
 800545c:	2400      	movs	r4, #0
 800545e:	4620      	mov	r0, r4
 8005460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005464:	f000 f81a 	bl	800549c <_malloc_usable_size_r>
 8005468:	4285      	cmp	r5, r0
 800546a:	4606      	mov	r6, r0
 800546c:	d802      	bhi.n	8005474 <_realloc_r+0x34>
 800546e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005472:	d8f4      	bhi.n	800545e <_realloc_r+0x1e>
 8005474:	4629      	mov	r1, r5
 8005476:	4640      	mov	r0, r8
 8005478:	f7ff fc26 	bl	8004cc8 <_malloc_r>
 800547c:	4607      	mov	r7, r0
 800547e:	2800      	cmp	r0, #0
 8005480:	d0ec      	beq.n	800545c <_realloc_r+0x1c>
 8005482:	42b5      	cmp	r5, r6
 8005484:	462a      	mov	r2, r5
 8005486:	4621      	mov	r1, r4
 8005488:	bf28      	it	cs
 800548a:	4632      	movcs	r2, r6
 800548c:	f7ff ffca 	bl	8005424 <memcpy>
 8005490:	4621      	mov	r1, r4
 8005492:	4640      	mov	r0, r8
 8005494:	f7ff fbae 	bl	8004bf4 <_free_r>
 8005498:	463c      	mov	r4, r7
 800549a:	e7e0      	b.n	800545e <_realloc_r+0x1e>

0800549c <_malloc_usable_size_r>:
 800549c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a0:	1f18      	subs	r0, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bfbc      	itt	lt
 80054a6:	580b      	ldrlt	r3, [r1, r0]
 80054a8:	18c0      	addlt	r0, r0, r3
 80054aa:	4770      	bx	lr

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr
